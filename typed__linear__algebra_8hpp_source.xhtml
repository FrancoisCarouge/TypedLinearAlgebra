<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Typed Linear Algebra: /github/workspace/include/fcarouge/typed_linear_algebra.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Typed Linear Algebra<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Typed Linear Algebra</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('typed__linear__algebra_8hpp_source.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">typed_linear_algebra.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="typed__linear__algebra_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/* Typed Linear Algebra</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">Version 0.1.0</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">https://github.com/FrancoisCarouge/TypedLinearAlgebra</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment"></span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment"></span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment"></span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">means.</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment"></span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment"></span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="preprocessor">#ifndef FCAROUGE_TYPED_LINEAR_ALGEBRA_HPP</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="preprocessor">#define FCAROUGE_TYPED_LINEAR_ALGEBRA_HPP</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#include &quot;<a class="code" href="utility_8hpp.xhtml">typed_linear_algebra_internal/utility.hpp</a>&quot;</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span><span class="preprocessor">#include &lt;concepts&gt;</span></div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span><span class="preprocessor">#include &lt;cstddef&gt;</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="preprocessor">#include &lt;format&gt;</span></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="preprocessor">#include &lt;initializer_list&gt;</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a> {</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span><span class="keyword">template</span> &lt;typed_linear_algebra_internal::algebraic Matrix, <span class="keyword">typename</span> RowIndexes,</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>          <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="foldopen" id="foldopen00075" data-start="{" data-end="};">
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml">   75</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> {</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#afb29bafe8169d143aa4a310445609212">   82</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#afb29bafe8169d143aa4a310445609212">underlying</a> = <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a1233ce8915a8ea54b53c7912a477afdc">typed_linear_algebra_internal::underlying_t&lt;Matrix&gt;</a>;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span> </div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a4cb6909ad42c9f4560dbf7c51e5ed1e4">   90</a></span>  <span class="keyword">explicit</span> <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a4cb6909ad42c9f4560dbf7c51e5ed1e4">typed_matrix</a>(<span class="keyword">const</span> Matrix &amp;other) : <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>{other} {}</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span> </div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">   97</a></span>  Matrix <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span> </div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a67a638bf31384a9120a5def3c74b641a">  106</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#a67a638bf31384a9120a5def3c74b641a">row_indexes</a> = RowIndexes;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#ab04e1fa2704c503f7d6189238704c53a">  109</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#ab04e1fa2704c503f7d6189238704c53a">column_indexes</a> = ColumnIndexes;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> RowIndex, std::<span class="keywordtype">size_t</span> ColumnIndex&gt;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a8c7fed5cd91836e9a116a48d33b091c2">  113</a></span>  <span class="keyword">using </span><a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#a8c7fed5cd91836e9a116a48d33b091c2">element</a> = <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">typed_linear_algebra_internal::element</a>&lt;<a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a7003e001bcb6a08ca1346bafbc9b31f3">typed_matrix</a>, RowIndex,</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>                                                         ColumnIndex&gt;;</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="foldopen" id="foldopen00122" data-start="{" data-end="};">
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a15d0673c2c5a8f97ec7d6d6120bc37a4">  122</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">static</span> std::size_t <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#a15d0673c2c5a8f97ec7d6d6120bc37a4">rows</a>{</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>      <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">typed_linear_algebra_internal::size&lt;row_indexes&gt;</a>};</div>
</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="foldopen" id="foldopen00126" data-start="{" data-end="};">
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a46ef06b82cd1ab3db9a22cd31436b802">  126</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">static</span> std::size_t <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#a46ef06b82cd1ab3db9a22cd31436b802">columns</a>{</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>      <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">typed_linear_algebra_internal::size&lt;column_indexes&gt;</a>};</div>
</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a7003e001bcb6a08ca1346bafbc9b31f3">  134</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a7003e001bcb6a08ca1346bafbc9b31f3">typed_matrix</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a61debbe8e973b969b79ed4efad933054">  136</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a61debbe8e973b969b79ed4efad933054">typed_matrix</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a7ec9fac774b1a9517b6ecf001c9387b1">  138</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;<a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a7ec9fac774b1a9517b6ecf001c9387b1">operator=</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a01a3060309b0adf3a17736a0c2e0331e">  140</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a01a3060309b0adf3a17736a0c2e0331e">typed_matrix</a>(<a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span> </div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a79f8df9c51f9f86dd6070ac319ba815d">  142</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;<a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a79f8df9c51f9f86dd6070ac319ba815d">operator=</a>(<a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span> </div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  <span class="keyword">template</span> &lt;typed_linear_algebra_<span class="keywordtype">int</span>ernal::algebraic OtherMatrix&gt;</div>
<div class="foldopen" id="foldopen00146" data-start="{" data-end="}">
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a75b7d16e5b2202e4ba4cbebef3e521bf">  146</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a75b7d16e5b2202e4ba4cbebef3e521bf">typed_matrix</a>(</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>      <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;OtherMatrix, RowIndexes, ColumnIndexes&gt;</a> &amp;other)</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>      : <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>{other.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>} {}</div>
</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span> </div>
<div class="foldopen" id="foldopen00150" data-start="{" data-end="}">
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a7fcc681cdb03b551c09c8c4cd4445e78">  150</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a7fcc681cdb03b551c09c8c4cd4445e78">typed_matrix</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#a8c7fed5cd91836e9a116a48d33b091c2">element&lt;0, 0&gt;</a> (</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>      &amp;elements)[<a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">typed_linear_algebra_internal::size&lt;RowIndexes&gt;</a> *</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>                 <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">typed_linear_algebra_internal::size&lt;ColumnIndexes&gt;</a>])</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::uniform&lt;typed_matrix&gt; &amp;&amp;</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>             typed_linear_algebra_internal::one_dimension&lt;typed_matrix&gt;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>      : <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>{elements} {}</div>
</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  <span class="keyword">template</span> &lt;typed_linear_algebra_<span class="keywordtype">int</span>ernal::arithmetic Type&gt;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::singleton&lt;typed_matrix&gt;</div>
<div class="foldopen" id="foldopen00159" data-start="{" data-end="}">
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#ac7d0bcc419946854f41d3bfb127441fb">  159</a></span>  <span class="keyword">explicit</span> <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#ac7d0bcc419946854f41d3bfb127441fb">typed_matrix</a>(<span class="keyword">const</span> Type &amp;value) {</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>    <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(0, 0) = typed_linear_algebra_internal::element_traits&lt;</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>        <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#afb29bafe8169d143aa4a310445609212">underlying</a>, Type&gt;::to_underlying(value);</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  }</div>
</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00166" data-start="{" data-end="}">
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a0a9628b9db68f352c7064f3d31aa2891">  166</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a0a9628b9db68f352c7064f3d31aa2891">typed_matrix</a>(</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>      std::initializer_list&lt;std::initializer_list&lt;Type&gt;&gt; row_list)</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::uniform&lt;typed_matrix&gt;</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  {</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>    <span class="keywordflow">for</span> (std::size_t i{0}; <span class="keyword">const</span> <span class="keyword">auto</span> &amp;row : row_list) {</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>      <span class="keywordflow">for</span> (std::size_t j{0}; <span class="keyword">const</span> <span class="keyword">auto</span> &amp;value : row) {</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>        <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(i, j) = typed_linear_algebra_internal::element_traits&lt;</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>            <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#afb29bafe8169d143aa4a310445609212">underlying</a>, Type&gt;::to_underlying(value);</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>        ++j;</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>      }</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>      ++i;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>    }</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  }</div>
</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Types&gt;</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::row&lt;typed_matrix&gt; &amp;&amp;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>             (not typed_linear_algebra_internal::column&lt;typed_matrix&gt;) &amp;&amp;</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>             typed_linear_algebra_internal::same_size&lt;ColumnIndexes,</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>                                                      std::tuple&lt;Types...&gt;&gt;</div>
<div class="foldopen" id="foldopen00188" data-start="{" data-end="}">
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#ad916908512a4cb1426ed4d3f77a6864f">  188</a></span>  <span class="keyword">explicit</span> <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#ad916908512a4cb1426ed4d3f77a6864f">typed_matrix</a>(<span class="keyword">const</span> Types &amp;...values) {</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    std::tuple value_pack{values...};</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    <a class="code hl_function" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a9a86c642ba2610ed4f92a3d84baf5b00">typed_linear_algebra_internal::for_constexpr</a>&lt;</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>        0, <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">typed_linear_algebra_internal::size&lt;ColumnIndexes&gt;</a>, 1&gt;(</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>        [<span class="keyword">this</span>, &amp;value_pack](<span class="keyword">auto</span> position) {</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>          <span class="keyword">auto</span> value{std::get&lt;position&gt;(value_pack)};</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>          <span class="keyword">using </span>type = std::remove_cvref_t&lt;<span class="keyword">decltype</span>(value)&gt;;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>          <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>[position] = typed_linear_algebra_internal::element_traits&lt;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>              <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#afb29bafe8169d143aa4a310445609212">underlying</a>, type&gt;::to_underlying(value);</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>        });</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  }</div>
</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Types&gt;</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::column&lt;typed_matrix&gt; &amp;&amp;</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>             (not typed_linear_algebra_internal::row&lt;typed_matrix&gt;) &amp;&amp;</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>             typed_linear_algebra_internal::same_size&lt;RowIndexes,</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>                                                      std::tuple&lt;Types...&gt;&gt;</div>
<div class="foldopen" id="foldopen00205" data-start="{" data-end="}">
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#ad454926b2a196df2d1971ded5488129f">  205</a></span>  <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#ad454926b2a196df2d1971ded5488129f">typed_matrix</a>(<span class="keyword">const</span> Types &amp;...values) {</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>    std::tuple value_pack{values...};</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>    <a class="code hl_function" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a9a86c642ba2610ed4f92a3d84baf5b00">typed_linear_algebra_internal::for_constexpr</a>&lt;</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>        0, <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">typed_linear_algebra_internal::size&lt;RowIndexes&gt;</a>, 1&gt;(</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>        [<span class="keyword">this</span>, &amp;value_pack](<span class="keyword">auto</span> position) {</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>          <span class="keyword">auto</span> value{std::get&lt;position&gt;(value_pack)};</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>          <span class="keyword">using </span>type = std::remove_cvref_t&lt;<span class="keyword">decltype</span>(value)&gt;;</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>          <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>[position] = typed_linear_algebra_internal::element_traits&lt;</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>              <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#afb29bafe8169d143aa4a310445609212">underlying</a>, type&gt;::to_underlying(value);</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>        });</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  }</div>
</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a356c81c7cc366d0905dcceab17d79b56">  217</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">explicit</span>(<span class="keyword">false</span>) <span class="keyword">operator</span> <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#a8c7fed5cd91836e9a116a48d33b091c2">element&lt;0, 0&gt;</a> &amp;()</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::singleton&lt;typed_matrix&gt;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  {</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    <span class="keywordflow">return</span> typed_linear_algebra_internal::element_traits&lt;</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>        <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#afb29bafe8169d143aa4a310445609212">underlying</a>, <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#a8c7fed5cd91836e9a116a48d33b091c2">element&lt;0, 0&gt;</a>&gt;::from_underlying(<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(0, 0));</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  }</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="foldopen" id="foldopen00224" data-start="{" data-end="}">
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#ac9d568d3feedc777122e64bc31abf4c5">  224</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;&amp;<a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#ac9d568d3feedc777122e64bc31abf4c5">operator[]</a>(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self,</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>                                                   std::size_t index)</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::uniform&lt;typed_matrix&gt; &amp;&amp;</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>             typed_linear_algebra_internal::one_dimension&lt;typed_matrix&gt;</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>  {</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data(index);</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>  }</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;&amp;</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>  <a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#ac9d568d3feedc777122e64bc31abf4c5">operator[]</a>(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self, std::size_t row, std::size_t column)</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::uniform&lt;typed_matrix&gt;</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  {</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data(row, column);</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  }</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;&amp;operator()(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self,</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>                                                   std::size_t index)</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::uniform&lt;typed_matrix&gt; &amp;&amp;</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>             typed_linear_algebra_internal::one_dimension&lt;typed_matrix&gt;</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  {</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data(index);</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  }</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> &amp;&amp;</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  operator()(<span class="keyword">this</span> <span class="keyword">auto</span> &amp;&amp;self, std::size_t row, std::size_t column)</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::uniform&lt;typed_matrix&gt;</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  {</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data(row, column);</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  }</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span> </div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Row, std::<span class="keywordtype">size_t</span> Column&gt;</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::in_range&lt;</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>                 Row, 0, <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">typed_linear_algebra_internal::size&lt;RowIndexes&gt;</a>&gt; &amp;&amp;</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>             typed_linear_algebra_internal::in_range&lt;</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>                 Column, 0, <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">typed_linear_algebra_internal::size&lt;ColumnIndexes&gt;</a>&gt;</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#a8c7fed5cd91836e9a116a48d33b091c2">element&lt;Row, Column&gt;</a> &amp;<a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a50777036e7ee63672b133eb0fa9709d0">at</a>() {</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>    <span class="keywordflow">return</span> typed_linear_algebra_internal::</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>        element_traits&lt;underlying, element&lt;Row, Column&gt;&gt;::from_underlying(</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>            <a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(std::size_t{Row}, std::size_t{Column}));</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  }</div>
</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span> </div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>    <span class="keyword">requires</span> typed_linear_algebra_internal::column&lt;typed_matrix&gt; &amp;&amp;</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>             typed_linear_algebra_internal::in_range&lt;</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>                 Index, 0, <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">typed_linear_algebra_internal::size&lt;RowIndexes&gt;</a>&gt;</div>
<div class="foldopen" id="foldopen00269" data-start="{" data-end="}">
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno"><a class="line" href="structfcarouge_1_1typed__matrix.xhtml#a50777036e7ee63672b133eb0fa9709d0">  269</a></span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#a8c7fed5cd91836e9a116a48d33b091c2">element&lt;Index, 0&gt;</a> &amp;<a class="code hl_function" href="structfcarouge_1_1typed__matrix.xhtml#a50777036e7ee63672b133eb0fa9709d0">at</a>() {</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>    <span class="keywordflow">return</span> typed_linear_algebra_internal::element_traits&lt;</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>        <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#afb29bafe8169d143aa4a310445609212">underlying</a>, <a class="code hl_typedef" href="structfcarouge_1_1typed__matrix.xhtml#a8c7fed5cd91836e9a116a48d33b091c2">element&lt;Index, 0&gt;</a>&gt;::from_underlying(<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(std::size_t{</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>        Index}));</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>  }</div>
</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span> </div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>};</div>
</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span> </div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix, <span class="keyword">typename</span>... ColumnIndexes&gt;</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a83509db0f0eee1994d5e9a9f221a67a8">  280</a></span><span class="keyword">using </span><a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_row_vector</a> =</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>    <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix, std::tuple&lt;int&gt;</a>, std::tuple&lt;ColumnIndexes...&gt;&gt;;</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix, <span class="keyword">typename</span>... RowIndexes&gt;</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a68cfd1293d8131d82ca584d6dcfdd02b">  285</a></span><span class="keyword">using </span><a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_column_vector</a> =</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>    <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, std::tuple&lt;RowIndexes...&gt;, std::tuple&lt;int&gt;&gt;;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span> </div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix1, <span class="keyword">typename</span> Matrix2, <span class="keyword">typename</span> RowIndexes,</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>          <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">bool</span></div>
<div class="foldopen" id="foldopen00293" data-start="{" data-end="}">
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#aedd2b285823a2feb3a21d4942829a8c2">  293</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#aedd2b285823a2feb3a21d4942829a8c2">operator==</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix1, RowIndexes, ColumnIndexes&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>           <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix2, RowIndexes, ColumnIndexes&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> == rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>;</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>}</div>
</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix1, <span class="keyword">typename</span> Matrix2, <span class="keyword">typename</span> RowIndexes,</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>          <span class="keyword">typename</span> ColumnIndexes, <span class="keyword">typename</span> Indexes&gt;</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00301" data-start="{" data-end="}">
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a00e7c3ec7b458e47794790e050cb59fe">  301</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a00e7c3ec7b458e47794790e050cb59fe">operator*</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix1, RowIndexes, Indexes&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>          <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix2, Indexes, ColumnIndexes&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>      <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a185964b5c8d035580b458b26a229a549">typed_linear_algebra_internal::evaluate</a>&lt;</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>          <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aca585f39845dac1a268a75826589014c">typed_linear_algebra_internal::product&lt;Matrix1, Matrix2&gt;</a>&gt;,</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>      RowIndexes, ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> * rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>}</div>
</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span><span class="keyword">template</span> &lt;typed_linear_algebra_internal::arithmetic Scalar, <span class="keyword">typename</span> Matrix,</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>          <span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>  <span class="keyword">requires</span> typed_linear_algebra_internal::singleton&lt;Matrix&gt;</div>
<div class="foldopen" id="foldopen00312" data-start="{" data-end="}">
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#aefa1cc7007a2f8c1ce848e845d6bd56f">  312</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="namespacefcarouge.xhtml#a00e7c3ec7b458e47794790e050cb59fe">operator*</a>(Scalar lhs, <span class="keyword">const</span> Matrix &amp;rhs) {</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">typed_linear_algebra_internal::element&lt;Matrix, 0, 0&gt;</a>{lhs *</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>                                                              rhs.data(0)};</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>}</div>
</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span> </div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span><span class="keyword">template</span> &lt;typed_linear_algebra_internal::arithmetic Scalar, <span class="keyword">typename</span> Matrix,</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>          <span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00320" data-start="{" data-end="}">
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a537752ac8f1801cfe82cd1c3c909239d">  320</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a00e7c3ec7b458e47794790e050cb59fe">operator*</a>(Scalar lhs,</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>          <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;typed_linear_algebra_internal::evaluate&lt;Matrix&gt;</a>,</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>                      RowIndexes, ColumnIndexes&gt;{lhs * rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>}</div>
</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span> </div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span><span class="keyword">template</span> &lt;typed_linear_algebra_internal::arithmetic Scalar, <span class="keyword">typename</span> Matrix,</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>          <span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>  <span class="keyword">requires</span> typed_linear_algebra_internal::singleton&lt;Matrix&gt;</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00330" data-start="{" data-end="}">
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a44c8d7add957050424ddd01d4e60c908">  330</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a00e7c3ec7b458e47794790e050cb59fe">operator*</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>          Scalar rhs) {</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">typed_linear_algebra_internal::element&lt;Matrix, 0, 0&gt;</a>{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(0) *</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>                                                              rhs};</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>}</div>
</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span> </div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span><span class="keyword">template</span> &lt;typed_linear_algebra_internal::arithmetic Scalar, <span class="keyword">typename</span> Matrix,</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>          <span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00339" data-start="{" data-end="}">
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a016305f330897bacd2e9ebf45ee9de9b">  339</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a00e7c3ec7b458e47794790e050cb59fe">operator*</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>          Scalar rhs) {</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;typed_linear_algebra_internal::evaluate&lt;Matrix&gt;</a>,</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>                      RowIndexes, ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> * rhs};</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>}</div>
</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span> </div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix1, <span class="keyword">typename</span> Matrix2, <span class="keyword">typename</span> RowIndexes,</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>          <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00348" data-start="{" data-end="}">
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#af0d698433b36932e574f63ebe64d7a69">  348</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#af0d698433b36932e574f63ebe64d7a69">operator+</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix1, RowIndexes, ColumnIndexes&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>          <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix2, RowIndexes, ColumnIndexes&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;typed_linear_algebra_internal::evaluate&lt;Matrix1&gt;</a>,</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>                      RowIndexes, ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> + rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>}</div>
</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span> </div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span><span class="keyword">template</span> &lt;typed_linear_algebra_internal::arithmetic Scalar, <span class="keyword">typename</span> Matrix,</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>          <span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>  <span class="keyword">requires</span> typed_linear_algebra_internal::singleton&lt;Matrix&gt;</div>
<div class="foldopen" id="foldopen00357" data-start="{" data-end="}">
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#affa33b37ddb4437e6616aa9050b1782c">  357</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="namespacefcarouge.xhtml#af0d698433b36932e574f63ebe64d7a69">operator+</a>(<span class="keyword">const</span> Matrix &amp;lhs, Scalar rhs) {</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">typed_linear_algebra_internal::element&lt;Matrix, 0, 0&gt;</a>{lhs.data(0) +</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>                                                              rhs};</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>}</div>
</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span> </div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix1, <span class="keyword">typename</span> Matrix2, <span class="keyword">typename</span> RowIndexes,</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>          <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00366" data-start="{" data-end="}">
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a3533f0e5d01c0ae5533ea62a07bcbdc4">  366</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#a3533f0e5d01c0ae5533ea62a07bcbdc4">operator-</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix1, RowIndexes, ColumnIndexes&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>          <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix2, RowIndexes, ColumnIndexes&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;typed_linear_algebra_internal::evaluate&lt;Matrix1&gt;</a>,</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>                      RowIndexes, ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> - rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>}</div>
</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span> </div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span><span class="keyword">template</span> &lt;typed_linear_algebra_internal::arithmetic Scalar, <span class="keyword">typename</span> Matrix,</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>          <span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>  <span class="keyword">requires</span> typed_linear_algebra_internal::singleton&lt;Matrix&gt;</div>
<div class="foldopen" id="foldopen00375" data-start="{" data-end="}">
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a3c84ed81fa974a429f4257c1a79d4024">  375</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="namespacefcarouge.xhtml#a3533f0e5d01c0ae5533ea62a07bcbdc4">operator-</a>(Scalar lhs, <span class="keyword">const</span> Matrix &amp;rhs) {</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">typed_linear_algebra_internal::element&lt;Matrix, 0, 0&gt;</a>{lhs -</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>                                                              rhs.data(0)};</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>}</div>
</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span> </div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix1, <span class="keyword">typename</span> Matrix2, <span class="keyword">typename</span> RowIndexes1,</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>          <span class="keyword">typename</span> RowIndexes2, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00383" data-start="{" data-end="}">
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#ab036216395f2fd7b69e4246285d10098">  383</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#ab036216395f2fd7b69e4246285d10098">operator/</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix1, RowIndexes1, ColumnIndexes&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>          <span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix2, RowIndexes2, ColumnIndexes&gt;</a> &amp;rhs) {</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>      <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a185964b5c8d035580b458b26a229a549">typed_linear_algebra_internal::evaluate</a>&lt;</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>          <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ad9aae459061728b7d7b2ae70196f2028">typed_linear_algebra_internal::quotient&lt;Matrix1, Matrix2&gt;</a>&gt;,</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>      RowIndexes1, RowIndexes2&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> / rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>}</div>
</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span><span class="keyword">template</span> &lt;typed_linear_algebra_internal::arithmetic Scalar, <span class="keyword">typename</span> Matrix,</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>          <span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00394" data-start="{" data-end="}">
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a0f96a907020c9f05bc2d00576ed4deb7">  394</a></span><a class="code hl_function" href="namespacefcarouge.xhtml#ab036216395f2fd7b69e4246285d10098">operator/</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;</a> &amp;lhs,</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>          Scalar rhs) {</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;typed_linear_algebra_internal::evaluate&lt;Matrix&gt;</a>,</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>                      RowIndexes, ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> / rhs};</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>}</div>
</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span> </div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span><span class="keyword">template</span> &lt;typed_linear_algebra_internal::arithmetic Scalar, <span class="keyword">typename</span> Matrix,</div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>          <span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>  <span class="keyword">requires</span> typed_linear_algebra_internal::singleton&lt;Matrix&gt;</div>
<div class="foldopen" id="foldopen00403" data-start="{" data-end="}">
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno"><a class="line" href="namespacefcarouge.xhtml#a60548800eb1f9a200f635842bc61bd59">  403</a></span>[[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="namespacefcarouge.xhtml#ab036216395f2fd7b69e4246285d10098">operator/</a>(<span class="keyword">const</span> Matrix &amp;lhs, Scalar rhs) {</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">typed_linear_algebra_internal::element&lt;Matrix, 0, 0&gt;</a>{lhs.data(0) /</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>                                                              rhs};</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span>}</div>
</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>} <span class="comment">// namespace fcarouge</span></div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span> </div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix, <span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes,</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>          <span class="keyword">typename</span> Char&gt;</div>
<div class="foldopen" id="foldopen00412" data-start="{" data-end="};">
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml">  412</a></span><span class="keyword">struct </span>std::formatter&lt;<a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a>::typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;,</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>                      Char&gt; {</div>
<div class="foldopen" id="foldopen00414" data-start="{" data-end="}">
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#a899134801f37e61bc8021dde81611963">  414</a></span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span> <a class="code hl_function" href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#a899134801f37e61bc8021dde81611963">parse</a>(std::basic_format_parse_context&lt;Char&gt; &amp;parse_context) {</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span>    <span class="keywordflow">return</span> parse_context.begin();</div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span>  }</div>
</div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span> </div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputIterator&gt;</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00420" data-start="{" data-end="}">
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#ad60373a22952f78108372e0bdc6d6d29">  420</a></span>  <a class="code hl_function" href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#ad60373a22952f78108372e0bdc6d6d29">format</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;</a> &amp;value,</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>         std::basic_format_context&lt;OutputIterator, Char&gt; &amp;format_context) <span class="keyword">const</span></div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>      -&gt; OutputIterator {</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>    format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;[&quot;</span>));</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span> </div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>    <span class="keywordflow">for</span> (std::size_t i{0};</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>         i &lt; fcarouge::typed_linear_algebra_internal::size&lt;RowIndexes&gt;; ++i) {</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>      <span class="keywordflow">if</span> (i &gt; 0) {</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>        format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;, &quot;</span>));</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span>      }</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span> </div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span>      format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;[&quot;</span>));</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span> </div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>      <span class="keywordflow">for</span> (std::size_t j{0};</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>           j &lt; fcarouge::typed_linear_algebra_internal::size&lt;ColumnIndexes&gt;;</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>           ++j) {</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>        <span class="keywordflow">if</span> (j &gt; 0) {</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>          format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;, &quot;</span>));</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>        }</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span> </div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>        format_context.advance_to(</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>            std::format_to(format_context.out(), <span class="stringliteral">&quot;{}&quot;</span>, value.data(i, j)));</div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>      }</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span> </div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span>      format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;]&quot;</span>));</div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>    }</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span> </div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>    format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;]&quot;</span>));</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span> </div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>    <span class="keywordflow">return</span> format_context.out();</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>  }</div>
</div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span> </div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputIterator&gt;</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00454" data-start="{" data-end="}">
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#ace884788d7e090f31998bb8afa30c18e">  454</a></span>  <a class="code hl_function" href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#ace884788d7e090f31998bb8afa30c18e">format</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;</a> &amp;value,</div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span>         std::basic_format_context&lt;OutputIterator, Char&gt; &amp;format_context) <span class="keyword">const</span></div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span>      -&gt; OutputIterator</div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span>    <span class="keyword">requires</span> fcarouge::typed_linear_algebra_internal::row&lt;</div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>        <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;</a>&gt;</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>  {</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span>    format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;[&quot;</span>));</div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span> </div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>    <span class="keywordflow">for</span> (std::size_t j{0};</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>         j &lt; fcarouge::typed_linear_algebra_internal::size&lt;ColumnIndexes&gt;;</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>         ++j) {</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>      <span class="keywordflow">if</span> (j &gt; 0) {</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span>        format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;, &quot;</span>));</div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span>      }</div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span> </div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span>      format_context.advance_to(</div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span>          std::format_to(format_context.out(), <span class="stringliteral">&quot;{}&quot;</span>, value.data(0, j)));</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>    }</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span> </div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>    format_context.advance_to(std::format_to(format_context.out(), <span class="stringliteral">&quot;]&quot;</span>));</div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span> </div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span>    <span class="keywordflow">return</span> format_context.out();</div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span>  }</div>
</div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span> </div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> OutputIterator&gt;</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="foldopen" id="foldopen00480" data-start="{" data-end="}">
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno"><a class="line" href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#ab4380d13e99a2818fa1b2cc0239f09f9">  480</a></span>  <a class="code hl_function" href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#ab4380d13e99a2818fa1b2cc0239f09f9">format</a>(<span class="keyword">const</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;</a> &amp;value,</div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span>         std::basic_format_context&lt;OutputIterator, Char&gt; &amp;format_context) <span class="keyword">const</span></div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span>      -&gt; OutputIterator</div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span>    <span class="keyword">requires</span> fcarouge::typed_linear_algebra_internal::singleton&lt;</div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span>        <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix&lt;Matrix, RowIndexes, ColumnIndexes&gt;</a>&gt;</div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span>  {</div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span>    format_context.advance_to(</div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span>        std::format_to(format_context.out(), <span class="stringliteral">&quot;{}&quot;</span>, value.data(0, 0)));</div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span> </div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span>    <span class="keywordflow">return</span> format_context.out();</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span>  }</div>
</div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span>};</div>
</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span> </div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span><span class="preprocessor">#endif </span><span class="comment">// FCAROUGE_TYPED_LINEAR_ALGEBRA_HPP</span></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a1233ce8915a8ea54b53c7912a477afdc"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a1233ce8915a8ea54b53c7912a477afdc">fcarouge::typed_linear_algebra_internal::underlying_t</a></div><div class="ttdeci">std::remove_cvref_t&lt; decltype(std::declval&lt; Matrix &gt;()(0, 0))&gt; underlying_t</div><div class="ttdoc">The underlying storage type of the matrix's elements.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00134">utility.hpp:134</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a185964b5c8d035580b458b26a229a549"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a185964b5c8d035580b458b26a229a549">fcarouge::typed_linear_algebra_internal::evaluate</a></div><div class="ttdeci">std::invoke_result_t&lt; evaluates&lt; Type &gt; &gt; evaluate</div><div class="ttdoc">Evaluater helper type.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00079">utility.hpp:79</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a779b86b92edb4191f64f6a286495d228"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">fcarouge::typed_linear_algebra_internal::element</a></div><div class="ttdeci">product&lt; std::tuple_element_t&lt; RowIndex, typename Matrix::row_indexes &gt;, std::tuple_element_t&lt; ColumnIndex, typename Matrix::column_indexes &gt; &gt; element</div><div class="ttdoc">The type of the element at the given matrix indexes position.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00139">utility.hpp:139</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a9a86c642ba2610ed4f92a3d84baf5b00"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a9a86c642ba2610ed4f92a3d84baf5b00">fcarouge::typed_linear_algebra_internal::for_constexpr</a></div><div class="ttdeci">constexpr void for_constexpr(Function &amp;&amp;function)</div><div class="ttdoc">Compile-time for loop.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00089">utility.hpp:89</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_aca585f39845dac1a268a75826589014c"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aca585f39845dac1a268a75826589014c">fcarouge::typed_linear_algebra_internal::product</a></div><div class="ttdeci">std::invoke_result_t&lt; multiplies&lt; Lhs, Rhs &gt;, const Lhs &amp;, const Rhs &amp; &gt; product</div><div class="ttdoc">Helper type to deduce the result type of the product.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00069">utility.hpp:69</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_ad9aae459061728b7d7b2ae70196f2028"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ad9aae459061728b7d7b2ae70196f2028">fcarouge::typed_linear_algebra_internal::quotient</a></div><div class="ttdeci">std::invoke_result_t&lt; divides&lt; Lhs, Rhs &gt;, const Lhs &amp;, const Rhs &amp; &gt; quotient</div><div class="ttdoc">Divider helper type.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00058">utility.hpp:58</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_aef655fff0379b424e1493f0e13f75682"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">fcarouge::typed_linear_algebra_internal::size</a></div><div class="ttdeci">constexpr std::size_t size</div><div class="ttdoc">Size of tuple-like types.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00116">utility.hpp:116</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml"><div class="ttname"><a href="namespacefcarouge.xhtml">fcarouge</a></div><div class="ttdoc">Francois Carouge's projects namespace.</div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a00e7c3ec7b458e47794790e050cb59fe"><div class="ttname"><a href="namespacefcarouge.xhtml#a00e7c3ec7b458e47794790e050cb59fe">fcarouge::operator*</a></div><div class="ttdeci">constexpr auto operator*(const typed_matrix&lt; Matrix1, RowIndexes, Indexes &gt; &amp;lhs, const typed_matrix&lt; Matrix2, Indexes, ColumnIndexes &gt; &amp;rhs)</div><div class="ttdef"><b>Definition</b> <a href="#l00301">typed_linear_algebra.hpp:301</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a3533f0e5d01c0ae5533ea62a07bcbdc4"><div class="ttname"><a href="namespacefcarouge.xhtml#a3533f0e5d01c0ae5533ea62a07bcbdc4">fcarouge::operator-</a></div><div class="ttdeci">constexpr auto operator-(const typed_matrix&lt; Matrix1, RowIndexes, ColumnIndexes &gt; &amp;lhs, const typed_matrix&lt; Matrix2, RowIndexes, ColumnIndexes &gt; &amp;rhs)</div><div class="ttdef"><b>Definition</b> <a href="#l00366">typed_linear_algebra.hpp:366</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_ab036216395f2fd7b69e4246285d10098"><div class="ttname"><a href="namespacefcarouge.xhtml#ab036216395f2fd7b69e4246285d10098">fcarouge::operator/</a></div><div class="ttdeci">constexpr auto operator/(const typed_matrix&lt; Matrix1, RowIndexes1, ColumnIndexes &gt; &amp;lhs, const typed_matrix&lt; Matrix2, RowIndexes2, ColumnIndexes &gt; &amp;rhs)</div><div class="ttdef"><b>Definition</b> <a href="#l00383">typed_linear_algebra.hpp:383</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_aedd2b285823a2feb3a21d4942829a8c2"><div class="ttname"><a href="namespacefcarouge.xhtml#aedd2b285823a2feb3a21d4942829a8c2">fcarouge::operator==</a></div><div class="ttdeci">constexpr bool operator==(const typed_matrix&lt; Matrix1, RowIndexes, ColumnIndexes &gt; &amp;lhs, const typed_matrix&lt; Matrix2, RowIndexes, ColumnIndexes &gt; &amp;rhs)</div><div class="ttdef"><b>Definition</b> <a href="#l00293">typed_linear_algebra.hpp:293</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_af0d698433b36932e574f63ebe64d7a69"><div class="ttname"><a href="namespacefcarouge.xhtml#af0d698433b36932e574f63ebe64d7a69">fcarouge::operator+</a></div><div class="ttdeci">constexpr auto operator+(const typed_matrix&lt; Matrix1, RowIndexes, ColumnIndexes &gt; &amp;lhs, const typed_matrix&lt; Matrix2, RowIndexes, ColumnIndexes &gt; &amp;rhs)</div><div class="ttdef"><b>Definition</b> <a href="#l00348">typed_linear_algebra.hpp:348</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a></div><div class="ttdoc">Typed matrix.</div><div class="ttdef"><b>Definition</b> <a href="#l00075">typed_linear_algebra.hpp:75</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a01a3060309b0adf3a17736a0c2e0331e"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a01a3060309b0adf3a17736a0c2e0331e">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix(typed_matrix &amp;&amp;other)=default</div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a0a9628b9db68f352c7064f3d31aa2891"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a0a9628b9db68f352c7064f3d31aa2891">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix(std::initializer_list&lt; std::initializer_list&lt; Type &gt; &gt; row_list)</div><div class="ttdef"><b>Definition</b> <a href="#l00166">typed_linear_algebra.hpp:166</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a15d0673c2c5a8f97ec7d6d6120bc37a4"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a15d0673c2c5a8f97ec7d6d6120bc37a4">fcarouge::typed_matrix::rows</a></div><div class="ttdeci">static constexpr std::size_t rows</div><div class="ttdoc">The count of rows.</div><div class="ttdef"><b>Definition</b> <a href="#l00122">typed_linear_algebra.hpp:122</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a46ef06b82cd1ab3db9a22cd31436b802"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a46ef06b82cd1ab3db9a22cd31436b802">fcarouge::typed_matrix::columns</a></div><div class="ttdeci">static constexpr std::size_t columns</div><div class="ttdoc">The count of rows.</div><div class="ttdef"><b>Definition</b> <a href="#l00126">typed_linear_algebra.hpp:126</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a4cb6909ad42c9f4560dbf7c51e5ed1e4"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a4cb6909ad42c9f4560dbf7c51e5ed1e4">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix(const Matrix &amp;other)</div><div class="ttdef"><b>Definition</b> <a href="#l00090">typed_linear_algebra.hpp:90</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a50777036e7ee63672b133eb0fa9709d0"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a50777036e7ee63672b133eb0fa9709d0">fcarouge::typed_matrix::at</a></div><div class="ttdeci">constexpr element&lt; Index, 0 &gt; &amp; at()</div><div class="ttdef"><b>Definition</b> <a href="#l00269">typed_linear_algebra.hpp:269</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a61debbe8e973b969b79ed4efad933054"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a61debbe8e973b969b79ed4efad933054">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix(const typed_matrix &amp;other)=default</div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a67a638bf31384a9120a5def3c74b641a"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a67a638bf31384a9120a5def3c74b641a">fcarouge::typed_matrix::row_indexes</a></div><div class="ttdeci">RowIndexes row_indexes</div><div class="ttdoc">The tuple with the row components of the indexes.</div><div class="ttdef"><b>Definition</b> <a href="#l00106">typed_linear_algebra.hpp:106</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a7003e001bcb6a08ca1346bafbc9b31f3"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a7003e001bcb6a08ca1346bafbc9b31f3">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix()=default</div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a75b7d16e5b2202e4ba4cbebef3e521bf"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a75b7d16e5b2202e4ba4cbebef3e521bf">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix(const typed_matrix&lt; OtherMatrix, RowIndexes, ColumnIndexes &gt; &amp;other)</div><div class="ttdef"><b>Definition</b> <a href="#l00146">typed_linear_algebra.hpp:146</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a79f8df9c51f9f86dd6070ac319ba815d"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a79f8df9c51f9f86dd6070ac319ba815d">fcarouge::typed_matrix::operator=</a></div><div class="ttdeci">constexpr typed_matrix &amp; operator=(typed_matrix &amp;&amp;other)=default</div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a7ec9fac774b1a9517b6ecf001c9387b1"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a7ec9fac774b1a9517b6ecf001c9387b1">fcarouge::typed_matrix::operator=</a></div><div class="ttdeci">constexpr typed_matrix &amp; operator=(const typed_matrix &amp;other)=default</div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a7fcc681cdb03b551c09c8c4cd4445e78"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a7fcc681cdb03b551c09c8c4cd4445e78">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix(const element&lt; 0, 0 &gt;(&amp;elements)[typed_linear_algebra_internal::size&lt; RowIndexes &gt; *typed_linear_algebra_internal::size&lt; ColumnIndexes &gt;])</div><div class="ttdef"><b>Definition</b> <a href="#l00150">typed_linear_algebra.hpp:150</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_a8c7fed5cd91836e9a116a48d33b091c2"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#a8c7fed5cd91836e9a116a48d33b091c2">fcarouge::typed_matrix::element</a></div><div class="ttdeci">typed_linear_algebra_internal::element&lt; typed_matrix, RowIndex, ColumnIndex &gt; element</div><div class="ttdoc">The type of the element at the given matrix indexes position.</div><div class="ttdef"><b>Definition</b> <a href="#l00113">typed_linear_algebra.hpp:113</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_aa5db2a2356369dbf5807f3760aa04d4d"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">fcarouge::typed_matrix::data</a></div><div class="ttdeci">Matrix data</div><div class="ttdef"><b>Definition</b> <a href="#l00097">typed_linear_algebra.hpp:97</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_ab04e1fa2704c503f7d6189238704c53a"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#ab04e1fa2704c503f7d6189238704c53a">fcarouge::typed_matrix::column_indexes</a></div><div class="ttdeci">ColumnIndexes column_indexes</div><div class="ttdoc">The tuple with the column components of the indexes.</div><div class="ttdef"><b>Definition</b> <a href="#l00109">typed_linear_algebra.hpp:109</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_ac7d0bcc419946854f41d3bfb127441fb"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#ac7d0bcc419946854f41d3bfb127441fb">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix(const Type &amp;value)</div><div class="ttdef"><b>Definition</b> <a href="#l00159">typed_linear_algebra.hpp:159</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_ac9d568d3feedc777122e64bc31abf4c5"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#ac9d568d3feedc777122e64bc31abf4c5">fcarouge::typed_matrix::operator[]</a></div><div class="ttdeci">constexpr &amp;constexpr auto &amp;&amp; operator[](this auto &amp;&amp;self, std::size_t index) typed_linear_algebra_internal</div><div class="ttdef"><b>Definition</b> <a href="#l00224">typed_linear_algebra.hpp:224</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_ad454926b2a196df2d1971ded5488129f"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#ad454926b2a196df2d1971ded5488129f">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix(const Types &amp;...values)</div><div class="ttdef"><b>Definition</b> <a href="#l00205">typed_linear_algebra.hpp:205</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_ad916908512a4cb1426ed4d3f77a6864f"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#ad916908512a4cb1426ed4d3f77a6864f">fcarouge::typed_matrix::typed_matrix</a></div><div class="ttdeci">constexpr typed_matrix(const Types &amp;...values)</div><div class="ttdef"><b>Definition</b> <a href="#l00188">typed_linear_algebra.hpp:188</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_afb29bafe8169d143aa4a310445609212"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#afb29bafe8169d143aa4a310445609212">fcarouge::typed_matrix::underlying</a></div><div class="ttdeci">typed_linear_algebra_internal::underlying_t&lt; Matrix &gt; underlying</div><div class="ttdoc">The type of the element's underlying storage.</div><div class="ttdef"><b>Definition</b> <a href="#l00082">typed_linear_algebra.hpp:82</a></div></div>
<div class="ttc" id="astructstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4_xhtml_a899134801f37e61bc8021dde81611963"><div class="ttname"><a href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#a899134801f37e61bc8021dde81611963">std::formatter&lt; fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Char &gt;::parse</a></div><div class="ttdeci">constexpr auto parse(std::basic_format_parse_context&lt; Char &gt; &amp;parse_context)</div><div class="ttdef"><b>Definition</b> <a href="#l00414">typed_linear_algebra.hpp:414</a></div></div>
<div class="ttc" id="astructstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4_xhtml_ab4380d13e99a2818fa1b2cc0239f09f9"><div class="ttname"><a href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#ab4380d13e99a2818fa1b2cc0239f09f9">std::formatter&lt; fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Char &gt;::format</a></div><div class="ttdeci">constexpr auto format(const fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;value, std::basic_format_context&lt; OutputIterator, Char &gt; &amp;format_context) const -&gt; OutputIterator</div><div class="ttdef"><b>Definition</b> <a href="#l00480">typed_linear_algebra.hpp:480</a></div></div>
<div class="ttc" id="astructstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4_xhtml_ace884788d7e090f31998bb8afa30c18e"><div class="ttname"><a href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#ace884788d7e090f31998bb8afa30c18e">std::formatter&lt; fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Char &gt;::format</a></div><div class="ttdeci">constexpr auto format(const fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;value, std::basic_format_context&lt; OutputIterator, Char &gt; &amp;format_context) const -&gt; OutputIterator</div><div class="ttdef"><b>Definition</b> <a href="#l00454">typed_linear_algebra.hpp:454</a></div></div>
<div class="ttc" id="astructstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4_xhtml_ad60373a22952f78108372e0bdc6d6d29"><div class="ttname"><a href="structstd_1_1formatter_3_01fcarouge_1_1typed__matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_00_01_char_01_4.xhtml#ad60373a22952f78108372e0bdc6d6d29">std::formatter&lt; fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Char &gt;::format</a></div><div class="ttdeci">constexpr auto format(const fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;value, std::basic_format_context&lt; OutputIterator, Char &gt; &amp;format_context) const -&gt; OutputIterator</div><div class="ttdef"><b>Definition</b> <a href="#l00420">typed_linear_algebra.hpp:420</a></div></div>
<div class="ttc" id="autility_8hpp_xhtml"><div class="ttname"><a href="utility_8hpp.xhtml">utility.hpp</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_533ca38e4d6dcb24d3c950d504c67ecf.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="typed__linear__algebra_8hpp.xhtml">typed_linear_algebra.hpp</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
