<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Typed Linear Algebra: /github/workspace/include/fcarouge/typed_linear_algebra_internal/utility.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Typed Linear Algebra<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Typed Linear Algebra</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('utility_8hpp_source.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">utility.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="utility_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/* Typed Linear Algebra</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">Version 0.1.0</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">https://github.com/FrancoisCarouge/TypedLinearAlgebra</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment"></span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment"></span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment"></span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">means.</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment"></span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment"></span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="preprocessor">#ifndef FCAROUGE_TYPED_LINEAR_ALGEBRA_INTERNAL_UTILITY_HPP</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="preprocessor">#define FCAROUGE_TYPED_LINEAR_ALGEBRA_INTERNAL_UTILITY_HPP</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="preprocessor">#include &lt;concepts&gt;</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="foldopen" id="foldopen00039" data-start="{" data-end="}">
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml">   39</a></span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml">fcarouge::typed_linear_algebra_internal</a> {</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Lhs, <span class="keyword">typename</span> Rhs&gt; <span class="keyword">struct </span>divides {</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>  operator()(<span class="keyword">const</span> Lhs &amp;lhs, <span class="keyword">const</span> Rhs &amp;rhs) <span class="keyword">const</span> -&gt; <span class="keyword">decltype</span>(lhs / rhs);</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>};</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Lhs, <span class="keyword">typename</span> Rhs&gt;</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ad9aae459061728b7d7b2ae70196f2028">   58</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ad9aae459061728b7d7b2ae70196f2028">quotient</a> =</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>    std::invoke_result_t&lt;divides&lt;Lhs, Rhs&gt;, <span class="keyword">const</span> Lhs &amp;, <span class="keyword">const</span> Rhs &amp;&gt;;</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Lhs, <span class="keyword">typename</span> Rhs&gt; <span class="keyword">struct </span>multiplies {</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  operator()(<span class="keyword">const</span> Lhs &amp;lhs, <span class="keyword">const</span> Rhs &amp;rhs) <span class="keyword">const</span> -&gt; <span class="keyword">decltype</span>(lhs * rhs);</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>};</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Lhs, <span class="keyword">typename</span> Rhs&gt;</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aca585f39845dac1a268a75826589014c">   69</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aca585f39845dac1a268a75826589014c">product</a> =</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>    std::invoke_result_t&lt;multiplies&lt;Lhs, Rhs&gt;, <span class="keyword">const</span> Lhs &amp;, <span class="keyword">const</span> Rhs &amp;&gt;;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="keyword">struct </span>evaluates {</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator()() <span class="keyword">const</span> -&gt; Type;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>};</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a185964b5c8d035580b458b26a229a549">   79</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a185964b5c8d035580b458b26a229a549">evaluate</a> = std::invoke_result_t&lt;evaluates&lt;Type&gt;&gt;;</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span><span class="keyword">template</span> &lt;std::size_t Begin, std::size_t End, std::size_t Increment,</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>          <span class="keyword">typename</span> Function&gt;</div>
<div class="foldopen" id="foldopen00089" data-start="{" data-end="}">
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a9a86c642ba2610ed4f92a3d84baf5b00">   89</a></span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">void</span> <a class="code hl_function" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a9a86c642ba2610ed4f92a3d84baf5b00">for_constexpr</a>(Function &amp;&amp;function) {</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Begin &lt; End) {</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    function(std::integral_constant&lt;std::size_t, Begin&gt;());</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    <a class="code hl_function" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a9a86c642ba2610ed4f92a3d84baf5b00">for_constexpr&lt;Begin + Increment, End, Increment&gt;</a>(</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>        std::forward&lt;Function&gt;(function));</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  }</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>}</div>
</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="keyword">struct </span>repacker {</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  <span class="keyword">using </span>type = Type;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>};</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span> </div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span><span class="keyword">template</span> &lt;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt; <span class="keyword">typename</span> Pack, <span class="keyword">typename</span>... Types&gt;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span><span class="keyword">struct </span>repacker&lt;Pack&lt;Types...&gt;&gt; {</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <span class="keyword">using </span>type = std::tuple&lt;Types...&gt;;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span> </div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">constexpr</span> std::size_t <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">size</a>{<span class="keyword">sizeof</span>...(Types)};</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>};</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a8beb8d3741b310de71851a081557455e">  110</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Pack&gt; <span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a8beb8d3741b310de71851a081557455e">repack</a> = repacker&lt;Pack&gt;::type;</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Pack&gt;</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">  116</a></span><span class="keyword">inline</span> <span class="keyword">constexpr</span> std::size_t <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">size</a>{repacker&lt;Pack&gt;::size};</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span><span class="keyword">concept </span>arithmetic = std::integral&lt;Type&gt; || std::floating_point&lt;Type&gt;;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span><span class="keyword">concept </span>algebraic = <span class="keyword">requires</span>(Type value) { value(0, 0); };</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span> </div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypedMatrix&gt;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span><span class="keyword">concept </span>typed_matrix = <span class="keyword">requires</span>(TypedMatrix value) {</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  <span class="keyword">typename</span> TypedMatrix::row_indexes;</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  <span class="keyword">typename</span> TypedMatrix::column_indexes;</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>};</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix&gt;</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a1233ce8915a8ea54b53c7912a477afdc">  140</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a1233ce8915a8ea54b53c7912a477afdc">underlying_t</a> =</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>    std::remove_cvref_t&lt;decltype(std::declval&lt;Matrix&gt;()(0, 0))&gt;;</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix, std::<span class="keywordtype">size_t</span> RowIndex, std::<span class="keywordtype">size_t</span> ColumnIndex&gt;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">  145</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">element</a> =</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>    <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aca585f39845dac1a268a75826589014c">product&lt;std::tuple_element_t&lt;RowIndex, typename Matrix::row_indexes&gt;</a>,</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>            std::tuple_element_t&lt;ColumnIndex, typename Matrix::column_indexes&gt;&gt;;</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix&gt;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span><span class="keyword">concept </span>uniform = []() {</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  <span class="keywordtype">bool</span> result{<span class="keyword">true</span>};</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  <a class="code hl_function" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a9a86c642ba2610ed4f92a3d84baf5b00">for_constexpr&lt;0, Matrix::rows, 1&gt;</a>([&amp;result](<span class="keyword">auto</span> i) {</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>    <a class="code hl_function" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a9a86c642ba2610ed4f92a3d84baf5b00">for_constexpr&lt;0, Matrix::columns, 1&gt;</a>([&amp;result, &amp;i](<span class="keyword">auto</span> j) {</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>      result &amp;= std::is_same_v&lt;element&lt;Matrix, i, j&gt;, <a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">element&lt;Matrix, 0, 0&gt;</a>&gt;;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>    });</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  });</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>}();</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span><span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index, std::<span class="keywordtype">size_t</span> Begin, std::<span class="keywordtype">size_t</span> End&gt;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span><span class="keyword">concept </span>in_range = Begin &lt;= Index &amp;&amp; Index &lt;= End;</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix&gt;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span><span class="keyword">concept </span>column = Matrix::columns == 1;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix&gt;</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span><span class="keyword">concept </span>row = Matrix::rows == 1;</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix&gt;</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span><span class="keyword">concept </span>one_dimension = column&lt;Matrix&gt; || row&lt;Matrix&gt;;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Matrix&gt;</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="keyword">concept </span>singleton = column&lt;Matrix&gt; &amp;&amp; row&lt;Matrix&gt;;</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Pack1, <span class="keyword">typename</span> Pack2&gt;</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span><span class="keyword">concept </span>same_size = <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">size&lt;Pack1&gt;</a> == <a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">size&lt;Pack2&gt;</a>;</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="keyword">struct </span>transposes {</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator()(<span class="keyword">const</span> Type &amp;value)<span class="keyword"> const </span>{</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    <span class="keywordflow">return</span> value;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  }</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>};</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <span class="keyword">requires</span> <span class="keyword">requires</span>(Type value) { value.transpose(); }</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span><span class="keyword">struct </span>transposes&lt;Type&gt; {</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator()(<span class="keyword">const</span> Type &amp;value)<span class="keyword"> const </span>{</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>    <span class="keywordflow">return</span> value.transpose();</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  }</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>};</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a3f4f77aa7fb1fab03b068ab823abf023">  213</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a3f4f77aa7fb1fab03b068ab823abf023">transpose</a> = std::invoke_result_t&lt;transposes&lt;Type&gt;, <span class="keyword">const</span> Type &amp;&gt;;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Size&gt; <span class="keyword">struct </span>tupler {</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> = std::make_index_sequence&lt;Size&gt;&gt; <span class="keyword">struct </span>helper;</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  <span class="keyword">template</span> &lt;std::size_t... Indexes&gt;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  <span class="keyword">struct </span>helper&lt;std::index_sequence&lt;Indexes...&gt;&gt; {</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span>&gt; <span class="keyword">using </span>wrap = Type;</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>    <span class="keyword">using </span>type = std::tuple&lt;wrap&lt;Indexes&gt;...&gt;;</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  };</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  <span class="keyword">using </span>type = <span class="keyword">typename</span> helper&lt;&gt;::type;</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>};</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, std::<span class="keywordtype">size_t</span> Size&gt;</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a4dd57b09634fe03c0fd59b866657ad86">  230</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a4dd57b09634fe03c0fd59b866657ad86">tuple_n_type</a> = <span class="keyword">typename</span> tupler&lt;Type, Size&gt;::type;</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#af60dfb9fb7ed5802f1465f1c1e4a242b">  233</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#af60dfb9fb7ed5802f1465f1c1e4a242b">identity_index</a> = std::tuple&lt;std::type_identity&lt;void&gt;&gt;;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="keyword">struct </span>multiplies&lt;Type, std::type_identity&lt;void&gt;&gt; {</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span></div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  operator()(<span class="keyword">const</span> Type &amp;lhs, std::type_identity&lt;void&gt; rhs) <span class="keyword">const</span> -&gt; Type;</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>};</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span> </div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt; <span class="keyword">struct </span>multiplies&lt;std::type_identity&lt;void&gt;, Type&gt; {</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  [[nodiscard]] <span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> operator()(std::type_identity&lt;void&gt; lhs,</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>                                                 <span class="keyword">const</span> Type &amp;rhs) <span class="keyword">const</span> -&gt; Type;</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>};</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span> </div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>} <span class="comment">// namespace fcarouge::typed_linear_algebra_internal</span></div>
</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span><span class="preprocessor">#endif </span><span class="comment">// FCAROUGE_TYPED_LINEAR_ALGEBRA_INTERNAL_UTILITY_HPP</span></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml">fcarouge::typed_linear_algebra_internal</a></div><div class="ttdef"><b>Definition</b> <a href="#l00039">utility.hpp:39</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a1233ce8915a8ea54b53c7912a477afdc"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a1233ce8915a8ea54b53c7912a477afdc">fcarouge::typed_linear_algebra_internal::underlying_t</a></div><div class="ttdeci">std::remove_cvref_t&lt; decltype(std::declval&lt; Matrix &gt;()(0, 0))&gt; underlying_t</div><div class="ttdoc">The underlying storage type of the matrix's elements.</div><div class="ttdef"><b>Definition</b> <a href="#l00140">utility.hpp:140</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a185964b5c8d035580b458b26a229a549"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a185964b5c8d035580b458b26a229a549">fcarouge::typed_linear_algebra_internal::evaluate</a></div><div class="ttdeci">std::invoke_result_t&lt; evaluates&lt; Type &gt; &gt; evaluate</div><div class="ttdoc">Evaluater helper type.</div><div class="ttdef"><b>Definition</b> <a href="#l00079">utility.hpp:79</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a3f4f77aa7fb1fab03b068ab823abf023"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a3f4f77aa7fb1fab03b068ab823abf023">fcarouge::typed_linear_algebra_internal::transpose</a></div><div class="ttdeci">std::invoke_result_t&lt; transposes&lt; Type &gt;, const Type &amp; &gt; transpose</div><div class="ttdoc">Transposer helper type.</div><div class="ttdef"><b>Definition</b> <a href="#l00213">utility.hpp:213</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a4dd57b09634fe03c0fd59b866657ad86"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a4dd57b09634fe03c0fd59b866657ad86">fcarouge::typed_linear_algebra_internal::tuple_n_type</a></div><div class="ttdeci">typename tupler&lt; Type, Size &gt;::type tuple_n_type</div><div class="ttdoc">An alias for making a tuple of the same type.</div><div class="ttdef"><b>Definition</b> <a href="#l00230">utility.hpp:230</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a779b86b92edb4191f64f6a286495d228"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a779b86b92edb4191f64f6a286495d228">fcarouge::typed_linear_algebra_internal::element</a></div><div class="ttdeci">product&lt; std::tuple_element_t&lt; RowIndex, typename Matrix::row_indexes &gt;, std::tuple_element_t&lt; ColumnIndex, typename Matrix::column_indexes &gt; &gt; element</div><div class="ttdoc">The type of the element at the given matrix indexes position.</div><div class="ttdef"><b>Definition</b> <a href="#l00145">utility.hpp:145</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a8beb8d3741b310de71851a081557455e"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a8beb8d3741b310de71851a081557455e">fcarouge::typed_linear_algebra_internal::repack</a></div><div class="ttdeci">repacker&lt; Pack &gt;::type repack</div><div class="ttdef"><b>Definition</b> <a href="#l00110">utility.hpp:110</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_a9a86c642ba2610ed4f92a3d84baf5b00"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a9a86c642ba2610ed4f92a3d84baf5b00">fcarouge::typed_linear_algebra_internal::for_constexpr</a></div><div class="ttdeci">constexpr void for_constexpr(Function &amp;&amp;function)</div><div class="ttdoc">Compile-time for loop.</div><div class="ttdef"><b>Definition</b> <a href="#l00089">utility.hpp:89</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_aca585f39845dac1a268a75826589014c"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aca585f39845dac1a268a75826589014c">fcarouge::typed_linear_algebra_internal::product</a></div><div class="ttdeci">std::invoke_result_t&lt; multiplies&lt; Lhs, Rhs &gt;, const Lhs &amp;, const Rhs &amp; &gt; product</div><div class="ttdoc">Helper type to deduce the result type of the product.</div><div class="ttdef"><b>Definition</b> <a href="#l00069">utility.hpp:69</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_ad9aae459061728b7d7b2ae70196f2028"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ad9aae459061728b7d7b2ae70196f2028">fcarouge::typed_linear_algebra_internal::quotient</a></div><div class="ttdeci">std::invoke_result_t&lt; divides&lt; Lhs, Rhs &gt;, const Lhs &amp;, const Rhs &amp; &gt; quotient</div><div class="ttdoc">Divider helper type.</div><div class="ttdef"><b>Definition</b> <a href="#l00058">utility.hpp:58</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_aef655fff0379b424e1493f0e13f75682"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">fcarouge::typed_linear_algebra_internal::size</a></div><div class="ttdeci">constexpr std::size_t size</div><div class="ttdoc">Size of tuple-like types.</div><div class="ttdef"><b>Definition</b> <a href="#l00116">utility.hpp:116</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_af60dfb9fb7ed5802f1465f1c1e4a242b"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#af60dfb9fb7ed5802f1465f1c1e4a242b">fcarouge::typed_linear_algebra_internal::identity_index</a></div><div class="ttdeci">std::tuple&lt; std::type_identity&lt; void &gt; &gt; identity_index</div><div class="ttdoc">One-element transparent tuple index.</div><div class="ttdef"><b>Definition</b> <a href="#l00233">utility.hpp:233</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.xhtml">include</a></li><li class="navelem"><a class="el" href="dir_533ca38e4d6dcb24d3c950d504c67ecf.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="dir_88e71472b01c1a5dbc11332210b0be79.xhtml">typed_linear_algebra_internal</a></li><li class="navelem"><a class="el" href="utility_8hpp.xhtml">utility.hpp</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
