<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Typed Linear Algebra: fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Typed Linear Algebra<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Typed Linear Algebra</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('classfcarouge_1_1typed__matrix.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="classfcarouge_1_1typed__matrix-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Strongly typed matrix.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfcarouge_1_1typed__matrix__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Types</div></td></tr>
<tr class="memitem:a000f121ceff4e3ab93b1bc333fa15647" id="r_a000f121ceff4e3ab93b1bc333fa15647"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a000f121ceff4e3ab93b1bc333fa15647">matrix</a> = Matrix</td></tr>
<tr class="memdesc:a000f121ceff4e3ab93b1bc333fa15647"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the composed, stored matrix.  <br /></td></tr>
<tr class="separator:a000f121ceff4e3ab93b1bc333fa15647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67a638bf31384a9120a5def3c74b641a" id="r_a67a638bf31384a9120a5def3c74b641a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a67a638bf31384a9120a5def3c74b641a">row_indexes</a> = RowIndexes</td></tr>
<tr class="memdesc:a67a638bf31384a9120a5def3c74b641a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The tuple with the row components of the indexes.  <br /></td></tr>
<tr class="separator:a67a638bf31384a9120a5def3c74b641a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab04e1fa2704c503f7d6189238704c53a" id="r_ab04e1fa2704c503f7d6189238704c53a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab04e1fa2704c503f7d6189238704c53a">column_indexes</a> = ColumnIndexes</td></tr>
<tr class="memdesc:ab04e1fa2704c503f7d6189238704c53a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The tuple with the column components of the indexes.  <br /></td></tr>
<tr class="separator:ab04e1fa2704c503f7d6189238704c53a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9904db59b08b0dfa24fe08ef574039b3" id="r_a9904db59b08b0dfa24fe08ef574039b3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9904db59b08b0dfa24fe08ef574039b3">underlying</a> = <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a1233ce8915a8ea54b53c7912a477afdc">tla::underlying_t</a>&lt;Matrix&gt;</td></tr>
<tr class="memdesc:a9904db59b08b0dfa24fe08ef574039b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the element's underlying storage.  <br /></td></tr>
<tr class="separator:a9904db59b08b0dfa24fe08ef574039b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6be5fe000ae7ae363a9a01fec688d57" id="r_af6be5fe000ae7ae363a9a01fec688d57"><td class="memTemplParams" colspan="2">template&lt;std::size_t RowIndex, std::size_t ColumnIndex&gt; </td></tr>
<tr class="memitem:af6be5fe000ae7ae363a9a01fec688d57"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#af6be5fe000ae7ae363a9a01fec688d57">element</a> = <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>, RowIndex, ColumnIndex&gt;</td></tr>
<tr class="memdesc:af6be5fe000ae7ae363a9a01fec688d57"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the element at the given matrix indexes position.  <br /></td></tr>
<tr class="separator:af6be5fe000ae7ae363a9a01fec688d57"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-attribs" name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Variables</div></td></tr>
<tr class="memitem:a15d0673c2c5a8f97ec7d6d6120bc37a4" id="r_a15d0673c2c5a8f97ec7d6d6120bc37a4"><td class="memItemLeft" align="right" valign="top">static constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">rows</a> {<a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">tla::size</a>&lt;<a class="el" href="#a67a638bf31384a9120a5def3c74b641a">row_indexes</a>&gt;}</td></tr>
<tr class="memdesc:a15d0673c2c5a8f97ec7d6d6120bc37a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">The count of rows.  <br /></td></tr>
<tr class="separator:a15d0673c2c5a8f97ec7d6d6120bc37a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46ef06b82cd1ab3db9a22cd31436b802" id="r_a46ef06b82cd1ab3db9a22cd31436b802"><td class="memItemLeft" align="right" valign="top">static constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a46ef06b82cd1ab3db9a22cd31436b802">columns</a> {<a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">tla::size</a>&lt;<a class="el" href="#ab04e1fa2704c503f7d6189238704c53a">column_indexes</a>&gt;}</td></tr>
<tr class="memdesc:a46ef06b82cd1ab3db9a22cd31436b802"><td class="mdescLeft">&#160;</td><td class="mdescRight">The count of rows.  <br /></td></tr>
<tr class="separator:a46ef06b82cd1ab3db9a22cd31436b802"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Variables</div></td></tr>
<tr class="memitem:a4329fed7250ec71b8b0312accb3ddff6" id="r_a4329fed7250ec71b8b0312accb3ddff6"><td class="memItemLeft" align="right" valign="top">Matrix&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4329fed7250ec71b8b0312accb3ddff6">storage</a></td></tr>
<tr class="memdesc:a4329fed7250ec71b8b0312accb3ddff6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Underlying algebraic backend data storage.  <br /></td></tr>
<tr class="separator:a4329fed7250ec71b8b0312accb3ddff6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader">Public Member Functions</h2></td></tr>
<tr class="memitem:abb5f21aff9424d8482223bc9a5a0edae" id="r_abb5f21aff9424d8482223bc9a5a0edae"><td class="memItemLeft" align="right" valign="top">constexpr &amp;&amp;this auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abb5f21aff9424d8482223bc9a5a0edae">self</a></td></tr>
<tr class="separator:abb5f21aff9424d8482223bc9a5a0edae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11b18c32111d6f1651c01469c7a0322f" id="r_a11b18c32111d6f1651c01469c7a0322f"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a11b18c32111d6f1651c01469c7a0322f">~typed_matrix</a> ()=default</td></tr>
<tr class="memdesc:a11b18c32111d6f1651c01469c7a0322f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destruct a default typed matrix.  <br /></td></tr>
<tr class="separator:a11b18c32111d6f1651c01469c7a0322f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7003e001bcb6a08ca1346bafbc9b31f3" id="r_a7003e001bcb6a08ca1346bafbc9b31f3"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7003e001bcb6a08ca1346bafbc9b31f3">typed_matrix</a> ()=default</td></tr>
<tr class="memdesc:a7003e001bcb6a08ca1346bafbc9b31f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a default typed matrix.  <br /></td></tr>
<tr class="separator:a7003e001bcb6a08ca1346bafbc9b31f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61debbe8e973b969b79ed4efad933054" id="r_a61debbe8e973b969b79ed4efad933054"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a61debbe8e973b969b79ed4efad933054">typed_matrix</a> (const <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;other)=default</td></tr>
<tr class="memdesc:a61debbe8e973b969b79ed4efad933054"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy construct a typed matrix.  <br /></td></tr>
<tr class="separator:a61debbe8e973b969b79ed4efad933054"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ec9fac774b1a9517b6ecf001c9387b1" id="r_a7ec9fac774b1a9517b6ecf001c9387b1"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7ec9fac774b1a9517b6ecf001c9387b1">operator=</a> (const <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;other)=default</td></tr>
<tr class="memdesc:a7ec9fac774b1a9517b6ecf001c9387b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assign a typed matrix.  <br /></td></tr>
<tr class="separator:a7ec9fac774b1a9517b6ecf001c9387b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01a3060309b0adf3a17736a0c2e0331e" id="r_a01a3060309b0adf3a17736a0c2e0331e"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a01a3060309b0adf3a17736a0c2e0331e">typed_matrix</a> (<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&amp;other)=default</td></tr>
<tr class="memdesc:a01a3060309b0adf3a17736a0c2e0331e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move construct a typed matrix.  <br /></td></tr>
<tr class="separator:a01a3060309b0adf3a17736a0c2e0331e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79f8df9c51f9f86dd6070ac319ba815d" id="r_a79f8df9c51f9f86dd6070ac319ba815d"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a79f8df9c51f9f86dd6070ac319ba815d">operator=</a> (<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&amp;other)=default</td></tr>
<tr class="memdesc:a79f8df9c51f9f86dd6070ac319ba815d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move construct a typed matrix.  <br /></td></tr>
<tr class="separator:a79f8df9c51f9f86dd6070ac319ba815d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7394501da0d230e9d76fb73d396ada18" id="r_a7394501da0d230e9d76fb73d396ada18"><td class="memTemplParams" colspan="2">template&lt;typename Matrix2 , typename RowIndexes2 , typename ColumnIndexes2 &gt; </td></tr>
<tr class="memitem:a7394501da0d230e9d76fb73d396ada18"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7394501da0d230e9d76fb73d396ada18">typed_matrix</a> (const <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes2, ColumnIndexes2 &gt; &amp;other)</td></tr>
<tr class="memdesc:a7394501da0d230e9d76fb73d396ada18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy construct the typed matrix.  <br /></td></tr>
<tr class="separator:a7394501da0d230e9d76fb73d396ada18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cb6909ad42c9f4560dbf7c51e5ed1e4" id="r_a4cb6909ad42c9f4560dbf7c51e5ed1e4"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4cb6909ad42c9f4560dbf7c51e5ed1e4">typed_matrix</a> (const Matrix &amp;other)</td></tr>
<tr class="memdesc:a4cb6909ad42c9f4560dbf7c51e5ed1e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert construct a typed matrix from an underlying matrix.  <br /></td></tr>
<tr class="separator:a4cb6909ad42c9f4560dbf7c51e5ed1e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19e45b70824eb5557d1b7cf54ade88aa" id="r_a19e45b70824eb5557d1b7cf54ade88aa"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a19e45b70824eb5557d1b7cf54ade88aa">typed_matrix</a> (const <a class="el" href="#af6be5fe000ae7ae363a9a01fec688d57">element</a>&lt; 0, 0 &gt;(&amp;elements)[<a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">rows</a> *<a class="el" href="#a46ef06b82cd1ab3db9a22cd31436b802">columns</a>])</td></tr>
<tr class="memdesc:a19e45b70824eb5557d1b7cf54ade88aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert construct a one-dimension uniformly typed matrix from array.  <br /></td></tr>
<tr class="separator:a19e45b70824eb5557d1b7cf54ade88aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bc2d8bc8a17ce81d315bf2c8cacaa1f" id="r_a1bc2d8bc8a17ce81d315bf2c8cacaa1f"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1bc2d8bc8a17ce81d315bf2c8cacaa1f">typed_matrix</a> (const auto &amp;value)</td></tr>
<tr class="memdesc:a1bc2d8bc8a17ce81d315bf2c8cacaa1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert construct a singleton typed matrix from a single value.  <br /></td></tr>
<tr class="separator:a1bc2d8bc8a17ce81d315bf2c8cacaa1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94431592f510543998a98119fde8c98c" id="r_a94431592f510543998a98119fde8c98c"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; <br />
requires tla::uniform&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;</td></tr>
<tr class="memitem:a94431592f510543998a98119fde8c98c"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a94431592f510543998a98119fde8c98c">typed_matrix</a> (std::initializer_list&lt; std::initializer_list&lt; Type &gt; &gt; row_list)</td></tr>
<tr class="memdesc:a94431592f510543998a98119fde8c98c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert construct a uniformly typed matrix from list-initializers.  <br /></td></tr>
<tr class="separator:a94431592f510543998a98119fde8c98c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaee34e6a18720f4b6d6cde62d11d129" id="r_adaee34e6a18720f4b6d6cde62d11d129"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; <br />
requires tla::row&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; (not tla::column&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;) &amp;&amp; tla::same_size&lt;ColumnIndexes, std::tuple&lt;Types...&gt;&gt;</td></tr>
<tr class="memitem:adaee34e6a18720f4b6d6cde62d11d129"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#adaee34e6a18720f4b6d6cde62d11d129">typed_matrix</a> (const Types &amp;...values)</td></tr>
<tr class="memdesc:adaee34e6a18720f4b6d6cde62d11d129"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert construct a row typed vector from elements.  <br /></td></tr>
<tr class="separator:adaee34e6a18720f4b6d6cde62d11d129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b1729e2ee8bc280224e0e0402f7f6dc" id="r_a7b1729e2ee8bc280224e0e0402f7f6dc"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; <br />
requires tla::column&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; (not tla::row&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;) &amp;&amp; tla::same_size&lt;RowIndexes, std::tuple&lt;Types...&gt;&gt;</td></tr>
<tr class="memitem:a7b1729e2ee8bc280224e0e0402f7f6dc"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7b1729e2ee8bc280224e0e0402f7f6dc">typed_matrix</a> (const Types &amp;...values)</td></tr>
<tr class="memdesc:a7b1729e2ee8bc280224e0e0402f7f6dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert construct a column typed vector from elements.  <br /></td></tr>
<tr class="separator:a7b1729e2ee8bc280224e0e0402f7f6dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a356c81c7cc366d0905dcceab17d79b56" id="r_a356c81c7cc366d0905dcceab17d79b56"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a356c81c7cc366d0905dcceab17d79b56">explicit</a> (false) operator <a class="el" href="#af6be5fe000ae7ae363a9a01fec688d57">element</a>&lt; 0</td></tr>
<tr class="memdesc:a356c81c7cc366d0905dcceab17d79b56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the singleton typed matrix element.  <br /></td></tr>
<tr class="separator:a356c81c7cc366d0905dcceab17d79b56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa42ddde16d4609a15886745a2c6dd493" id="r_aa42ddde16d4609a15886745a2c6dd493"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa42ddde16d4609a15886745a2c6dd493">operator[]</a> (this auto &amp;&amp;<a class="el" href="#abb5f21aff9424d8482223bc9a5a0edae">self</a>, std::size_t index)</td></tr>
<tr class="memdesc:aa42ddde16d4609a15886745a2c6dd493"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the specified element.  <br /></td></tr>
<tr class="separator:aa42ddde16d4609a15886745a2c6dd493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b3091e2f8dff596bd524d4c44ed72f4" id="r_a8b3091e2f8dff596bd524d4c44ed72f4"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8b3091e2f8dff596bd524d4c44ed72f4">operator[]</a> (this auto &amp;&amp;<a class="el" href="#abb5f21aff9424d8482223bc9a5a0edae">self</a>, std::size_t row, std::size_t column)</td></tr>
<tr class="memdesc:a8b3091e2f8dff596bd524d4c44ed72f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the specified element.  <br /></td></tr>
<tr class="separator:a8b3091e2f8dff596bd524d4c44ed72f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c0fffa32b8d0266bf46cbb360bf5cb3" id="r_a9c0fffa32b8d0266bf46cbb360bf5cb3"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9c0fffa32b8d0266bf46cbb360bf5cb3">operator()</a> (this auto &amp;&amp;<a class="el" href="#abb5f21aff9424d8482223bc9a5a0edae">self</a>, std::size_t index)</td></tr>
<tr class="memdesc:a9c0fffa32b8d0266bf46cbb360bf5cb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the specified element.  <br /></td></tr>
<tr class="separator:a9c0fffa32b8d0266bf46cbb360bf5cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4ad2d7380329fe6b99cf1eecd9eec5" id="r_a1f4ad2d7380329fe6b99cf1eecd9eec5"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1f4ad2d7380329fe6b99cf1eecd9eec5">operator()</a> (this auto &amp;&amp;<a class="el" href="#abb5f21aff9424d8482223bc9a5a0edae">self</a>, std::size_t row, std::size_t column)</td></tr>
<tr class="memdesc:a1f4ad2d7380329fe6b99cf1eecd9eec5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the specified element.  <br /></td></tr>
<tr class="separator:a1f4ad2d7380329fe6b99cf1eecd9eec5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6981af59e2c2ae5c3e630d6081ab15ba" id="r_a6981af59e2c2ae5c3e630d6081ab15ba"><td class="memTemplParams" colspan="2">template&lt;std::size_t Row, std::size_t Column&gt; <br />
requires tla::in_range&lt; Row, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">::rows</a>&gt; &amp;&amp; tla::in_range&lt; Column, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a46ef06b82cd1ab3db9a22cd31436b802">::columns</a>&gt;</td></tr>
<tr class="memitem:a6981af59e2c2ae5c3e630d6081ab15ba"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a6981af59e2c2ae5c3e630d6081ab15ba">at</a> () -&gt; <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Row, Column &gt; &amp;</td></tr>
<tr class="memdesc:a6981af59e2c2ae5c3e630d6081ab15ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the specified element with compile-time bound checking.  <br /></td></tr>
<tr class="separator:a6981af59e2c2ae5c3e630d6081ab15ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac608daf7ba982917d52ff4bced2cfd18" id="r_ac608daf7ba982917d52ff4bced2cfd18"><td class="memTemplParams" colspan="2">template&lt;std::size_t Row, std::size_t Column&gt; <br />
requires tla::in_range&lt; Row, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">::rows</a>&gt; &amp;&amp; tla::in_range&lt; Column, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a46ef06b82cd1ab3db9a22cd31436b802">::columns</a>&gt;</td></tr>
<tr class="memitem:ac608daf7ba982917d52ff4bced2cfd18"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac608daf7ba982917d52ff4bced2cfd18">at</a> () const -&gt; <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Row, Column &gt;</td></tr>
<tr class="memdesc:ac608daf7ba982917d52ff4bced2cfd18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the specified element with compile-time bound checking.  <br /></td></tr>
<tr class="separator:ac608daf7ba982917d52ff4bced2cfd18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abece93c2c7b1b68a627499fc6925dd58" id="r_abece93c2c7b1b68a627499fc6925dd58"><td class="memTemplParams" colspan="2">template&lt;std::size_t Index&gt; <br />
requires tla::column&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;&gt; &amp;&amp; tla::in_range&lt; Index, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">::rows</a>&gt;</td></tr>
<tr class="memitem:abece93c2c7b1b68a627499fc6925dd58"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#abece93c2c7b1b68a627499fc6925dd58">at</a> () -&gt; <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Index, 0 &gt; &amp;</td></tr>
<tr class="memdesc:abece93c2c7b1b68a627499fc6925dd58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the specified element with compile-time bound checking.  <br /></td></tr>
<tr class="separator:abece93c2c7b1b68a627499fc6925dd58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad37a14d8dae4f7ff9b1d05670355c352" id="r_ad37a14d8dae4f7ff9b1d05670355c352"><td class="memTemplParams" colspan="2">template&lt;std::size_t Index&gt; <br />
requires tla::column&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;&gt; &amp;&amp; tla::in_range&lt; Index, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">::rows</a>&gt;</td></tr>
<tr class="memitem:ad37a14d8dae4f7ff9b1d05670355c352"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad37a14d8dae4f7ff9b1d05670355c352">at</a> () const -&gt; <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Index, 0 &gt;</td></tr>
<tr class="memdesc:ad37a14d8dae4f7ff9b1d05670355c352"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access the specified element with compile-time bound checking.  <br /></td></tr>
<tr class="separator:ad37a14d8dae4f7ff9b1d05670355c352"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7689ad2fa80eb2439d08296618b71a62" id="r_a7689ad2fa80eb2439d08296618b71a62"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7689ad2fa80eb2439d08296618b71a62">data</a> (this auto &amp;&amp;<a class="el" href="#abb5f21aff9424d8482223bc9a5a0edae">self</a>)</td></tr>
<tr class="memdesc:a7689ad2fa80eb2439d08296618b71a62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Direct access to the underlying storage.  <br /></td></tr>
<tr class="separator:a7689ad2fa80eb2439d08296618b71a62"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename Matrix, typename RowIndexes, typename ColumnIndexes&gt;<br />
class fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;</div><p>Strongly typed matrix. </p>
<p>Compose a linear algebra backend matrix into a typed matrix. Row and column indexes provide each element's index type.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Matrix</td><td>The underlying linear algebra matrix. </td></tr>
    <tr><td class="paramname">RowIndexes</td><td>The tuple type of the row indexes. </td></tr>
    <tr><td class="paramname">ColumnIndexes</td><td>The tuple type of the column indexes.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Type safety cannot be guaranteed at compilation time without index safety. The indexes can either be non-type template parameters or strong types overloadings. Converting a runtime index to a dependent template type is not possible in C++. A proxy reference could be used to allow traditional assignment syntax but the runtime check and extra indirection are not interesting tradeoffs. A template call operator can be used for getting a type safe value but impractical syntax for setting. Without index safety, the accepted tradeoff is a templated index <code>at&lt;i, j&gt;()</code> method.</dd>
<dd>
Deduction guides are tricky because a given element type comes from a row and column index to be deduced.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000003">Todo</a></b></dt><dd><p class="startdd">Don't limit the dimension to two? Use parameter pack of index tuples for tensor types. </p>
<p class="interdd">Add complexity documentation where appropriate for the API? </p>
<p class="enddd">Document the lack of bound checking on the classical API or remove altogether? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra__forward_8hpp_source.xhtml#l00043">43</a> of file <a class="el" href="typed__linear__algebra__forward_8hpp_source.xhtml">typed_linear_algebra_forward.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ab04e1fa2704c503f7d6189238704c53a" name="ab04e1fa2704c503f7d6189238704c53a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab04e1fa2704c503f7d6189238704c53a">&#9670;&#160;</a></span>column_indexes</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::column_indexes = ColumnIndexes</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The tuple with the column components of the indexes. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00131">131</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="af6be5fe000ae7ae363a9a01fec688d57" name="af6be5fe000ae7ae363a9a01fec688d57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6be5fe000ae7ae363a9a01fec688d57">&#9670;&#160;</a></span>element</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;std::size_t RowIndex, std::size_t ColumnIndex&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::element = <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>, RowIndex, ColumnIndex&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The type of the element at the given matrix indexes position. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00138">138</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="a000f121ceff4e3ab93b1bc333fa15647" name="a000f121ceff4e3ab93b1bc333fa15647"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a000f121ceff4e3ab93b1bc333fa15647">&#9670;&#160;</a></span>matrix</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::matrix = Matrix</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The type of the composed, stored matrix. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00125">125</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="a67a638bf31384a9120a5def3c74b641a" name="a67a638bf31384a9120a5def3c74b641a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67a638bf31384a9120a5def3c74b641a">&#9670;&#160;</a></span>row_indexes</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::row_indexes = RowIndexes</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The tuple with the row components of the indexes. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00128">128</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="a9904db59b08b0dfa24fe08ef574039b3" name="a9904db59b08b0dfa24fe08ef574039b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9904db59b08b0dfa24fe08ef574039b3">&#9670;&#160;</a></span>underlying</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::underlying = <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#a1233ce8915a8ea54b53c7912a477afdc">tla::underlying_t</a>&lt;Matrix&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The type of the element's underlying storage. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00134">134</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a11b18c32111d6f1651c01469c7a0322f" name="a11b18c32111d6f1651c01469c7a0322f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11b18c32111d6f1651c01469c7a0322f">&#9670;&#160;</a></span>~typed_matrix()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::~<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destruct a default typed matrix. </p>

</div>
</div>
<a id="a7003e001bcb6a08ca1346bafbc9b31f3" name="a7003e001bcb6a08ca1346bafbc9b31f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7003e001bcb6a08ca1346bafbc9b31f3">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[1/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Construct a default typed matrix. </p>
<dl class="section warning"><dt>Warning</dt><dd>The initialization of the underlying matrix's storage follows the initialization behavior of the underlying matrix's type, which for some type means no initialization. </dd></dl>

</div>
</div>
<a id="a61debbe8e973b969b79ed4efad933054" name="a61debbe8e973b969b79ed4efad933054"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61debbe8e973b969b79ed4efad933054">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[2/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy construct a typed matrix. </p>

</div>
</div>
<a id="a01a3060309b0adf3a17736a0c2e0331e" name="a01a3060309b0adf3a17736a0c2e0331e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01a3060309b0adf3a17736a0c2e0331e">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[3/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move construct a typed matrix. </p>

</div>
</div>
<a id="a7394501da0d230e9d76fb73d396ada18" name="a7394501da0d230e9d76fb73d396ada18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7394501da0d230e9d76fb73d396ada18">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[4/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;typename Matrix2 , typename RowIndexes2 , typename ColumnIndexes2 &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes2, ColumnIndexes2 &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy construct the typed matrix. </p>

</div>
</div>
<a id="a4cb6909ad42c9f4560dbf7c51e5ed1e4" name="a4cb6909ad42c9f4560dbf7c51e5ed1e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cb6909ad42c9f4560dbf7c51e5ed1e4">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[5/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const Matrix &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert construct a typed matrix from an underlying matrix. </p>
<dl class="section warning"><dt>Warning</dt><dd>Useful for operations implementation where underlying data constrution is needed. Not recommended for convenience construction due to absence of type validation. </dd></dl>

</div>
</div>
<a id="a19e45b70824eb5557d1b7cf54ade88aa" name="a19e45b70824eb5557d1b7cf54ade88aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19e45b70824eb5557d1b7cf54ade88aa">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[6/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#af6be5fe000ae7ae363a9a01fec688d57">element</a>&lt; 0, 0 &gt;(&amp;)</td>          <td class="paramname"><span class="paramname"><em>elements</em></span>[rows *columns]</td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert construct a one-dimension uniformly typed matrix from array. </p>
<p>Applicable to one-dimension matrix: column- or row-vector. Applicable to single-type matrix: uniform type of all elements.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">elements</td><td>C-style array of elements of identical types. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1bc2d8bc8a17ce81d315bf2c8cacaa1f" name="a1bc2d8bc8a17ce81d315bf2c8cacaa1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bc2d8bc8a17ce81d315bf2c8cacaa1f">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[7/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const auto &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert construct a singleton typed matrix from a single value. </p>
<p>Applicable to singleton matrix: one element.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Element of compatible type. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a94431592f510543998a98119fde8c98c" name="a94431592f510543998a98119fde8c98c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94431592f510543998a98119fde8c98c">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[8/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;typename Type &gt; <br />
requires tla::uniform&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; std::initializer_list&lt; Type &gt; &gt;</td>          <td class="paramname"><span class="paramname"><em>row_list</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert construct a uniformly typed matrix from list-initializers. </p>
<p>Applicable to matrix of uniform elements type.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">row_list</td><td>List-initializers of list-initializer of elements. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="adaee34e6a18720f4b6d6cde62d11d129" name="adaee34e6a18720f4b6d6cde62d11d129"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaee34e6a18720f4b6d6cde62d11d129">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[9/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;typename... Types&gt; <br />
requires tla::row&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; (not tla::column&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;) &amp;&amp; tla::same_size&lt;ColumnIndexes, std::tuple&lt;Types...&gt;&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const Types &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert construct a row typed vector from elements. </p>
<p>Applicable to one-dimension matrix: row-vector.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">values</td><td>Parameter pack of elements. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7b1729e2ee8bc280224e0e0402f7f6dc" name="a7b1729e2ee8bc280224e0e0402f7f6dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b1729e2ee8bc280224e0e0402f7f6dc">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[10/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;typename... Types&gt; <br />
requires tla::column&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; (not tla::row&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;) &amp;&amp; tla::same_size&lt;RowIndexes, std::tuple&lt;Types...&gt;&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const Types &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert construct a column typed vector from elements. </p>
<p>Applicable to one-dimension matrix: column-vector.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">values</td><td>Parameter pack of elements. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="abece93c2c7b1b68a627499fc6925dd58" name="abece93c2c7b1b68a627499fc6925dd58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abece93c2c7b1b68a627499fc6925dd58">&#9670;&#160;</a></span>at() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;std::size_t Index&gt; <br />
requires tla::column&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;&gt; &amp;&amp; tla::in_range&lt; Index, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">::rows</a>&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::at </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Index, 0 &gt; &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the specified element with compile-time bound checking. </p>
<p>Returns a strongly typed element at the specified location. Applicable to one-dimension matrix: column-vector.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Index</td><td>Position of the element to return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6981af59e2c2ae5c3e630d6081ab15ba" name="a6981af59e2c2ae5c3e630d6081ab15ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6981af59e2c2ae5c3e630d6081ab15ba">&#9670;&#160;</a></span>at() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;std::size_t Row, std::size_t Column&gt; <br />
requires tla::in_range&lt; Row, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">::rows</a>&gt; &amp;&amp; tla::in_range&lt; Column, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a46ef06b82cd1ab3db9a22cd31436b802">::columns</a>&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::at </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> -&gt;  <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Row, Column &gt; &amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the specified element with compile-time bound checking. </p>
<p>Returns a strongly typed reference to the element at the specified location.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Row</td><td>Row index of the element to return. </td></tr>
    <tr><td class="paramname">Column</td><td>Column index of the element to return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad37a14d8dae4f7ff9b1d05670355c352" name="ad37a14d8dae4f7ff9b1d05670355c352"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad37a14d8dae4f7ff9b1d05670355c352">&#9670;&#160;</a></span>at() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;std::size_t Index&gt; <br />
requires tla::column&lt;<a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;&gt; &amp;&amp; tla::in_range&lt; Index, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">::rows</a>&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::at </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const -&gt;  <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Index, 0 &gt;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the specified element with compile-time bound checking. </p>
<p>Returns a strongly typed element at the specified location. Applicable to one-dimension matrix: column-vector.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Index</td><td>Position of the element to return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac608daf7ba982917d52ff4bced2cfd18" name="ac608daf7ba982917d52ff4bced2cfd18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac608daf7ba982917d52ff4bced2cfd18">&#9670;&#160;</a></span>at() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;std::size_t Row, std::size_t Column&gt; <br />
requires tla::in_range&lt; Row, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">::rows</a>&gt; &amp;&amp; tla::in_range&lt; Column, 0, <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;Matrix, RowIndexes, ColumnIndexes&gt;<a class="el" href="#a46ef06b82cd1ab3db9a22cd31436b802">::columns</a>&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::at </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const -&gt;  <a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#ae127796f29a91fe39cd110accd6c82c5">tla::element</a>&lt; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;, Row, Column &gt;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the specified element with compile-time bound checking. </p>
<p>Returns a strongly typed element at the specified location.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Row</td><td>Row index of the element to return. </td></tr>
    <tr><td class="paramname">Column</td><td>Column index of the element to return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7689ad2fa80eb2439d08296618b71a62" name="a7689ad2fa80eb2439d08296618b71a62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7689ad2fa80eb2439d08296618b71a62">&#9670;&#160;</a></span>data()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Direct access to the underlying storage. </p>
<p>Reference to the underlying element storage. </p>

</div>
</div>
<a id="a356c81c7cc366d0905dcceab17d79b56" name="a356c81c7cc366d0905dcceab17d79b56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a356c81c7cc366d0905dcceab17d79b56">&#9670;&#160;</a></span>explicit()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::explicit </td>
          <td>(</td>
          <td class="paramtype">false</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the singleton typed matrix element. </p>
<p>Applicable to singleton matrix: one element. Returns a reference to the unique element of the typed matrix. </p>

</div>
</div>
<a id="a9c0fffa32b8d0266bf46cbb360bf5cb3" name="a9c0fffa32b8d0266bf46cbb360bf5cb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c0fffa32b8d0266bf46cbb360bf5cb3">&#9670;&#160;</a></span>operator()() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the specified element. </p>
<p>Applicable to one-dimension matrix: column- or row-vector. Applicable to single-type matrix: uniform type of all elements. Returns a reference to the element at the specified location.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">self</td><td>Explicit object parameter deducing this: not user specified. </td></tr>
    <tr><td class="paramname">index</td><td>Position of the element to return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1f4ad2d7380329fe6b99cf1eecd9eec5" name="a1f4ad2d7380329fe6b99cf1eecd9eec5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f4ad2d7380329fe6b99cf1eecd9eec5">&#9670;&#160;</a></span>operator()() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>row</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>column</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the specified element. </p>
<p>Applicable to single-type matrix: uniform type of all elements. Returns a reference to the element at the specified location.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">self</td><td>Explicit object parameter deducing this: not user specified. </td></tr>
    <tr><td class="paramname">row</td><td>Row index of the element to return. </td></tr>
    <tr><td class="paramname">column</td><td>Column index of the element to return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7ec9fac774b1a9517b6ecf001c9387b1" name="a7ec9fac774b1a9517b6ecf001c9387b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ec9fac774b1a9517b6ecf001c9387b1">&#9670;&#160;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy assign a typed matrix. </p>

</div>
</div>
<a id="a79f8df9c51f9f86dd6070ac319ba815d" name="a79f8df9c51f9f86dd6070ac319ba815d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79f8df9c51f9f86dd6070ac319ba815d">&#9670;&#160;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move construct a typed matrix. </p>

</div>
</div>
<a id="aa42ddde16d4609a15886745a2c6dd493" name="aa42ddde16d4609a15886745a2c6dd493"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa42ddde16d4609a15886745a2c6dd493">&#9670;&#160;</a></span>operator[]() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the specified element. </p>
<p>Applicable to one-dimension matrix: column- or row-vector. Applicable to single-type matrix: uniform type of all elements. Returns a reference to the element at the specified location.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">self</td><td>Explicit object parameter deducing this: not user specified. </td></tr>
    <tr><td class="paramname">index</td><td>Position of the element to return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a8b3091e2f8dff596bd524d4c44ed72f4" name="a8b3091e2f8dff596bd524d4c44ed72f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b3091e2f8dff596bd524d4c44ed72f4">&#9670;&#160;</a></span>operator[]() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>row</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>column</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the specified element. </p>
<p>Applicable to single-type matrix: uniform type of all elements. Returns a reference to the element at the specified location.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">self</td><td>Explicit object parameter deducing this: not user specified. </td></tr>
    <tr><td class="paramname">row</td><td>Row index of the element to return. </td></tr>
    <tr><td class="paramname">column</td><td>Column index of the element to return. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a46ef06b82cd1ab3db9a22cd31436b802" name="a46ef06b82cd1ab3db9a22cd31436b802"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46ef06b82cd1ab3db9a22cd31436b802">&#9670;&#160;</a></span>columns</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::columns {<a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">tla::size</a>&lt;<a class="el" href="#ab04e1fa2704c503f7d6189238704c53a">column_indexes</a>&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The count of rows. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00149">149</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  149</span>{<a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">tla::size&lt;column_indexes&gt;</a>};</div>
<div class="ttc" id="anamespacefcarouge_1_1typed__linear__algebra__internal_xhtml_aef655fff0379b424e1493f0e13f75682"><div class="ttname"><a href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">fcarouge::typed_linear_algebra_internal::size</a></div><div class="ttdeci">constexpr std::size_t size</div><div class="ttdoc">Size of tuple-like types.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00170">utility.hpp:170</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a15d0673c2c5a8f97ec7d6d6120bc37a4" name="a15d0673c2c5a8f97ec7d6d6120bc37a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">&#9670;&#160;</a></span>rows</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::rows {<a class="el" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">tla::size</a>&lt;<a class="el" href="#a67a638bf31384a9120a5def3c74b641a">row_indexes</a>&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The count of rows. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00146">146</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  146</span>{<a class="code hl_variable" href="namespacefcarouge_1_1typed__linear__algebra__internal.xhtml#aef655fff0379b424e1493f0e13f75682">tla::size&lt;row_indexes&gt;</a>};</div>
</div><!-- fragment -->
</div>
</div>
<a id="abb5f21aff9424d8482223bc9a5a0edae" name="abb5f21aff9424d8482223bc9a5a0edae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb5f21aff9424d8482223bc9a5a0edae">&#9670;&#160;</a></span>self</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">&amp;&amp; this auto&amp;&amp; <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::self</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00244">244</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="a4329fed7250ec71b8b0312accb3ddff6" name="a4329fed7250ec71b8b0312accb3ddff6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4329fed7250ec71b8b0312accb3ddff6">&#9670;&#160;</a></span>storage</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Matrix <a class="el" href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::storage</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Underlying algebraic backend data storage. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00369">369</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/github/workspace/include/fcarouge/<a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a></li>
<li>/github/workspace/include/fcarouge/<a class="el" href="typed__linear__algebra__forward_8hpp_source.xhtml">typed_linear_algebra_forward.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
