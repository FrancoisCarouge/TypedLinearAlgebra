<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Typed Linear Algebra: fcarouge Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Typed Linear Algebra<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Typed Linear Algebra</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('namespacefcarouge.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#concepts">Concepts</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">fcarouge Namespace Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Francois Carouge's projects namespace.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="namespaces" name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1eigen.xhtml">eigen</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1internal.xhtml">internal</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal implementation details. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefcarouge_1_1test.xhtml">test</a></td></tr>
<tr class="memdesc:namespacefcarouge_1_1test"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unit, integration, regression, and usage tests. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1divides.xhtml">divides</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear algebra divides expression type specialization point.  <a href="structfcarouge_1_1divides.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1element__traits.xhtml">element_traits</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Element traits for conversions.  <a href="structfcarouge_1_1element__traits.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1evaluates.xhtml">evaluates</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear algebra evaluates override expression lazy evaluation specialization point.  <a href="structfcarouge_1_1evaluates.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1evaluates_3_01_type_01_4.xhtml">evaluates&lt; Type &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of the evaluation type.  <a href="structfcarouge_1_1evaluates_3_01_type_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1evaluates_3_01_typed_matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_01_4.xhtml">evaluates&lt; TypedMatrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of the evaluation type.  <a href="structfcarouge_1_1evaluates_3_01_typed_matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1minus.xhtml">minus</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type minus, subtraction expression type specialization point.  <a href="structfcarouge_1_1minus.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1multiplies.xhtml">multiplies</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type multiplies expression type specialization point.  <a href="structfcarouge_1_1multiplies.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1transposes.xhtml">transposes</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear algebra transposes specialization point.  <a href="structfcarouge_1_1transposes.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1transposes_3_01_type_01_4.xhtml">transposes&lt; Type &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1transposes_3_01_typed_matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_01_4.xhtml">transposes&lt; TypedMatrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specialization of the transposes.  <a href="structfcarouge_1_1transposes_3_01_typed_matrix_3_01_matrix_00_01_row_indexes_00_01_column_indexes_01_4_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typed matrix.  <a href="structfcarouge_1_1typed__matrix.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="concepts" name="concepts"></a>
Concepts</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1uniform.xhtml">uniform</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Every element types of the matrix are the same. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1in__range.xhtml">in_range</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The index is within the range, inclusive. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1column.xhtml">column</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The given matrix is a single column. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1row.xhtml">row</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The matrix is a single row. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1one__dimension.xhtml">one_dimension</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The given matrix is a single dimension, that is a row or a column. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1singleton.xhtml">singleton</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The given row and column indexes form a singleton matrix. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1same__size.xhtml">same_size</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The packs have the same count of types. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1arithmetic.xhtml">arithmetic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Arithmetic concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1algebraic.xhtml">algebraic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Algebraic concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__input.xhtml">has_input</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter input support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__process__uncertainty.xhtml">has_process_uncertainty</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter process uncertainty support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__output__uncertainty.xhtml">has_output_uncertainty</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter output uncertainty support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__prediction__types.xhtml">has_prediction_types</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter prediction pack support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__input__control.xhtml">has_input_control</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter input control support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__state__transition.xhtml">has_state_transition</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter state transition support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__update__types.xhtml">has_update_types</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter update pack support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">concept &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="conceptfcarouge_1_1has__output__model.xhtml">has_output_model</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Filter output model support concept. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a129af0cbf4c8dd331670fd55fcbe092c" id="r_a129af0cbf4c8dd331670fd55fcbe092c"><td class="memTemplParams" colspan="2">template&lt;typename Matrix &gt; </td></tr>
<tr class="memitem:a129af0cbf4c8dd331670fd55fcbe092c"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a129af0cbf4c8dd331670fd55fcbe092c">underlying_t</a></td></tr>
<tr class="memdesc:a129af0cbf4c8dd331670fd55fcbe092c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The underlying storage type of the matrix's elements.  <br /></td></tr>
<tr class="separator:a129af0cbf4c8dd331670fd55fcbe092c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81de44c98d3d8212ab6ea199a49523e2" id="r_a81de44c98d3d8212ab6ea199a49523e2"><td class="memTemplParams" colspan="2">template&lt;typename Matrix , std::size_t RowIndex, std::size_t ColumnIndex&gt; </td></tr>
<tr class="memitem:a81de44c98d3d8212ab6ea199a49523e2"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a81de44c98d3d8212ab6ea199a49523e2">element</a></td></tr>
<tr class="memdesc:a81de44c98d3d8212ab6ea199a49523e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the element at the given matrix indexes position.  <br /></td></tr>
<tr class="separator:a81de44c98d3d8212ab6ea199a49523e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aedd2b285823a2feb3a21d4942829a8c2" id="r_aedd2b285823a2feb3a21d4942829a8c2"><td class="memTemplParams" colspan="2">template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:aedd2b285823a2feb3a21d4942829a8c2"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aedd2b285823a2feb3a21d4942829a8c2">operator==</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes, ColumnIndexes &gt; &amp;lhs, const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes, ColumnIndexes &gt; &amp;rhs)</td></tr>
<tr class="separator:aedd2b285823a2feb3a21d4942829a8c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00e7c3ec7b458e47794790e050cb59fe" id="r_a00e7c3ec7b458e47794790e050cb59fe"><td class="memTemplParams" colspan="2">template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes , typename ColumnIndexes , typename Indexes &gt; </td></tr>
<tr class="memitem:a00e7c3ec7b458e47794790e050cb59fe"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a00e7c3ec7b458e47794790e050cb59fe">operator*</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes, Indexes &gt; &amp;lhs, const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, Indexes, ColumnIndexes &gt; &amp;rhs)</td></tr>
<tr class="separator:a00e7c3ec7b458e47794790e050cb59fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0326427faef06bb4b1eb2fc1e809d14" id="r_ab0326427faef06bb4b1eb2fc1e809d14"><td class="memTemplParams" colspan="2">template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</td></tr>
<tr class="memitem:ab0326427faef06bb4b1eb2fc1e809d14"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ab0326427faef06bb4b1eb2fc1e809d14">operator*</a> (Scalar lhs, const Matrix &amp;rhs)</td></tr>
<tr class="separator:ab0326427faef06bb4b1eb2fc1e809d14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a537752ac8f1801cfe82cd1c3c909239d" id="r_a537752ac8f1801cfe82cd1c3c909239d"><td class="memTemplParams" colspan="2">template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:a537752ac8f1801cfe82cd1c3c909239d"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a537752ac8f1801cfe82cd1c3c909239d">operator*</a> (Scalar lhs, const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;rhs)</td></tr>
<tr class="separator:a537752ac8f1801cfe82cd1c3c909239d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acad34877ed56d4605a364af299b1c476" id="r_acad34877ed56d4605a364af299b1c476"><td class="memTemplParams" colspan="2">template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</td></tr>
<tr class="memitem:acad34877ed56d4605a364af299b1c476"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#acad34877ed56d4605a364af299b1c476">operator*</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;lhs, Scalar rhs)</td></tr>
<tr class="separator:acad34877ed56d4605a364af299b1c476"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a016305f330897bacd2e9ebf45ee9de9b" id="r_a016305f330897bacd2e9ebf45ee9de9b"><td class="memTemplParams" colspan="2">template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:a016305f330897bacd2e9ebf45ee9de9b"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a016305f330897bacd2e9ebf45ee9de9b">operator*</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;lhs, Scalar rhs)</td></tr>
<tr class="separator:a016305f330897bacd2e9ebf45ee9de9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0d698433b36932e574f63ebe64d7a69" id="r_af0d698433b36932e574f63ebe64d7a69"><td class="memTemplParams" colspan="2">template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:af0d698433b36932e574f63ebe64d7a69"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#af0d698433b36932e574f63ebe64d7a69">operator+</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes, ColumnIndexes &gt; &amp;lhs, const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes, ColumnIndexes &gt; &amp;rhs)</td></tr>
<tr class="separator:af0d698433b36932e574f63ebe64d7a69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add245b5c925cab3465e73e934ff29005" id="r_add245b5c925cab3465e73e934ff29005"><td class="memTemplParams" colspan="2">template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</td></tr>
<tr class="memitem:add245b5c925cab3465e73e934ff29005"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#add245b5c925cab3465e73e934ff29005">operator+</a> (const Matrix &amp;lhs, Scalar rhs)</td></tr>
<tr class="separator:add245b5c925cab3465e73e934ff29005"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3533f0e5d01c0ae5533ea62a07bcbdc4" id="r_a3533f0e5d01c0ae5533ea62a07bcbdc4"><td class="memTemplParams" colspan="2">template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:a3533f0e5d01c0ae5533ea62a07bcbdc4"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a3533f0e5d01c0ae5533ea62a07bcbdc4">operator-</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes, ColumnIndexes &gt; &amp;lhs, const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes, ColumnIndexes &gt; &amp;rhs)</td></tr>
<tr class="separator:a3533f0e5d01c0ae5533ea62a07bcbdc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7dfec28db20badd8349e71cde99091e" id="r_ab7dfec28db20badd8349e71cde99091e"><td class="memTemplParams" colspan="2">template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</td></tr>
<tr class="memitem:ab7dfec28db20badd8349e71cde99091e"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ab7dfec28db20badd8349e71cde99091e">operator-</a> (Scalar lhs, const Matrix &amp;rhs)</td></tr>
<tr class="separator:ab7dfec28db20badd8349e71cde99091e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab036216395f2fd7b69e4246285d10098" id="r_ab036216395f2fd7b69e4246285d10098"><td class="memTemplParams" colspan="2">template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes1 , typename RowIndexes2 , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:ab036216395f2fd7b69e4246285d10098"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ab036216395f2fd7b69e4246285d10098">operator/</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes1, ColumnIndexes &gt; &amp;lhs, const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes2, ColumnIndexes &gt; &amp;rhs)</td></tr>
<tr class="separator:ab036216395f2fd7b69e4246285d10098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f96a907020c9f05bc2d00576ed4deb7" id="r_a0f96a907020c9f05bc2d00576ed4deb7"><td class="memTemplParams" colspan="2">template&lt;<a class="el" href="conceptfcarouge_1_1arithmetic.xhtml">fcarouge::arithmetic</a> Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:a0f96a907020c9f05bc2d00576ed4deb7"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a0f96a907020c9f05bc2d00576ed4deb7">operator/</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;lhs, Scalar rhs)</td></tr>
<tr class="separator:a0f96a907020c9f05bc2d00576ed4deb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa5f405a741357732a2dfdd868a7cbe5" id="r_afa5f405a741357732a2dfdd868a7cbe5"><td class="memTemplParams" colspan="2">template&lt;<a class="el" href="conceptfcarouge_1_1arithmetic.xhtml">fcarouge::arithmetic</a> Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</td></tr>
<tr class="memitem:afa5f405a741357732a2dfdd868a7cbe5"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#afa5f405a741357732a2dfdd868a7cbe5">operator/</a> (const Matrix &amp;lhs, Scalar rhs)</td></tr>
<tr class="separator:afa5f405a741357732a2dfdd868a7cbe5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Functions</div></td></tr>
<tr class="memitem:a5ad0022b969a210b7261d0158bc1dd7b" id="r_a5ad0022b969a210b7261d0158bc1dd7b"><td class="memTemplParams" colspan="2">template&lt;std::size_t Begin, std::size_t End, std::size_t Increment, typename Function &gt; </td></tr>
<tr class="memitem:a5ad0022b969a210b7261d0158bc1dd7b"><td class="memTemplItemLeft" align="right" valign="top">constexpr void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5ad0022b969a210b7261d0158bc1dd7b">for_constexpr</a> (Function &amp;&amp;function)</td></tr>
<tr class="memdesc:a5ad0022b969a210b7261d0158bc1dd7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compile-time for loop.  <br /></td></tr>
<tr class="separator:a5ad0022b969a210b7261d0158bc1dd7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
Variables</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Algebraic Named Values</div></td></tr>
<tr class="memitem:abfe9113c0e9ff8ee3dc1d5c211c1b656" id="r_abfe9113c0e9ff8ee3dc1d5c211c1b656"><td class="memTemplParams" colspan="2">template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:abfe9113c0e9ff8ee3dc1d5c211c1b656"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; decltype(<a class="el" href="#a8887e952722c60720253e416166a9233">one</a>&lt; Matrix &gt;), RowIndexes, ColumnIndexes &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#abfe9113c0e9ff8ee3dc1d5c211c1b656">one&lt; typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;</a> {<a class="el" href="#a8887e952722c60720253e416166a9233">one</a>&lt;Matrix&gt;}</td></tr>
<tr class="memdesc:abfe9113c0e9ff8ee3dc1d5c211c1b656"><td class="mdescLeft">&#160;</td><td class="mdescRight">The one matrix specialization.  <br /></td></tr>
<tr class="separator:abfe9113c0e9ff8ee3dc1d5c211c1b656"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a761c35802a6c58afca98c4aef4cf46e2" id="r_a761c35802a6c58afca98c4aef4cf46e2"><td class="memTemplParams" colspan="2">template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:a761c35802a6c58afca98c4aef4cf46e2"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; decltype(<a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">zero</a>&lt; Matrix &gt;), RowIndexes, ColumnIndexes &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a761c35802a6c58afca98c4aef4cf46e2">zero&lt; typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;</a> {<a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">zero</a>&lt;Matrix&gt;}</td></tr>
<tr class="memdesc:a761c35802a6c58afca98c4aef4cf46e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">The zero matrix specialization.  <br /></td></tr>
<tr class="separator:a761c35802a6c58afca98c4aef4cf46e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Named Values</div></td></tr>
<tr class="memitem:ac4cffefdda8c01a267ce2700c6acb903" id="r_ac4cffefdda8c01a267ce2700c6acb903"><td class="memTemplParams" colspan="2">template&lt;typename Pack &gt; </td></tr>
<tr class="memitem:ac4cffefdda8c01a267ce2700c6acb903"><td class="memTemplItemLeft" align="right" valign="top">constexpr std::size_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac4cffefdda8c01a267ce2700c6acb903">size</a> {internal::size&lt;Pack&gt;}</td></tr>
<tr class="memdesc:ac4cffefdda8c01a267ce2700c6acb903"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of tuple-like types.  <br /></td></tr>
<tr class="separator:ac4cffefdda8c01a267ce2700c6acb903"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e0d4e00e05e1ca7701aa8dfc9681d77" id="r_a1e0d4e00e05e1ca7701aa8dfc9681d77"><td class="memTemplParams" colspan="2">template&lt;auto... Values&gt; </td></tr>
<tr class="memitem:a1e0d4e00e05e1ca7701aa8dfc9681d77"><td class="memTemplItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a1e0d4e00e05e1ca7701aa8dfc9681d77">first_v</a> {internal::first_v&lt;Values...&gt;}</td></tr>
<tr class="memdesc:a1e0d4e00e05e1ca7701aa8dfc9681d77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unpack the first value of the non-type template parameter pack.  <br /></td></tr>
<tr class="separator:a1e0d4e00e05e1ca7701aa8dfc9681d77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8887e952722c60720253e416166a9233" id="r_a8887e952722c60720253e416166a9233"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double&gt; </td></tr>
<tr class="memitem:a8887e952722c60720253e416166a9233"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a8887e952722c60720253e416166a9233">one</a></td></tr>
<tr class="memdesc:a8887e952722c60720253e416166a9233"><td class="mdescLeft">&#160;</td><td class="mdescRight">The one matrix.  <br /></td></tr>
<tr class="separator:a8887e952722c60720253e416166a9233"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a773f87f2fdf94a96f0c048f85a1e5106" id="r_a773f87f2fdf94a96f0c048f85a1e5106"><td class="memTemplParams" colspan="2">template&lt;arithmetic Arithmetic&gt; </td></tr>
<tr class="memitem:a773f87f2fdf94a96f0c048f85a1e5106"><td class="memTemplItemLeft" align="right" valign="top">constexpr Arithmetic&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a773f87f2fdf94a96f0c048f85a1e5106">one&lt; Arithmetic &gt;</a> {1}</td></tr>
<tr class="memdesc:a773f87f2fdf94a96f0c048f85a1e5106"><td class="mdescLeft">&#160;</td><td class="mdescRight">The singleton one matrix specialization.  <br /></td></tr>
<tr class="separator:a773f87f2fdf94a96f0c048f85a1e5106"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1e24dabeb646745f490f0aa51f690b5" id="r_af1e24dabeb646745f490f0aa51f690b5"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; <br />
requires requires { Type::identity(); }</td></tr>
<tr class="memitem:af1e24dabeb646745f490f0aa51f690b5"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#af1e24dabeb646745f490f0aa51f690b5">one&lt; Type &gt;</a> {Type::Identity()}</td></tr>
<tr class="separator:af1e24dabeb646745f490f0aa51f690b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef6fb6c8a265d85709b951506123a5f1" id="r_aef6fb6c8a265d85709b951506123a5f1"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double&gt; </td></tr>
<tr class="memitem:aef6fb6c8a265d85709b951506123a5f1"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">zero</a></td></tr>
<tr class="memdesc:aef6fb6c8a265d85709b951506123a5f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">The zero matrix.  <br /></td></tr>
<tr class="separator:aef6fb6c8a265d85709b951506123a5f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5567c841761bdb7aac049796d4c43580" id="r_a5567c841761bdb7aac049796d4c43580"><td class="memTemplParams" colspan="2">template&lt;arithmetic Arithmetic&gt; </td></tr>
<tr class="memitem:a5567c841761bdb7aac049796d4c43580"><td class="memTemplItemLeft" align="right" valign="top">constexpr Arithmetic&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5567c841761bdb7aac049796d4c43580">zero&lt; Arithmetic &gt;</a> {0}</td></tr>
<tr class="memdesc:a5567c841761bdb7aac049796d4c43580"><td class="mdescLeft">&#160;</td><td class="mdescRight">The singleton zero matrix specialization.  <br /></td></tr>
<tr class="separator:a5567c841761bdb7aac049796d4c43580"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0283af94a195958399959586dcc8a50" id="r_ac0283af94a195958399959586dcc8a50"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; <br />
requires requires { Type::zero(); }</td></tr>
<tr class="memitem:ac0283af94a195958399959586dcc8a50"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac0283af94a195958399959586dcc8a50">zero&lt; Type &gt;</a> {Type::Zero()}</td></tr>
<tr class="separator:ac0283af94a195958399959586dcc8a50"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader">Types</h2></td></tr>
<tr class="memitem:a83509db0f0eee1994d5e9a9f221a67a8" id="r_a83509db0f0eee1994d5e9a9f221a67a8"><td class="memTemplParams" colspan="2">template&lt;typename Matrix , typename... ColumnIndexes&gt; </td></tr>
<tr class="memitem:a83509db0f0eee1994d5e9a9f221a67a8"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a83509db0f0eee1994d5e9a9f221a67a8">typed_row_vector</a></td></tr>
<tr class="memdesc:a83509db0f0eee1994d5e9a9f221a67a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Row vector.  <br /></td></tr>
<tr class="separator:a83509db0f0eee1994d5e9a9f221a67a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68cfd1293d8131d82ca584d6dcfdd02b" id="r_a68cfd1293d8131d82ca584d6dcfdd02b"><td class="memTemplParams" colspan="2">template&lt;typename Matrix , typename... RowIndexes&gt; </td></tr>
<tr class="memitem:a68cfd1293d8131d82ca584d6dcfdd02b"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a68cfd1293d8131d82ca584d6dcfdd02b">typed_column_vector</a></td></tr>
<tr class="memdesc:a68cfd1293d8131d82ca584d6dcfdd02b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Column vector.  <br /></td></tr>
<tr class="separator:a68cfd1293d8131d82ca584d6dcfdd02b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0e360c3c4b209b1ab2141f8376c3bae" id="r_aa0e360c3c4b209b1ab2141f8376c3bae"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:aa0e360c3c4b209b1ab2141f8376c3bae"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa0e360c3c4b209b1ab2141f8376c3bae">quotient</a></td></tr>
<tr class="memdesc:aa0e360c3c4b209b1ab2141f8376c3bae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divider helper type.  <br /></td></tr>
<tr class="separator:aa0e360c3c4b209b1ab2141f8376c3bae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a972eb30c6ed1a0e253d8539e87e15908" id="r_a972eb30c6ed1a0e253d8539e87e15908"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a972eb30c6ed1a0e253d8539e87e15908"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a972eb30c6ed1a0e253d8539e87e15908">evaluate</a> = std::invoke_result_t&lt;<a class="el" href="structfcarouge_1_1evaluates.xhtml">evaluates</a>&lt;Type&gt;&gt;</td></tr>
<tr class="memdesc:a972eb30c6ed1a0e253d8539e87e15908"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluater helper type.  <br /></td></tr>
<tr class="separator:a972eb30c6ed1a0e253d8539e87e15908"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06ed7a99de8c150ba47d98be11bf795d" id="r_a06ed7a99de8c150ba47d98be11bf795d"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a06ed7a99de8c150ba47d98be11bf795d"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a06ed7a99de8c150ba47d98be11bf795d">transpose</a> = std::invoke_result_t&lt;<a class="el" href="structfcarouge_1_1transposes.xhtml">transposes</a>&lt;Type&gt;, const Type &amp;&gt;</td></tr>
<tr class="memdesc:a06ed7a99de8c150ba47d98be11bf795d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transposer helper type.  <br /></td></tr>
<tr class="separator:a06ed7a99de8c150ba47d98be11bf795d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a463eb0fdde0b3d3ea64b5a16fa95b253" id="r_a463eb0fdde0b3d3ea64b5a16fa95b253"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a463eb0fdde0b3d3ea64b5a16fa95b253">empty_tuple</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#aba5eb00c20ad829026fe88a48785307d">internal::empty_tuple</a></td></tr>
<tr class="memdesc:a463eb0fdde0b3d3ea64b5a16fa95b253"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of the empty tuple.  <br /></td></tr>
<tr class="separator:a463eb0fdde0b3d3ea64b5a16fa95b253"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88ffaddfc70067199a9f22246b9d7220" id="r_a88ffaddfc70067199a9f22246b9d7220"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; </td></tr>
<tr class="memitem:a88ffaddfc70067199a9f22246b9d7220"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a88ffaddfc70067199a9f22246b9d7220">first</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a9b7b21596c593512e73cd0298ff05c47">internal::first</a>&lt;Types...&gt;</td></tr>
<tr class="memdesc:a88ffaddfc70067199a9f22246b9d7220"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unpack the first type of the type template parameter pack.  <br /></td></tr>
<tr class="separator:a88ffaddfc70067199a9f22246b9d7220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c5e16e2c726f4a91a88f3563be340b7" id="r_a0c5e16e2c726f4a91a88f3563be340b7"><td class="memTemplParams" colspan="2">template&lt;typename Type , std::size_t Size&gt; </td></tr>
<tr class="memitem:a0c5e16e2c726f4a91a88f3563be340b7"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a0c5e16e2c726f4a91a88f3563be340b7">tuple_n_type</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a2d608d28c8cff822a3dfaf1daeb0b15e">internal::tuple_n_type</a>&lt;Type, Size&gt;</td></tr>
<tr class="memdesc:a0c5e16e2c726f4a91a88f3563be340b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">An alias for making a tuple of the same type.  <br /></td></tr>
<tr class="separator:a0c5e16e2c726f4a91a88f3563be340b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26e349ac2062d99cb0962705f1f93657" id="r_a26e349ac2062d99cb0962705f1f93657"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:a26e349ac2062d99cb0962705f1f93657"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a26e349ac2062d99cb0962705f1f93657">product</a></td></tr>
<tr class="memdesc:a26e349ac2062d99cb0962705f1f93657"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper type to deduce the result type of the product.  <br /></td></tr>
<tr class="separator:a26e349ac2062d99cb0962705f1f93657"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dbf59cfc0dc0e18d5cee189c7f35d41" id="r_a8dbf59cfc0dc0e18d5cee189c7f35d41"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:a8dbf59cfc0dc0e18d5cee189c7f35d41"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a8dbf59cfc0dc0e18d5cee189c7f35d41">difference</a></td></tr>
<tr class="memdesc:a8dbf59cfc0dc0e18d5cee189c7f35d41"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper type to deduce the result type of the minus, subtraction.  <br /></td></tr>
<tr class="separator:a8dbf59cfc0dc0e18d5cee189c7f35d41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec3bfab0842e1f83b5f1493062848140" id="r_aec3bfab0842e1f83b5f1493062848140"><td class="memTemplParams" colspan="2">template&lt;typename Lhs , typename Rhs &gt; </td></tr>
<tr class="memitem:aec3bfab0842e1f83b5f1493062848140"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aec3bfab0842e1f83b5f1493062848140">ᴀʙᵀ</a> = <a class="el" href="#a972eb30c6ed1a0e253d8539e87e15908">evaluate</a>&lt;<a class="el" href="#a26e349ac2062d99cb0962705f1f93657">product</a>&lt;Lhs, <a class="el" href="#a972eb30c6ed1a0e253d8539e87e15908">evaluate</a>&lt;<a class="el" href="#a06ed7a99de8c150ba47d98be11bf795d">transpose</a>&lt;Rhs&gt;&gt;&gt;&gt;</td></tr>
<tr class="memdesc:aec3bfab0842e1f83b5f1493062848140"><td class="mdescLeft">&#160;</td><td class="mdescRight">The evaluated type of the ABᵀ expression.  <br /></td></tr>
<tr class="separator:aec3bfab0842e1f83b5f1493062848140"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf4951664b4f070b3123b9258fe8ff5e" id="r_adf4951664b4f070b3123b9258fe8ff5e"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </td></tr>
<tr class="memitem:adf4951664b4f070b3123b9258fe8ff5e"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#adf4951664b4f070b3123b9258fe8ff5e">matrix</a></td></tr>
<tr class="memdesc:adf4951664b4f070b3123b9258fe8ff5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar type matrix with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations.  <br /></td></tr>
<tr class="separator:adf4951664b4f070b3123b9258fe8ff5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad06bb441aa2dcec149c52de0c297a967" id="r_ad06bb441aa2dcec149c52de0c297a967"><td class="memTemplParams" colspan="2">template&lt;typename Type  = double, std::size_t Row = 1&gt; </td></tr>
<tr class="memitem:ad06bb441aa2dcec149c52de0c297a967"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad06bb441aa2dcec149c52de0c297a967">column_vector</a> = <a class="el" href="namespacefcarouge_1_1eigen.xhtml#a01e78c3f356b744543b2f25797bcfa84">matrix</a>&lt;Type, Row, 1&gt;</td></tr>
<tr class="memdesc:ad06bb441aa2dcec149c52de0c297a967"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar type column vector with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations.  <br /></td></tr>
<tr class="separator:ad06bb441aa2dcec149c52de0c297a967"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d1b555b919a51d9ef29849f6e86b48a" id="r_a5d1b555b919a51d9ef29849f6e86b48a"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a5d1b555b919a51d9ef29849f6e86b48a"><td class="memTemplItemLeft" align="right" valign="top">auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5d1b555b919a51d9ef29849f6e86b48a">t</a> (const Type &amp;value)</td></tr>
<tr class="memdesc:a5d1b555b919a51d9ef29849f6e86b48a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transpose helper function.  <br /></td></tr>
<tr class="separator:a5d1b555b919a51d9ef29849f6e86b48a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Francois Carouge's projects namespace. </p>
<p>The definitions and implementations of the library intended for public usage. Lowers the name conflict probability in large projects. Use using-declarations or namespace-alias-definition per your project guidelines. </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="aec3bfab0842e1f83b5f1493062848140" name="aec3bfab0842e1f83b5f1493062848140"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec3bfab0842e1f83b5f1493062848140">&#9670;&#160;</a></span>ᴀʙᵀ</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#aec3bfab0842e1f83b5f1493062848140">fcarouge::ᴀʙᵀ</a> = <a class="el" href="#a972eb30c6ed1a0e253d8539e87e15908">evaluate</a>&lt;<a class="el" href="#a26e349ac2062d99cb0962705f1f93657">product</a>&lt;Lhs, <a class="el" href="#a972eb30c6ed1a0e253d8539e87e15908">evaluate</a>&lt;<a class="el" href="#a06ed7a99de8c150ba47d98be11bf795d">transpose</a>&lt;Rhs&gt;&gt;&gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The evaluated type of the ABᵀ expression. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00216">216</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="ad06bb441aa2dcec149c52de0c297a967" name="ad06bb441aa2dcec149c52de0c297a967"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad06bb441aa2dcec149c52de0c297a967">&#9670;&#160;</a></span>column_vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacefcarouge_1_1eigen.xhtml#a3aae575a4aa6b608a99d02f58b0fc86c">fcarouge::column_vector</a> = <a class="el" href="namespacefcarouge_1_1eigen.xhtml#a01e78c3f356b744543b2f25797bcfa84">matrix</a>&lt;Type, Row, 1&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Scalar type column vector with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations. </p>

<p class="definition">Definition at line <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml#l00057">57</a> of file <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>

</div>
</div>
<a id="a8dbf59cfc0dc0e18d5cee189c7f35d41" name="a8dbf59cfc0dc0e18d5cee189c7f35d41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dbf59cfc0dc0e18d5cee189c7f35d41">&#9670;&#160;</a></span>difference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a8dbf59cfc0dc0e18d5cee189c7f35d41">fcarouge::difference</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    std::invoke_result_t&lt;minus&lt;Lhs, Rhs&gt;, <span class="keyword">const</span> Lhs &amp;, <span class="keyword">const</span> Rhs &amp;&gt;</div>
</div><!-- fragment -->
<p>Helper type to deduce the result type of the minus, subtraction. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00211">211</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a81de44c98d3d8212ab6ea199a49523e2" name="a81de44c98d3d8212ab6ea199a49523e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81de44c98d3d8212ab6ea199a49523e2">&#9670;&#160;</a></span>element</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , std::size_t RowIndex, std::size_t ColumnIndex&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a81de44c98d3d8212ab6ea199a49523e2">fcarouge::element</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    product&lt;std::tuple_element_t&lt;RowIndex, typename Matrix::row_indexes&gt;,</div>
<div class="line">            std::tuple_element_t&lt;ColumnIndex, typename Matrix::column_indexes&gt;&gt;</div>
</div><!-- fragment -->
<p>The type of the element at the given matrix indexes position. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00057">57</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="a463eb0fdde0b3d3ea64b5a16fa95b253" name="a463eb0fdde0b3d3ea64b5a16fa95b253"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a463eb0fdde0b3d3ea64b5a16fa95b253">&#9670;&#160;</a></span>empty_tuple</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a463eb0fdde0b3d3ea64b5a16fa95b253">fcarouge::empty_tuple</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#aba5eb00c20ad829026fe88a48785307d">internal::empty_tuple</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type of the empty tuple. </p>
<p>A tuple with no <code>pack</code> types. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00181">181</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a972eb30c6ed1a0e253d8539e87e15908" name="a972eb30c6ed1a0e253d8539e87e15908"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a972eb30c6ed1a0e253d8539e87e15908">&#9670;&#160;</a></span>evaluate</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a972eb30c6ed1a0e253d8539e87e15908">fcarouge::evaluate</a> = std::invoke_result_t&lt;<a class="el" href="structfcarouge_1_1evaluates.xhtml">evaluates</a>&lt;Type&gt;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluater helper type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00150">150</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a88ffaddfc70067199a9f22246b9d7220" name="a88ffaddfc70067199a9f22246b9d7220"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88ffaddfc70067199a9f22246b9d7220">&#9670;&#160;</a></span>first</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a88ffaddfc70067199a9f22246b9d7220">fcarouge::first</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a9b7b21596c593512e73cd0298ff05c47">internal::first</a>&lt;Types...&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unpack the first type of the type template parameter pack. </p>
<p>Shorthand for <code>std::tuple_element_t&lt;0, std::tuple&lt;Types...&gt;&gt;</code>. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00186">186</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="adf4951664b4f070b3123b9258fe8ff5e" name="adf4951664b4f070b3123b9258fe8ff5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf4951664b4f070b3123b9258fe8ff5e">&#9670;&#160;</a></span>matrix</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double, std::size_t Row = 1, std::size_t Column = 1&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacefcarouge_1_1eigen.xhtml#a01e78c3f356b744543b2f25797bcfa84">fcarouge::matrix</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    typed_matrix&lt;eigen::matrix&lt;Type, Row, Column&gt;, tuple_n_type&lt;Type, Row&gt;,</div>
<div class="line">                 tuple_n_type&lt;Type, Column&gt;&gt;</div>
</div><!-- fragment -->
<p>Scalar type matrix with <a class="el" href="namespace_eigen.xhtml">Eigen</a> implementations. </p>

<p class="definition">Definition at line <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml#l00051">51</a> of file <a class="el" href="eigexed_2fcarouge_2linalg_8hpp_source.xhtml">linalg.hpp</a>.</p>

</div>
</div>
<a id="a26e349ac2062d99cb0962705f1f93657" name="a26e349ac2062d99cb0962705f1f93657"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26e349ac2062d99cb0962705f1f93657">&#9670;&#160;</a></span>product</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a26e349ac2062d99cb0962705f1f93657">fcarouge::product</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    std::invoke_result_t&lt;multiplies&lt;Lhs, Rhs&gt;, <span class="keyword">const</span> Lhs &amp;, <span class="keyword">const</span> Rhs &amp;&gt;</div>
</div><!-- fragment -->
<p>Helper type to deduce the result type of the product. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00200">200</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="aa0e360c3c4b209b1ab2141f8376c3bae" name="aa0e360c3c4b209b1ab2141f8376c3bae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0e360c3c4b209b1ab2141f8376c3bae">&#9670;&#160;</a></span>quotient</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Lhs , typename Rhs &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#aa0e360c3c4b209b1ab2141f8376c3bae">fcarouge::quotient</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    std::invoke_result_t&lt;divides&lt;Lhs, Rhs&gt;, <span class="keyword">const</span> Lhs &amp;, <span class="keyword">const</span> Rhs &amp;&gt;</div>
</div><!-- fragment -->
<p>Divider helper type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00140">140</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a06ed7a99de8c150ba47d98be11bf795d" name="a06ed7a99de8c150ba47d98be11bf795d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06ed7a99de8c150ba47d98be11bf795d">&#9670;&#160;</a></span>transpose</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a06ed7a99de8c150ba47d98be11bf795d">fcarouge::transpose</a> = std::invoke_result_t&lt;<a class="el" href="structfcarouge_1_1transposes.xhtml">transposes</a>&lt;Type&gt;, const Type &amp;&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transposer helper type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00169">169</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a0c5e16e2c726f4a91a88f3563be340b7" name="a0c5e16e2c726f4a91a88f3563be340b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c5e16e2c726f4a91a88f3563be340b7">&#9670;&#160;</a></span>tuple_n_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type , std::size_t Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a0c5e16e2c726f4a91a88f3563be340b7">fcarouge::tuple_n_type</a> = <a class="el" href="namespacefcarouge_1_1internal.xhtml#a2d608d28c8cff822a3dfaf1daeb0b15e">internal::tuple_n_type</a>&lt;Type, Size&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An alias for making a tuple of the same type. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00190">190</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>

</div>
</div>
<a id="a68cfd1293d8131d82ca584d6dcfdd02b" name="a68cfd1293d8131d82ca584d6dcfdd02b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68cfd1293d8131d82ca584d6dcfdd02b">&#9670;&#160;</a></span>typed_column_vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename... RowIndexes&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a68cfd1293d8131d82ca584d6dcfdd02b">fcarouge::typed_column_vector</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    typed_matrix&lt;Matrix, std::tuple&lt;RowIndexes...&gt;, std::tuple&lt;int&gt;&gt;</div>
</div><!-- fragment -->
<p>Column vector. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00328">328</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="a83509db0f0eee1994d5e9a9f221a67a8" name="a83509db0f0eee1994d5e9a9f221a67a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83509db0f0eee1994d5e9a9f221a67a8">&#9670;&#160;</a></span>typed_row_vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename... ColumnIndexes&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a83509db0f0eee1994d5e9a9f221a67a8">fcarouge::typed_row_vector</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    typed_matrix&lt;Matrix, std::tuple&lt;int&gt;, std::tuple&lt;ColumnIndexes...&gt;&gt;</div>
</div><!-- fragment -->
<p>Row vector. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00323">323</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="a129af0cbf4c8dd331670fd55fcbe092c" name="a129af0cbf4c8dd331670fd55fcbe092c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a129af0cbf4c8dd331670fd55fcbe092c">&#9670;&#160;</a></span>underlying_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="#a129af0cbf4c8dd331670fd55fcbe092c">fcarouge::underlying_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    std::remove_cvref_t&lt;decltype(std::declval&lt;Matrix&gt;()(0, 0))&gt;</div>
</div><!-- fragment -->
<p>The underlying storage type of the matrix's elements. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00052">52</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a5ad0022b969a210b7261d0158bc1dd7b" name="a5ad0022b969a210b7261d0158bc1dd7b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ad0022b969a210b7261d0158bc1dd7b">&#9670;&#160;</a></span>for_constexpr()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;std::size_t Begin, std::size_t End, std::size_t Increment, typename Function &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void fcarouge::for_constexpr </td>
          <td>(</td>
          <td class="paramtype">Function &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>function</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compile-time for loop. </p>
<p>Help compilers with non-type template parameters on members. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00228">228</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  228</span>                                                         {</div>
<div class="line"><span class="lineno">  229</span>  internal::for_constexpr&lt;Begin, End, Increment&gt;(</div>
<div class="line"><span class="lineno">  230</span>      std::forward&lt;Function&gt;(function));</div>
<div class="line"><span class="lineno">  231</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="internal_2utility_8hpp_source.xhtml#l00246">fcarouge::internal::for_constexpr()</a>.</p>

<p class="reference">Referenced by <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00246">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix()</a>.</p>
<div id="dynsection-0" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a5ad0022b969a210b7261d0158bc1dd7b_cgraph.svg" width="334" height="76"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-1" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a5ad0022b969a210b7261d0158bc1dd7b_icgraph.svg" width="364" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="acad34877ed56d4605a364af299b1c476" name="acad34877ed56d4605a364af299b1c476"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acad34877ed56d4605a364af299b1c476">&#9670;&#160;</a></span>operator*() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Scalar</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00370">370</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  371</span>                      {</div>
<div class="line"><span class="lineno">  372</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="#a81de44c98d3d8212ab6ea199a49523e2">element&lt;Matrix, 0, 0&gt;</a>{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(0) * rhs};</div>
<div class="line"><span class="lineno">  373</span>}</div>
<div class="ttc" id="anamespacefcarouge_xhtml_a81de44c98d3d8212ab6ea199a49523e2"><div class="ttname"><a href="#a81de44c98d3d8212ab6ea199a49523e2">fcarouge::element</a></div><div class="ttdeci">product&lt; std::tuple_element_t&lt; RowIndex, typename Matrix::row_indexes &gt;, std::tuple_element_t&lt; ColumnIndex, typename Matrix::column_indexes &gt; &gt; element</div><div class="ttdoc">The type of the element at the given matrix indexes position.</div><div class="ttdef"><b>Definition</b> <a href="typed__linear__algebra_8hpp_source.xhtml#l00057">typed_linear_algebra.hpp:57</a></div></div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_aa5db2a2356369dbf5807f3760aa04d4d"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">fcarouge::typed_matrix::data</a></div><div class="ttdeci">Matrix data</div><div class="ttdef"><b>Definition</b> <a href="typed__linear__algebra_8hpp_source.xhtml#l00164">typed_linear_algebra.hpp:164</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="a016305f330897bacd2e9ebf45ee9de9b" name="a016305f330897bacd2e9ebf45ee9de9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a016305f330897bacd2e9ebf45ee9de9b">&#9670;&#160;</a></span>operator*() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Scalar</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00378">378</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  379</span>                      {</div>
<div class="line"><span class="lineno">  380</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;evaluate&lt;Matrix&gt;</a>, RowIndexes, ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> *</div>
<div class="line"><span class="lineno">  381</span>                                                                   rhs};</div>
<div class="line"><span class="lineno">  382</span>}</div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml"><div class="ttname"><a href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a></div><div class="ttdoc">Typed matrix.</div><div class="ttdef"><b>Definition</b> <a href="typed__linear__algebra_8hpp_source.xhtml#l00142">typed_linear_algebra.hpp:142</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="a00e7c3ec7b458e47794790e050cb59fe" name="a00e7c3ec7b458e47794790e050cb59fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00e7c3ec7b458e47794790e050cb59fe">&#9670;&#160;</a></span>operator*() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes , typename ColumnIndexes , typename Indexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes, Indexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, Indexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00344">344</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  345</span>                                                                    {</div>
<div class="line"><span class="lineno">  346</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;evaluate&lt;product&lt;Matrix1, Matrix2&gt;</a>&gt;, RowIndexes,</div>
<div class="line"><span class="lineno">  347</span>                      ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> * rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><span class="lineno">  348</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="ab0326427faef06bb4b1eb2fc1e809d14" name="ab0326427faef06bb4b1eb2fc1e809d14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0326427faef06bb4b1eb2fc1e809d14">&#9670;&#160;</a></span>operator*() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator* </td>
          <td>(</td>
          <td class="paramtype">Scalar</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Matrix &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00353">353</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  353</span>                                                                             {</div>
<div class="line"><span class="lineno">  354</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="#a81de44c98d3d8212ab6ea199a49523e2">element&lt;Matrix, 0, 0&gt;</a>{lhs * rhs.data(0)};</div>
<div class="line"><span class="lineno">  355</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a537752ac8f1801cfe82cd1c3c909239d" name="a537752ac8f1801cfe82cd1c3c909239d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a537752ac8f1801cfe82cd1c3c909239d">&#9670;&#160;</a></span>operator*() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator* </td>
          <td>(</td>
          <td class="paramtype">Scalar</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00360">360</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  361</span>                                                                      {</div>
<div class="line"><span class="lineno">  362</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;evaluate&lt;Matrix&gt;</a>, RowIndexes, ColumnIndexes&gt;{lhs *</div>
<div class="line"><span class="lineno">  363</span>                                                                   rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><span class="lineno">  364</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="add245b5c925cab3465e73e934ff29005" name="add245b5c925cab3465e73e934ff29005"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add245b5c925cab3465e73e934ff29005">&#9670;&#160;</a></span>operator+() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator+ </td>
          <td>(</td>
          <td class="paramtype">const Matrix &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Scalar</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000013">Todo</a></b></dt><dd>Scalar will become Index with constraints. </dd></dl>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00396">396</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  396</span>                                                                             {</div>
<div class="line"><span class="lineno">  398</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="#a81de44c98d3d8212ab6ea199a49523e2">element&lt;Matrix, 0, 0&gt;</a>{lhs.data(0) + rhs};</div>
<div class="line"><span class="lineno">  399</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="af0d698433b36932e574f63ebe64d7a69" name="af0d698433b36932e574f63ebe64d7a69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0d698433b36932e574f63ebe64d7a69">&#9670;&#160;</a></span>operator+() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00387">387</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  388</span>                                                                       {</div>
<div class="line"><span class="lineno">  389</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;evaluate&lt;Matrix1&gt;</a>, RowIndexes, ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> +</div>
<div class="line"><span class="lineno">  390</span>                                                                    rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><span class="lineno">  391</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="a3533f0e5d01c0ae5533ea62a07bcbdc4" name="a3533f0e5d01c0ae5533ea62a07bcbdc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3533f0e5d01c0ae5533ea62a07bcbdc4">&#9670;&#160;</a></span>operator-() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00404">404</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  405</span>                                                                       {</div>
<div class="line"><span class="lineno">  406</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;evaluate&lt;Matrix1&gt;</a>, RowIndexes, ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> -</div>
<div class="line"><span class="lineno">  407</span>                                                                    rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><span class="lineno">  408</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="ab7dfec28db20badd8349e71cde99091e" name="ab7dfec28db20badd8349e71cde99091e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7dfec28db20badd8349e71cde99091e">&#9670;&#160;</a></span>operator-() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator- </td>
          <td>(</td>
          <td class="paramtype">Scalar</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Matrix &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00413">413</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  413</span>                                                                             {</div>
<div class="line"><span class="lineno">  414</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="#a81de44c98d3d8212ab6ea199a49523e2">element&lt;Matrix, 0, 0&gt;</a>{lhs - rhs.data(0)};</div>
<div class="line"><span class="lineno">  415</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="afa5f405a741357732a2dfdd868a7cbe5" name="afa5f405a741357732a2dfdd868a7cbe5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa5f405a741357732a2dfdd868a7cbe5">&#9670;&#160;</a></span>operator/() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;<a class="el" href="conceptfcarouge_1_1arithmetic.xhtml">fcarouge::arithmetic</a> Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; <br />
requires singleton&lt;Matrix&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator/ </td>
          <td>(</td>
          <td class="paramtype">const Matrix &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Scalar</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00438">438</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  438</span>                                                                             {</div>
<div class="line"><span class="lineno">  439</span>  <span class="keywordflow">return</span> <a class="code hl_typedef" href="#a81de44c98d3d8212ab6ea199a49523e2">element&lt;Matrix, 0, 0&gt;</a>{lhs.data(0) / rhs};</div>
<div class="line"><span class="lineno">  440</span>}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0f96a907020c9f05bc2d00576ed4deb7" name="a0f96a907020c9f05bc2d00576ed4deb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f96a907020c9f05bc2d00576ed4deb7">&#9670;&#160;</a></span>operator/() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;<a class="el" href="conceptfcarouge_1_1arithmetic.xhtml">fcarouge::arithmetic</a> Scalar, typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Scalar</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00429">429</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  430</span>                      {</div>
<div class="line"><span class="lineno">  431</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;evaluate&lt;Matrix&gt;</a>, RowIndexes, ColumnIndexes&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> /</div>
<div class="line"><span class="lineno">  432</span>                                                                   rhs};</div>
<div class="line"><span class="lineno">  433</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="ab036216395f2fd7b69e4246285d10098" name="ab036216395f2fd7b69e4246285d10098"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab036216395f2fd7b69e4246285d10098">&#9670;&#160;</a></span>operator/() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes1 , typename RowIndexes2 , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes1, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes2, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00420">420</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  421</span>                                                                        {</div>
<div class="line"><span class="lineno">  422</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;evaluate&lt;quotient&lt;Matrix1, Matrix2&gt;</a>&gt;, RowIndexes1,</div>
<div class="line"><span class="lineno">  423</span>                      RowIndexes2&gt;{lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> / rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>};</div>
<div class="line"><span class="lineno">  424</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="aedd2b285823a2feb3a21d4942829a8c2" name="aedd2b285823a2feb3a21d4942829a8c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedd2b285823a2feb3a21d4942829a8c2">&#9670;&#160;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix1 , typename Matrix2 , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool fcarouge::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix1, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>lhs</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix2, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00336">336</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  337</span>                                                                        {</div>
<div class="line"><span class="lineno">  338</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a> == rhs.<a class="code hl_variable" href="structfcarouge_1_1typed__matrix.xhtml#aa5db2a2356369dbf5807f3760aa04d4d">data</a>;</div>
<div class="line"><span class="lineno">  339</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="a5d1b555b919a51d9ef29849f6e86b48a" name="a5d1b555b919a51d9ef29849f6e86b48a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d1b555b919a51d9ef29849f6e86b48a">&#9670;&#160;</a></span>t()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::t </td>
          <td>(</td>
          <td class="paramtype">const Type &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transpose helper function. </p>
<p>Enable readable linear algebra notation. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00174">174</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  174</span>                                                   {</div>
<div class="line"><span class="lineno">  175</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="structfcarouge_1_1transposes.xhtml">transposes&lt;Type&gt;</a>{}(value);</div>
<div class="line"><span class="lineno">  176</span>}</div>
<div class="ttc" id="astructfcarouge_1_1transposes_xhtml"><div class="ttname"><a href="structfcarouge_1_1transposes.xhtml">fcarouge::transposes</a></div><div class="ttdoc">Linear algebra transposes specialization point.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00153">utility.hpp:153</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00540">fcarouge::transposes&lt; TypedMatrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;::operator()()</a>.</p>
<div id="dynsection-2" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefcarouge_a5d1b555b919a51d9ef29849f6e86b48a_icgraph.svg" width="332" height="82"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a1e0d4e00e05e1ca7701aa8dfc9681d77" name="a1e0d4e00e05e1ca7701aa8dfc9681d77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e0d4e00e05e1ca7701aa8dfc9681d77">&#9670;&#160;</a></span>first_v</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;auto... Values&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::first_v {internal::first_v&lt;Values...&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unpack the first value of the non-type template parameter pack. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00246">246</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  246</span>{internal::first_v&lt;Values...&gt;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a8887e952722c60720253e416166a9233" name="a8887e952722c60720253e416166a9233"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8887e952722c60720253e416166a9233">&#9670;&#160;</a></span>one</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type fcarouge::one</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{internal::not_implemented&lt;Type&gt;{</div>
<div class="line">    <span class="stringliteral">&quot;Implement the linear algebra one-diagonal matrix for this type.&quot;</span>}}</div>
</div><!-- fragment -->
<p>The one matrix. </p>
<p>User-defined matrix with all its diagonal elements equal to ones, and zeroes everywhere else. This matrix is also known as the identity matrix for square matrices of non-quantity scalar types. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00254">254</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  254</span>                         {internal::not_implemented&lt;Type&gt;{</div>
<div class="line"><span class="lineno">  255</span>    <span class="stringliteral">&quot;Implement the linear algebra one-diagonal matrix for this type.&quot;</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a773f87f2fdf94a96f0c048f85a1e5106" name="a773f87f2fdf94a96f0c048f85a1e5106"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a773f87f2fdf94a96f0c048f85a1e5106">&#9670;&#160;</a></span>one&lt; Arithmetic &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Arithmetic&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Arithmetic <a class="el" href="#a8887e952722c60720253e416166a9233">fcarouge::one</a>&lt; Arithmetic &gt; {1}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The singleton one matrix specialization. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00258">258</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  258</span>{1};</div>
</div><!-- fragment -->
</div>
</div>
<a id="af1e24dabeb646745f490f0aa51f690b5" name="af1e24dabeb646745f490f0aa51f690b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1e24dabeb646745f490f0aa51f690b5">&#9670;&#160;</a></span>one&lt; Type &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; <br />
requires requires { Type::identity(); }</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="#a8887e952722c60720253e416166a9233">fcarouge::one</a>&lt; Type &gt; {Type::Identity()}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00262">262</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  262</span>{Type::Identity()};</div>
</div><!-- fragment -->
</div>
</div>
<a id="abfe9113c0e9ff8ee3dc1d5c211c1b656" name="abfe9113c0e9ff8ee3dc1d5c211c1b656"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfe9113c0e9ff8ee3dc1d5c211c1b656">&#9670;&#160;</a></span>one&lt; typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;decltype(<a class="el" href="#a8887e952722c60720253e416166a9233">one</a>&lt;Matrix&gt;), RowIndexes, ColumnIndexes&gt; <a class="el" href="#a8887e952722c60720253e416166a9233">fcarouge::one</a>&lt; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt; {<a class="el" href="#a8887e952722c60720253e416166a9233">one</a>&lt;Matrix&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The one matrix specialization. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00509">509</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  553</span>{one&lt;Matrix&gt;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac4cffefdda8c01a267ce2700c6acb903" name="ac4cffefdda8c01a267ce2700c6acb903"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4cffefdda8c01a267ce2700c6acb903">&#9670;&#160;</a></span>size</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Pack &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t fcarouge::size {internal::size&lt;Pack&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size of tuple-like types. </p>
<p>Convenient short form. In place of <code>std::tuple_size_v</code>. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00242">242</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  242</span>{internal::size&lt;Pack&gt;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="aef6fb6c8a265d85709b951506123a5f1" name="aef6fb6c8a265d85709b951506123a5f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef6fb6c8a265d85709b951506123a5f1">&#9670;&#160;</a></span>zero</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type  = double&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type fcarouge::zero</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{internal::not_implemented&lt;Type&gt;{</div>
<div class="line">    <span class="stringliteral">&quot;Implement the linear algebra zero matrix for this type.&quot;</span>}}</div>
</div><!-- fragment -->
<p>The zero matrix. </p>
<p>User-defined. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00272">272</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  272</span>                          {internal::not_implemented&lt;Type&gt;{</div>
<div class="line"><span class="lineno">  273</span>    <span class="stringliteral">&quot;Implement the linear algebra zero matrix for this type.&quot;</span>}};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5567c841761bdb7aac049796d4c43580" name="a5567c841761bdb7aac049796d4c43580"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5567c841761bdb7aac049796d4c43580">&#9670;&#160;</a></span>zero&lt; Arithmetic &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;arithmetic Arithmetic&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Arithmetic <a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">fcarouge::zero</a>&lt; Arithmetic &gt; {0}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The singleton zero matrix specialization. </p>

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00277">277</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  277</span>{0};</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac0283af94a195958399959586dcc8a50" name="ac0283af94a195958399959586dcc8a50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0283af94a195958399959586dcc8a50">&#9670;&#160;</a></span>zero&lt; Type &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; <br />
requires requires { Type::zero(); }</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto <a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">fcarouge::zero</a>&lt; Type &gt; {Type::Zero()}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="utility_8hpp_source.xhtml#l00281">281</a> of file <a class="el" href="utility_8hpp_source.xhtml">utility.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  281</span>{Type::Zero()};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a761c35802a6c58afca98c4aef4cf46e2" name="a761c35802a6c58afca98c4aef4cf46e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a761c35802a6c58afca98c4aef4cf46e2">&#9670;&#160;</a></span>zero&lt; typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Matrix , typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt;decltype(<a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">zero</a>&lt;Matrix&gt;), RowIndexes, ColumnIndexes&gt; <a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">fcarouge::zero</a>&lt; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &gt; {<a class="el" href="#aef6fb6c8a265d85709b951506123a5f1">zero</a>&lt;Matrix&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The zero matrix specialization. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00509">509</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  558</span>{zero&lt;Matrix&gt;};</div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
