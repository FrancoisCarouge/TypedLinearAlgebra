<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Typed Linear Algebra: fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; Struct Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Typed Linear Algebra<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Typed Linear Algebra</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('structfcarouge_1_1typed__matrix.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="structfcarouge_1_1typed__matrix-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt; Struct Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Typed matrix.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="structfcarouge_1_1typed__matrix__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Types</div></td></tr>
<tr><td colspan="2"><div class="groupText"><dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000014">Todo</a></b></dt><dd>Privatize this section. </dd></dl>
</div></td></tr>
<tr class="memitem:ad4da6499c4707f7645c774794bde6a0b" id="r_ad4da6499c4707f7645c774794bde6a0b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad4da6499c4707f7645c774794bde6a0b">underlying</a> = <a class="el" href="namespacefcarouge.xhtml#a129af0cbf4c8dd331670fd55fcbe092c">underlying_t</a>&lt;Matrix&gt;</td></tr>
<tr class="memdesc:ad4da6499c4707f7645c774794bde6a0b"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the element's underlying storage.  <br /></td></tr>
<tr class="separator:ad4da6499c4707f7645c774794bde6a0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Types</div></td></tr>
<tr class="memitem:a67a638bf31384a9120a5def3c74b641a" id="r_a67a638bf31384a9120a5def3c74b641a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a67a638bf31384a9120a5def3c74b641a">row_indexes</a> = RowIndexes</td></tr>
<tr class="memdesc:a67a638bf31384a9120a5def3c74b641a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The tuple with the row components of the indexes.  <br /></td></tr>
<tr class="separator:a67a638bf31384a9120a5def3c74b641a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab04e1fa2704c503f7d6189238704c53a" id="r_ab04e1fa2704c503f7d6189238704c53a"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab04e1fa2704c503f7d6189238704c53a">column_indexes</a> = ColumnIndexes</td></tr>
<tr class="memdesc:ab04e1fa2704c503f7d6189238704c53a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The tuple with the column components of the indexes.  <br /></td></tr>
<tr class="separator:ab04e1fa2704c503f7d6189238704c53a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab07412fd56ae7e92b96aaa2c2df5b5a9" id="r_ab07412fd56ae7e92b96aaa2c2df5b5a9"><td class="memTemplParams" colspan="2">template&lt;std::size_t RowIndex, std::size_t ColumnIndex&gt; </td></tr>
<tr class="memitem:ab07412fd56ae7e92b96aaa2c2df5b5a9"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a> = <a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a>&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>, RowIndex, ColumnIndex&gt;</td></tr>
<tr class="memdesc:ab07412fd56ae7e92b96aaa2c2df5b5a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of the element at the given matrix indexes position.  <br /></td></tr>
<tr class="separator:ab07412fd56ae7e92b96aaa2c2df5b5a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Functions</div></td></tr>
<tr class="memitem:a4cb6909ad42c9f4560dbf7c51e5ed1e4" id="r_a4cb6909ad42c9f4560dbf7c51e5ed1e4"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4cb6909ad42c9f4560dbf7c51e5ed1e4">typed_matrix</a> (const Matrix &amp;other)</td></tr>
<tr class="separator:a4cb6909ad42c9f4560dbf7c51e5ed1e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Functions</div></td></tr>
<tr class="memitem:a7003e001bcb6a08ca1346bafbc9b31f3" id="r_a7003e001bcb6a08ca1346bafbc9b31f3"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7003e001bcb6a08ca1346bafbc9b31f3">typed_matrix</a> ()=default</td></tr>
<tr class="separator:a7003e001bcb6a08ca1346bafbc9b31f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61debbe8e973b969b79ed4efad933054" id="r_a61debbe8e973b969b79ed4efad933054"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a61debbe8e973b969b79ed4efad933054">typed_matrix</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;other)=default</td></tr>
<tr class="separator:a61debbe8e973b969b79ed4efad933054"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ec9fac774b1a9517b6ecf001c9387b1" id="r_a7ec9fac774b1a9517b6ecf001c9387b1"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7ec9fac774b1a9517b6ecf001c9387b1">operator=</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;other)=default</td></tr>
<tr class="separator:a7ec9fac774b1a9517b6ecf001c9387b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01a3060309b0adf3a17736a0c2e0331e" id="r_a01a3060309b0adf3a17736a0c2e0331e"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a01a3060309b0adf3a17736a0c2e0331e">typed_matrix</a> (<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&amp;other)=default</td></tr>
<tr class="separator:a01a3060309b0adf3a17736a0c2e0331e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79f8df9c51f9f86dd6070ac319ba815d" id="r_a79f8df9c51f9f86dd6070ac319ba815d"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a79f8df9c51f9f86dd6070ac319ba815d">operator=</a> (<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp;&amp;other)=default</td></tr>
<tr class="separator:a79f8df9c51f9f86dd6070ac319ba815d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75b7d16e5b2202e4ba4cbebef3e521bf" id="r_a75b7d16e5b2202e4ba4cbebef3e521bf"><td class="memTemplParams" colspan="2">template&lt;algebraic OtherMatrix&gt; </td></tr>
<tr class="memitem:a75b7d16e5b2202e4ba4cbebef3e521bf"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a75b7d16e5b2202e4ba4cbebef3e521bf">typed_matrix</a> (const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; OtherMatrix, RowIndexes, ColumnIndexes &gt; &amp;other)</td></tr>
<tr class="separator:a75b7d16e5b2202e4ba4cbebef3e521bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32bc5b88b57ce2a4af015ba52c047bd1" id="r_a32bc5b88b57ce2a4af015ba52c047bd1"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a32bc5b88b57ce2a4af015ba52c047bd1">typed_matrix</a> (const <a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a>&lt; 0, 0 &gt;(&amp;elements)[<a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt; RowIndexes &gt; *<a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt; ColumnIndexes &gt;])</td></tr>
<tr class="separator:a32bc5b88b57ce2a4af015ba52c047bd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99dbe1ac29f8806b98dde49ede66e6f6" id="r_a99dbe1ac29f8806b98dde49ede66e6f6"><td class="memTemplParams" colspan="2">template&lt;arithmetic Type&gt; <br />
requires singleton&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;</td></tr>
<tr class="memitem:a99dbe1ac29f8806b98dde49ede66e6f6"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a99dbe1ac29f8806b98dde49ede66e6f6">typed_matrix</a> (const Type &amp;value)</td></tr>
<tr class="separator:a99dbe1ac29f8806b98dde49ede66e6f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0076d45735dddf3c940c09b9ca576e9" id="r_ac0076d45735dddf3c940c09b9ca576e9"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; <br />
requires uniform&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;</td></tr>
<tr class="memitem:ac0076d45735dddf3c940c09b9ca576e9"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac0076d45735dddf3c940c09b9ca576e9">typed_matrix</a> (std::initializer_list&lt; std::initializer_list&lt; Type &gt; &gt; row_list)</td></tr>
<tr class="separator:ac0076d45735dddf3c940c09b9ca576e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d3c8d07ff8b67263306db0c41afa940" id="r_a7d3c8d07ff8b67263306db0c41afa940"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; <br />
requires row&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; (not column&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;) &amp;&amp; same_size&lt;ColumnIndexes, std::tuple&lt;Types...&gt;&gt;</td></tr>
<tr class="memitem:a7d3c8d07ff8b67263306db0c41afa940"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7d3c8d07ff8b67263306db0c41afa940">typed_matrix</a> (const Types &amp;...values)</td></tr>
<tr class="separator:a7d3c8d07ff8b67263306db0c41afa940"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2388ea61fbc3358fd4fb7bcec2f83d8" id="r_ac2388ea61fbc3358fd4fb7bcec2f83d8"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; <br />
requires column&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; (not row&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;) &amp;&amp; same_size&lt;RowIndexes, std::tuple&lt;Types...&gt;&gt;</td></tr>
<tr class="memitem:ac2388ea61fbc3358fd4fb7bcec2f83d8"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac2388ea61fbc3358fd4fb7bcec2f83d8">typed_matrix</a> (const Types &amp;...values)</td></tr>
<tr class="separator:ac2388ea61fbc3358fd4fb7bcec2f83d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a356c81c7cc366d0905dcceab17d79b56" id="r_a356c81c7cc366d0905dcceab17d79b56"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a356c81c7cc366d0905dcceab17d79b56">explicit</a> (false) operator <a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a>&lt; 0</td></tr>
<tr class="separator:a356c81c7cc366d0905dcceab17d79b56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac29cf3507119ca7b31447e7cc0a23124" id="r_ac29cf3507119ca7b31447e7cc0a23124"><td class="memItemLeft" align="right" valign="top">constexpr &amp;constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac29cf3507119ca7b31447e7cc0a23124">operator[]</a> (this auto &amp;&amp;self, std::size_t index) uniform&lt; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &gt; &amp;&amp;one_dimension&lt; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &gt;</td></tr>
<tr class="separator:ac29cf3507119ca7b31447e7cc0a23124"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84a4e62f3407b8d4a69a28ee572be049" id="r_a84a4e62f3407b8d4a69a28ee572be049"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a84a4e62f3407b8d4a69a28ee572be049">operator[]</a> (this auto &amp;&amp;self, std::size_t row, std::size_t column)</td></tr>
<tr class="separator:a84a4e62f3407b8d4a69a28ee572be049"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af21e9f9a8a66d1cda8ed3cadee530715" id="r_af21e9f9a8a66d1cda8ed3cadee530715"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af21e9f9a8a66d1cda8ed3cadee530715">operator()</a> (this auto &amp;&amp;self, std::size_t index)</td></tr>
<tr class="separator:af21e9f9a8a66d1cda8ed3cadee530715"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f79a45ee0a03b1ad0804bc6a584aea3" id="r_a4f79a45ee0a03b1ad0804bc6a584aea3"><td class="memItemLeft" align="right" valign="top">constexpr auto &amp;&amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4f79a45ee0a03b1ad0804bc6a584aea3">operator()</a> (this auto &amp;&amp;self, std::size_t row, std::size_t column)</td></tr>
<tr class="separator:a4f79a45ee0a03b1ad0804bc6a584aea3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a408e4d8b881b62b0a0262e7e158cf00b" id="r_a408e4d8b881b62b0a0262e7e158cf00b"><td class="memTemplParams" colspan="2">template&lt;std::size_t Row, std::size_t Column&gt; <br />
requires in_range&lt;Row, 0, <a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;RowIndexes&gt;&gt; &amp;&amp; in_range&lt;Column, 0, <a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;ColumnIndexes&gt;&gt;</td></tr>
<tr class="memitem:a408e4d8b881b62b0a0262e7e158cf00b"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a>&lt; Row, Column &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a408e4d8b881b62b0a0262e7e158cf00b">at</a> ()</td></tr>
<tr class="separator:a408e4d8b881b62b0a0262e7e158cf00b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50b0373619ae993277d43141a2d49d21" id="r_a50b0373619ae993277d43141a2d49d21"><td class="memTemplParams" colspan="2">template&lt;std::size_t Index&gt; <br />
requires column&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; in_range&lt;Index, 0, <a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;RowIndexes&gt;&gt;</td></tr>
<tr class="memitem:a50b0373619ae993277d43141a2d49d21"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a>&lt; Index, 0 &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a50b0373619ae993277d43141a2d49d21">at</a> ()</td></tr>
<tr class="separator:a50b0373619ae993277d43141a2d49d21"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Private Member Variables</div></td></tr>
<tr class="memitem:aa5db2a2356369dbf5807f3760aa04d4d" id="r_aa5db2a2356369dbf5807f3760aa04d4d"><td class="memItemLeft" align="right" valign="top">Matrix&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a></td></tr>
<tr class="separator:aa5db2a2356369dbf5807f3760aa04d4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-attribs" name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Public Member Variables</div></td></tr>
<tr class="memitem:a15d0673c2c5a8f97ec7d6d6120bc37a4" id="r_a15d0673c2c5a8f97ec7d6d6120bc37a4"><td class="memItemLeft" align="right" valign="top">static constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">rows</a> {<a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;<a class="el" href="#a67a638bf31384a9120a5def3c74b641a">row_indexes</a>&gt;}</td></tr>
<tr class="memdesc:a15d0673c2c5a8f97ec7d6d6120bc37a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">The count of rows.  <br /></td></tr>
<tr class="separator:a15d0673c2c5a8f97ec7d6d6120bc37a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46ef06b82cd1ab3db9a22cd31436b802" id="r_a46ef06b82cd1ab3db9a22cd31436b802"><td class="memItemLeft" align="right" valign="top">static constexpr std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a46ef06b82cd1ab3db9a22cd31436b802">columns</a> {<a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;<a class="el" href="#ab04e1fa2704c503f7d6189238704c53a">column_indexes</a>&gt;}</td></tr>
<tr class="memdesc:a46ef06b82cd1ab3db9a22cd31436b802"><td class="mdescLeft">&#160;</td><td class="mdescRight">The count of rows.  <br /></td></tr>
<tr class="separator:a46ef06b82cd1ab3db9a22cd31436b802"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;algebraic Matrix, typename RowIndexes, typename ColumnIndexes&gt;<br />
struct fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;</div><p>Typed matrix. </p>
<p>Compose a linear algebra backend matrix into an typed matrix. Row and column indexes provide each element's index type.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">Matrix</td><td>The underlying linear algebra matrix. </td></tr>
    <tr><td class="paramname">RowIndexes</td><td>The packed types of the row indexes. </td></tr>
    <tr><td class="paramname">ColumnIndexes</td><td>The packed types of the column indexes.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Type safety cannot be guaranteed at compilation time without index safety. The index can either be non-type template parameters or strong types overloadings. Converting a runtime index to a dependent template type is not possible. A proxy reference could be used to allow traditional assignment syntax but the runtime check and extra indirection are not interesting tradeoffs. A template call operator can be used for getting a type safe value but impractical syntax for setting. Without index safety, the accepted tradeoff is a templated index <code>at&lt;i, j&gt;()</code> method.</dd>
<dd>
Deduction guides are tricky because a given element type comes from a row and column index to be deduced. </dd></dl>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00142">142</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ab04e1fa2704c503f7d6189238704c53a" name="ab04e1fa2704c503f7d6189238704c53a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab04e1fa2704c503f7d6189238704c53a">&#9670;&#160;</a></span>column_indexes</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::column_indexes = ColumnIndexes</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The tuple with the column components of the indexes. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00176">176</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="ab07412fd56ae7e92b96aaa2c2df5b5a9" name="ab07412fd56ae7e92b96aaa2c2df5b5a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">&#9670;&#160;</a></span>element</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;std::size_t RowIndex, std::size_t ColumnIndex&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::element = <a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a>&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>, RowIndex, ColumnIndex&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The type of the element at the given matrix indexes position. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00180">180</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="a67a638bf31384a9120a5def3c74b641a" name="a67a638bf31384a9120a5def3c74b641a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67a638bf31384a9120a5def3c74b641a">&#9670;&#160;</a></span>row_indexes</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::row_indexes = RowIndexes</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The tuple with the row components of the indexes. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00173">173</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<a id="ad4da6499c4707f7645c774794bde6a0b" name="ad4da6499c4707f7645c774794bde6a0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4da6499c4707f7645c774794bde6a0b">&#9670;&#160;</a></span>underlying</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::underlying = <a class="el" href="namespacefcarouge.xhtml#a129af0cbf4c8dd331670fd55fcbe092c">underlying_t</a>&lt;Matrix&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The type of the element's underlying storage. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00149">149</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a4cb6909ad42c9f4560dbf7c51e5ed1e4" name="a4cb6909ad42c9f4560dbf7c51e5ed1e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cb6909ad42c9f4560dbf7c51e5ed1e4">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[1/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const Matrix &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000015">Todo</a></b></dt><dd>Can this be removed altogether? </dd></dl>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00157">157</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  157</span>: <a class="code hl_variable" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a>{other} {}</div>
<div class="ttc" id="astructfcarouge_1_1typed__matrix_xhtml_aa5db2a2356369dbf5807f3760aa04d4d"><div class="ttname"><a href="#aa5db2a2356369dbf5807f3760aa04d4d">fcarouge::typed_matrix::data</a></div><div class="ttdeci">Matrix data</div><div class="ttdef"><b>Definition</b> <a href="typed__linear__algebra_8hpp_source.xhtml#l00164">typed_linear_algebra.hpp:164</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a7003e001bcb6a08ca1346bafbc9b31f3" name="a7003e001bcb6a08ca1346bafbc9b31f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7003e001bcb6a08ca1346bafbc9b31f3">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[2/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a61debbe8e973b969b79ed4efad933054" name="a61debbe8e973b969b79ed4efad933054"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61debbe8e973b969b79ed4efad933054">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[3/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a01a3060309b0adf3a17736a0c2e0331e" name="a01a3060309b0adf3a17736a0c2e0331e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01a3060309b0adf3a17736a0c2e0331e">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[4/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a75b7d16e5b2202e4ba4cbebef3e521bf" name="a75b7d16e5b2202e4ba4cbebef3e521bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75b7d16e5b2202e4ba4cbebef3e521bf">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[5/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;algebraic OtherMatrix&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; OtherMatrix, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000016">Todo</a></b></dt><dd>Requires evaluated types of Matrix and OtherMatrix are identical? </dd></dl>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00210">210</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  212</span>      : <a class="code hl_variable" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a>{other.data} {}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a32bc5b88b57ce2a4af015ba52c047bd1" name="a32bc5b88b57ce2a4af015ba52c047bd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32bc5b88b57ce2a4af015ba52c047bd1">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[6/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a>&lt; 0, 0 &gt;(&amp;)</td>          <td class="paramname"><span class="paramname"><em>elements</em></span>[size&lt; RowIndexes &gt; *size&lt; ColumnIndexes &gt;]</td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00214">214</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  217</span>      : <a class="code hl_variable" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a>{elements} {}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a99dbe1ac29f8806b98dde49ede66e6f6" name="a99dbe1ac29f8806b98dde49ede66e6f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99dbe1ac29f8806b98dde49ede66e6f6">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[7/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;arithmetic Type&gt; <br />
requires singleton&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const Type &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00221">221</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  221</span>                                                            {</div>
<div class="line"><span class="lineno">  222</span>    <a class="code hl_variable" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(0, 0) = <a class="code hl_function" href="structfcarouge_1_1element__traits.xhtml#a87ce85c64c4f639ff0f5ce3a0886e949">element_traits&lt;underlying, Type&gt;::to_underlying</a>(value);</div>
<div class="line"><span class="lineno">  223</span>  }</div>
<div class="ttc" id="astructfcarouge_1_1element__traits_xhtml_a87ce85c64c4f639ff0f5ce3a0886e949"><div class="ttname"><a href="structfcarouge_1_1element__traits.xhtml#a87ce85c64c4f639ff0f5ce3a0886e949">fcarouge::element_traits::to_underlying</a></div><div class="ttdeci">static constexpr Underlying to_underlying(Type value)</div><div class="ttdef"><b>Definition</b> <a href="typed__linear__algebra_8hpp_source.xhtml#l00108">typed_linear_algebra.hpp:108</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>, and <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00108">fcarouge::element_traits&lt; Underlying, Type &gt;::to_underlying()</a>.</p>
<div id="dynsection-1" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="structfcarouge_1_1typed__matrix_a99dbe1ac29f8806b98dde49ede66e6f6_cgraph.svg" width="368" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ac0076d45735dddf3c940c09b9ca576e9" name="ac0076d45735dddf3c940c09b9ca576e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0076d45735dddf3c940c09b9ca576e9">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[8/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;typename Type &gt; <br />
requires uniform&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">std::initializer_list&lt; std::initializer_list&lt; Type &gt; &gt;</td>          <td class="paramname"><span class="paramname"><em>row_list</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000017">Todo</a></b></dt><dd>Verify the list sizes at runtime? </dd></dl>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00227">227</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  230</span>  {</div>
<div class="line"><span class="lineno">  231</span>    <span class="keywordflow">for</span> (std::size_t i{0}; <span class="keyword">const</span> <span class="keyword">auto</span> &amp;row : row_list) {</div>
<div class="line"><span class="lineno">  232</span>      <span class="keywordflow">for</span> (std::size_t j{0}; <span class="keyword">const</span> <span class="keyword">auto</span> &amp;value : row) {</div>
<div class="line"><span class="lineno">  233</span>        <a class="code hl_variable" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(i, j) = <a class="code hl_function" href="structfcarouge_1_1element__traits.xhtml#a87ce85c64c4f639ff0f5ce3a0886e949">element_traits&lt;underlying, Type&gt;::to_underlying</a>(value);</div>
<div class="line"><span class="lineno">  234</span>        ++j;</div>
<div class="line"><span class="lineno">  235</span>      }</div>
<div class="line"><span class="lineno">  236</span>      ++i;</div>
<div class="line"><span class="lineno">  237</span>    }</div>
<div class="line"><span class="lineno">  238</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>, and <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00108">fcarouge::element_traits&lt; Underlying, Type &gt;::to_underlying()</a>.</p>
<div id="dynsection-2" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="structfcarouge_1_1typed__matrix_ac0076d45735dddf3c940c09b9ca576e9_cgraph.svg" width="368" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a7d3c8d07ff8b67263306db0c41afa940" name="a7d3c8d07ff8b67263306db0c41afa940"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d3c8d07ff8b67263306db0c41afa940">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[9/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;typename... Types&gt; <br />
requires row&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; (not column&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;) &amp;&amp; same_size&lt;ColumnIndexes, std::tuple&lt;Types...&gt;&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const Types &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000018">Todo</a></b></dt><dd><p class="startdd">Combine the two constructors in ome? </p>
<p class="interdd">Verify if the types are the same, or assignable, for nicer error? </p>
<p class="enddd">Rewrite with a fold expression over the pack? </p>
</dd></dl>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00246">246</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  246</span>                                                                 {</div>
<div class="line"><span class="lineno">  247</span>    std::tuple value_pack{values...};</div>
<div class="line"><span class="lineno">  248</span>    <a class="code hl_function" href="namespacefcarouge.xhtml#a5ad0022b969a210b7261d0158bc1dd7b">for_constexpr&lt;0, size&lt;ColumnIndexes&gt;</a>, 1&gt;([<span class="keyword">this</span>,</div>
<div class="line"><span class="lineno">  249</span>                                              &amp;value_pack](<span class="keyword">auto</span> position) {</div>
<div class="line"><span class="lineno">  250</span>      <span class="keyword">auto</span> value{std::get&lt;position&gt;(value_pack)};</div>
<div class="line"><span class="lineno">  251</span>      <span class="keyword">using </span>type = std::remove_cvref_t&lt;<span class="keyword">decltype</span>(value)&gt;;</div>
<div class="line"><span class="lineno">  252</span>      <a class="code hl_variable" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a>[position] = <a class="code hl_function" href="structfcarouge_1_1element__traits.xhtml#a87ce85c64c4f639ff0f5ce3a0886e949">element_traits&lt;underlying, type&gt;::to_underlying</a>(value);</div>
<div class="line"><span class="lineno">  253</span>    });</div>
<div class="line"><span class="lineno">  254</span>  }</div>
<div class="ttc" id="anamespacefcarouge_xhtml_a5ad0022b969a210b7261d0158bc1dd7b"><div class="ttname"><a href="namespacefcarouge.xhtml#a5ad0022b969a210b7261d0158bc1dd7b">fcarouge::for_constexpr</a></div><div class="ttdeci">constexpr void for_constexpr(Function &amp;&amp;function)</div><div class="ttdoc">Compile-time for loop.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00228">utility.hpp:228</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>, <a class="el" href="utility_8hpp_source.xhtml#l00228">fcarouge::for_constexpr()</a>, and <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00108">fcarouge::element_traits&lt; Underlying, Type &gt;::to_underlying()</a>.</p>
<div id="dynsection-3" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="structfcarouge_1_1typed__matrix_a7d3c8d07ff8b67263306db0c41afa940_cgraph.svg" width="536" height="134"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ac2388ea61fbc3358fd4fb7bcec2f83d8" name="ac2388ea61fbc3358fd4fb7bcec2f83d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2388ea61fbc3358fd4fb7bcec2f83d8">&#9670;&#160;</a></span>typed_matrix() <span class="overload">[10/10]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;typename... Types&gt; <br />
requires column&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; (not row&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt;) &amp;&amp; same_size&lt;RowIndexes, std::tuple&lt;Types...&gt;&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix </td>
          <td>(</td>
          <td class="paramtype">const Types &amp;...</td>          <td class="paramname"><span class="paramname"><em>values</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00259">259</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  259</span>                                                        {</div>
<div class="line"><span class="lineno">  260</span>    std::tuple value_pack{values...};</div>
<div class="line"><span class="lineno">  261</span>    <a class="code hl_function" href="namespacefcarouge.xhtml#a5ad0022b969a210b7261d0158bc1dd7b">for_constexpr&lt;0, size&lt;RowIndexes&gt;</a>, 1&gt;([<span class="keyword">this</span>, &amp;value_pack](<span class="keyword">auto</span> position) {</div>
<div class="line"><span class="lineno">  262</span>      <span class="keyword">auto</span> value{std::get&lt;position&gt;(value_pack)};</div>
<div class="line"><span class="lineno">  263</span>      <span class="keyword">using </span>type = std::remove_cvref_t&lt;<span class="keyword">decltype</span>(value)&gt;;</div>
<div class="line"><span class="lineno">  264</span>      <a class="code hl_variable" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a>[position] = <a class="code hl_function" href="structfcarouge_1_1element__traits.xhtml#a87ce85c64c4f639ff0f5ce3a0886e949">element_traits&lt;underlying, type&gt;::to_underlying</a>(value);</div>
<div class="line"><span class="lineno">  265</span>    });</div>
<div class="line"><span class="lineno">  266</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>, <a class="el" href="utility_8hpp_source.xhtml#l00228">fcarouge::for_constexpr()</a>, and <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00108">fcarouge::element_traits&lt; Underlying, Type &gt;::to_underlying()</a>.</p>
<div id="dynsection-4" onclick="return dynsection.toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="structfcarouge_1_1typed__matrix_ac2388ea61fbc3358fd4fb7bcec2f83d8_cgraph.svg" width="536" height="134"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a408e4d8b881b62b0a0262e7e158cf00b" name="a408e4d8b881b62b0a0262e7e158cf00b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a408e4d8b881b62b0a0262e7e158cf00b">&#9670;&#160;</a></span>at() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;std::size_t Row, std::size_t Column&gt; <br />
requires in_range&lt;Row, 0, <a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;RowIndexes&gt;&gt; &amp;&amp; in_range&lt;Column, 0, <a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;ColumnIndexes&gt;&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a>&lt; Row, Column &gt; &amp; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::at </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00306">306</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  306</span>                                                            {</div>
<div class="line"><span class="lineno">  307</span>    <span class="keywordflow">return</span> element_traits&lt;underlying, element&lt;Row, Column&gt;&gt;::from_underlying(</div>
<div class="line"><span class="lineno">  308</span>        <a class="code hl_variable" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(std::size_t{Row}, std::size_t{Column}));</div>
<div class="line"><span class="lineno">  309</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="a50b0373619ae993277d43141a2d49d21" name="a50b0373619ae993277d43141a2d49d21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50b0373619ae993277d43141a2d49d21">&#9670;&#160;</a></span>at() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<div class="memtemplate">
template&lt;std::size_t Index&gt; <br />
requires column&lt;<a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&gt; &amp;&amp; in_range&lt;Index, 0, <a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;RowIndexes&gt;&gt;</div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="#ab07412fd56ae7e92b96aaa2c2df5b5a9">element</a>&lt; Index, 0 &gt; &amp; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::at </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00313">313</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  313</span>                                                         {</div>
<div class="line"><span class="lineno">  314</span>    <span class="keywordflow">return</span> element_traits&lt;underlying, element&lt;Index, 0&gt;&gt;::from_underlying(</div>
<div class="line"><span class="lineno">  315</span>        <a class="code hl_variable" href="#aa5db2a2356369dbf5807f3760aa04d4d">data</a>(std::size_t{Index}));</div>
<div class="line"><span class="lineno">  316</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="a356c81c7cc366d0905dcceab17d79b56" name="a356c81c7cc366d0905dcceab17d79b56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a356c81c7cc366d0905dcceab17d79b56">&#9670;&#160;</a></span>explicit()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::explicit </td>
          <td>(</td>
          <td class="paramtype">false</td>          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="reference">References <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</a>.</p>

</div>
</div>
<a id="af21e9f9a8a66d1cda8ed3cadee530715" name="af21e9f9a8a66d1cda8ed3cadee530715"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af21e9f9a8a66d1cda8ed3cadee530715">&#9670;&#160;</a></span>operator()() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00289">289</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  292</span>  {</div>
<div class="line"><span class="lineno">  293</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data(index);</div>
<div class="line"><span class="lineno">  294</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4f79a45ee0a03b1ad0804bc6a584aea3" name="a4f79a45ee0a03b1ad0804bc6a584aea3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f79a45ee0a03b1ad0804bc6a584aea3">&#9670;&#160;</a></span>operator()() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>row</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>column</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00297">297</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  299</span>  {</div>
<div class="line"><span class="lineno">  300</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data(row, column);</div>
<div class="line"><span class="lineno">  301</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a7ec9fac774b1a9517b6ecf001c9387b1" name="a7ec9fac774b1a9517b6ecf001c9387b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ec9fac774b1a9517b6ecf001c9387b1">&#9670;&#160;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a79f8df9c51f9f86dd6070ac319ba815d" name="a79f8df9c51f9f86dd6070ac319ba815d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79f8df9c51f9f86dd6070ac319ba815d">&#9670;&#160;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a> &amp; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac29cf3507119ca7b31447e7cc0a23124" name="ac29cf3507119ca7b31447e7cc0a23124"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac29cf3507119ca7b31447e7cc0a23124">&#9670;&#160;</a></span>operator[]() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">&amp;constexpr auto &amp;&amp; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>index</em></span>&#160;) &amp;&amp;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00275">275</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  278</span>  {</div>
<div class="line"><span class="lineno">  279</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data(index);</div>
<div class="line"><span class="lineno">  280</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a84a4e62f3407b8d4a69a28ee572be049" name="a84a4e62f3407b8d4a69a28ee572be049"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84a4e62f3407b8d4a69a28ee572be049">&#9670;&#160;</a></span>operator[]() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto &amp;&amp; <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::operator[] </td>
          <td>(</td>
          <td class="paramtype">this auto &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>self</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>row</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t</td>          <td class="paramname"><span class="paramname"><em>column</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00283">283</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  285</span>  {</div>
<div class="line"><span class="lineno">  286</span>    <span class="keywordflow">return</span> std::forward&lt;decltype(self)&gt;(self).data(row, column);</div>
<div class="line"><span class="lineno">  287</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a46ef06b82cd1ab3db9a22cd31436b802" name="a46ef06b82cd1ab3db9a22cd31436b802"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46ef06b82cd1ab3db9a22cd31436b802">&#9670;&#160;</a></span>columns</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::columns {<a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;<a class="el" href="#ab04e1fa2704c503f7d6189238704c53a">column_indexes</a>&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The count of rows. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00191">191</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  191</span>{<a class="code hl_variable" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size&lt;column_indexes&gt;</a>};</div>
<div class="ttc" id="anamespacefcarouge_xhtml_ac4cffefdda8c01a267ce2700c6acb903"><div class="ttname"><a href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">fcarouge::size</a></div><div class="ttdeci">constexpr std::size_t size</div><div class="ttdoc">Size of tuple-like types.</div><div class="ttdef"><b>Definition</b> <a href="utility_8hpp_source.xhtml#l00242">utility.hpp:242</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa5db2a2356369dbf5807f3760aa04d4d" name="aa5db2a2356369dbf5807f3760aa04d4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5db2a2356369dbf5807f3760aa04d4d">&#9670;&#160;</a></span>data</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Matrix <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::data</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00164">164</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00306">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::at()</a>, <a class="el" href="#a356c81c7cc366d0905dcceab17d79b56">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::explicit()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00370">fcarouge::operator*()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00344">fcarouge::operator*()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00360">fcarouge::operator*()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00387">fcarouge::operator+()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00404">fcarouge::operator-()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00429">fcarouge::operator/()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00420">fcarouge::operator/()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00336">fcarouge::operator==()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00221">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix()</a>, <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00246">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix()</a>, and <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00227">fcarouge::typed_matrix&lt; Matrix, RowIndexes, ColumnIndexes &gt;::typed_matrix()</a>.</p>

</div>
</div>
<a id="a15d0673c2c5a8f97ec7d6d6120bc37a4" name="a15d0673c2c5a8f97ec7d6d6120bc37a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15d0673c2c5a8f97ec7d6d6120bc37a4">&#9670;&#160;</a></span>rows</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;algebraic Matrix, typename RowIndexes , typename ColumnIndexes &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="structfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a>&lt; Matrix, RowIndexes, ColumnIndexes &gt;::rows {<a class="el" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size</a>&lt;<a class="el" href="#a67a638bf31384a9120a5def3c74b641a">row_indexes</a>&gt;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The count of rows. </p>

<p class="definition">Definition at line <a class="el" href="typed__linear__algebra_8hpp_source.xhtml#l00188">188</a> of file <a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  188</span>{<a class="code hl_variable" href="namespacefcarouge.xhtml#ac4cffefdda8c01a267ce2700c6acb903">size&lt;row_indexes&gt;</a>};</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>/github/workspace/include/fcarouge/<a class="el" href="typed__linear__algebra_8hpp_source.xhtml">typed_linear_algebra.hpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="structfcarouge_1_1typed__matrix.xhtml">typed_matrix</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
