<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Typed Linear Algebra: /github/workspace/sample/mp_units_eigen.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Typed Linear Algebra<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Typed Linear Algebra</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('mp__units__eigen_8cpp_source.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">mp_units_eigen.cpp</div></div>
</div><!--header-->
<div class="contents">
<a href="mp__units__eigen_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/* Typed Linear Algebra</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">Version 0.1.0</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">https://github.com/FrancoisCarouge/TypedLinearAlgebra</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment"></span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment"></span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment"></span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">means.</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment"></span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment"></span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span><span class="preprocessor">#include &quot;fcarouge/linalg.hpp&quot;</span></div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span><span class="preprocessor">#include &quot;<a class="code" href="typed__linear__algebra_8hpp.xhtml">fcarouge/typed_linear_algebra.hpp</a>&quot;</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="preprocessor">#include &lt;format&gt;</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="preprocessor">#include &lt;print&gt;</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span><span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="preprocessor">#include &lt;type_traits&gt;</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="preprocessor">#include &lt;Eigen/Eigen&gt;</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="preprocessor">#include &lt;mp-units/framework/quantity.h&gt;</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="preprocessor">#include &lt;mp-units/framework/quantity_point.h&gt;</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span><span class="preprocessor">#include &lt;mp-units/math.h&gt;</span></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span><span class="preprocessor">#include &lt;mp-units/systems/isq/thermodynamics.h&gt;</span></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span><span class="preprocessor">#include &lt;mp-units/systems/si.h&gt;</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge.xhtml">fcarouge</a> {</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span><span class="comment">// Teach the typed linear algebra library how to convert Eigen&#39; underlying</span></div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span><span class="comment">// scalar types to and from mp-units&#39; types.</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> To, mp_units::Quantity From&gt;</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span><span class="keyword">struct </span>element_caster&lt;To, From&gt; {</div>
<div class="foldopen" id="foldopen00062" data-start="{" data-end="}">
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="structfcarouge_1_1element__caster_3_01_to_00_01_from_01_4.xhtml#a71f73c9fbddaa49c74331c740a292d8b">   62</a></span>  [[nodiscard]] <span class="keyword">constexpr</span> To <a class="code hl_function" href="structfcarouge_1_1element__caster_3_01_to_00_01_from_01_4.xhtml#a71f73c9fbddaa49c74331c740a292d8b">operator()</a>(From value)<span class="keyword"> const </span>{</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    <span class="keywordflow">return</span> value.numerical_value_in(value.unit);</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  }</div>
</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>};</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span><span class="keyword">template</span> &lt;mp_units::Quantity To, <span class="keyword">typename</span> From&gt;</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span><span class="keyword">struct </span>element_caster&lt;To, From&gt; {</div>
<div class="foldopen" id="foldopen00069" data-start="{" data-end="}">
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno"><a class="line" href="structfcarouge_1_1element__caster_3_01_to_00_01_from_01_4.xhtml#a71f73c9fbddaa49c74331c740a292d8b">   69</a></span>  [[nodiscard]] <span class="keyword">constexpr</span> To <a class="code hl_function" href="structfcarouge_1_1element__caster_3_01_to_00_01_from_01_4.xhtml#a71f73c9fbddaa49c74331c740a292d8b">operator()</a>(From value)<span class="keyword"> const </span>{</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>    <span class="keywordflow">return</span> value * To::reference;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  }</div>
</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>};</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span><span class="keyword">template</span> &lt;mp_units::Quantity To, <span class="keyword">typename</span> From&gt;</div>
<div class="foldopen" id="foldopen00075" data-start="{" data-end="};">
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno"><a class="line" href="structfcarouge_1_1element__caster_3_01_to_01_6_00_01_from_01_6_01_4.xhtml">   75</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structfcarouge_1_1element__caster.xhtml">element_caster</a>&lt;To &amp;, From &amp;&gt; {</div>
<div class="foldopen" id="foldopen00076" data-start="{" data-end="}">
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno"><a class="line" href="structfcarouge_1_1element__caster_3_01_to_01_6_00_01_from_01_6_01_4.xhtml#a69491ceb57f6465f66859118575f4502">   76</a></span>  [[nodiscard]] <span class="keyword">constexpr</span> To &amp;<a class="code hl_function" href="structfcarouge_1_1element__caster_3_01_to_01_6_00_01_from_01_6_01_4.xhtml#a69491ceb57f6465f66859118575f4502">operator()</a>(From &amp;value)<span class="keyword"> const </span>{</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>To &amp;<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  }</div>
</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>};</div>
</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> To, mp_units::Reference From&gt;</div>
<div class="foldopen" id="foldopen00082" data-start="{" data-end="};">
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="structfcarouge_1_1element__caster_3_01_to_00_01_from_01_4.xhtml">   82</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structfcarouge_1_1element__caster.xhtml">element_caster</a>&lt;To, From&gt; {</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="structfcarouge_1_1element__caster_3_01_to_00_01_from_01_4.xhtml#a2d0491292ccc4e7e2ccc449ecdd3c48a">   83</a></span>  [[nodiscard]] <span class="keyword">constexpr</span> To <a class="code hl_function" href="structfcarouge_1_1element__caster_3_01_to_00_01_from_01_4.xhtml#a2d0491292ccc4e7e2ccc449ecdd3c48a">operator()</a>(From)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> 1.; }</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>};</div>
</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="foldopen" id="foldopen00086" data-start="{" data-end="}">
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample.xhtml">   86</a></span><span class="keyword">namespace </span>sample {</div>
<div class="foldopen" id="foldopen00087" data-start="{" data-end="}">
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml">   87</a></span><span class="keyword">namespace </span>{</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span><span class="comment">// Set up heterogenously unit typed linear algebra types.</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a3c3e455061e1c9775f216253f0fc5541">   89</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a3c3e455061e1c9775f216253f0fc5541">representation</a> = double;</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span><span class="keyword">template</span> &lt;auto QuantityReference&gt;</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">   92</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a> = mp_units::quantity&lt;QuantityReference, representation&gt;;</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span><span class="keyword">template</span> &lt;mp_units::Reference auto QuantityReference&gt;</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a22a3c1053bf655206ee12e8608f8f0ba">   95</a></span><span class="keyword">using </span><a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a22a3c1053bf655206ee12e8608f8f0ba">quantity_point</a> =</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    mp_units::quantity_point&lt;QuantityReference,</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>                             mp_units::default_point_origin(QuantityReference),</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>                             <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a3c3e455061e1c9775f216253f0fc5541">representation</a>&gt;;</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> RowIndexes, <span class="keyword">typename</span> ColumnIndexes&gt;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a3ad842428e2a263b2bdee6a8f7a9bb9a">  101</a></span><span class="keyword">using </span><a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">matrix</a> =</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>    <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">typed_matrix&lt;Eigen::Matrix&lt;representation, std::tuple_size_v&lt;RowIndexes&gt;</a>,</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>                               std::tuple_size_v&lt;ColumnIndexes&gt;&gt;,</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>                 RowIndexes, ColumnIndexes&gt;;</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Types&gt;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a139d2e55c4175d874221ef84f1e39dcb">  107</a></span><span class="keyword">using </span><a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">column_vector</a> =</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">typed_column_vector</a>&lt;Eigen::Vector&lt;<a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a3c3e455061e1c9775f216253f0fc5541">representation</a>, <span class="keyword">sizeof</span>...(Types)&gt;,</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>                        Types...&gt;;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Types&gt;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a49493e629eb806d800abe69834c8bcdf">  112</a></span><span class="keyword">using </span><a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">row_vector</a> =</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>    <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">typed_row_vector</a>&lt;Eigen::RowVector&lt;<a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a3c3e455061e1c9775f216253f0fc5541">representation</a>, <span class="keyword">sizeof</span>...(Types)&gt;,</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>                     Types...&gt;;</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="foldopen" id="foldopen00120" data-start="{" data-end="};">
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a21786fcdeff8521c91f594655772d63a">  120</a></span>[[maybe_unused]] <span class="keyword">auto</span> <a class="code hl_variable" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a21786fcdeff8521c91f594655772d63a">sample</a>{[] {</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::m;</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::m2;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::s;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::s2;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::s3;</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span> s4{pow&lt;4&gt;(s)};</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  <span class="keyword">using </span>mp_units::one;</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::A;</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::mol;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <span class="keyword">using </span>position = <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity&lt;mp_units::isq::length[m]&gt;</a>;</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <span class="keyword">using </span>velocity = <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a>&lt;mp_units::isq::velocity[m / s]&gt;;</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  <span class="keyword">using </span>acceleration = <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a>&lt;mp_units::isq::acceleration[m / s2]&gt;;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>  <span class="keyword">using </span>state = <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">column_vector&lt;position, velocity, acceleration&gt;</a>;</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  <span class="comment">// Column-vector declaration.</span></div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  state x0{3. * m, 2. * m / s, 1. * m / s2};</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  <span class="comment">// Printable.</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>  std::println(<span class="stringliteral">&quot;x0 = {}&quot;</span>, x0);</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x0) == <span class="stringliteral">&quot;[[3 m], [2 m/s], [1 m/s²]]&quot;</span>);</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span> </div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  <span class="comment">// Element assignment and access.</span></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  x0.at&lt;1&gt;() = 2.5 * m / s;</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  <span class="keyword">auto</span> x0_1{x0.at&lt;1&gt;()};</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  assert(x0_1 == 2.5 * m / s);</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x0_1) == <span class="stringliteral">&quot;2.5 m/s&quot;</span>);</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  <span class="comment">// Multiplication with a scalar factor.</span></div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  state x1{x0 * 3.};</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x1) == <span class="stringliteral">&quot;[[9 m], [7.5 m/s], [3 m/s²]]&quot;</span>);</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>  <span class="comment">// Division with a scalar divisor.</span></div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  state x2{x1 / 2.};</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x2) == <span class="stringliteral">&quot;[[4.5 m], [3.75 m/s], [1.5 m/s²]]&quot;</span>);</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  <span class="comment">// Substraction of two vectors of the same types.</span></div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  state x3{x2 - x0};</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x3) == <span class="stringliteral">&quot;[[1.5 m], [1.25 m/s], [0.5 m/s²]]&quot;</span>);</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>  <span class="comment">// Additions of two vectors of the same types.</span></div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  state x4{x3 + x3};</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x4) == <span class="stringliteral">&quot;[[3 m], [2.5 m/s], [1 m/s²]]&quot;</span>);</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  state x5{3. * m, 2. * m / s, 1. * m / s2};</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <span class="comment">// Multiplication with a strongly typed factor.</span></div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * (2. * m)) == <span class="stringliteral">&quot;[[6 m²], [4 m²/s], [2 m²/s²]]&quot;</span>);</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (0.5 / m) * x5) == <span class="stringliteral">&quot;[[1.5], [1 1/s], [0.5 1/s²]]&quot;</span>);</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keyword">using </span>state_transpose = <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">row_vector&lt;position, velocity, acceleration&gt;</a>;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  <span class="comment">// Row-vector declaration.</span></div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  state_transpose xt5{3. * m, 2. * m / s, 1. * m / s2};</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5) == <span class="stringliteral">&quot;[3 m, 2 m/s, 1 m/s²]&quot;</span>);</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  <span class="comment">// Compatible matrix multiplication.</span></div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * xt5) == <span class="stringliteral">&quot;[[9 m², 6 m²/s, 3 m²/s²],&quot;</span>    <span class="comment">//</span></div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>                                        <span class="stringliteral">&quot; [6 m²/s, 4 m²/s², 2 m²/s³],&quot;</span> <span class="comment">//</span></div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>                                        <span class="stringliteral">&quot; [3 m²/s², 2 m²/s³, 1 m²/s⁴]]&quot;</span>);</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  <span class="comment">// Singleton matrix declaration, for example, but perhaps not a recommended</span></div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="comment">// replacement for what should normally just be a `quantity{1. * A / mol}`.</span></div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">matrix</a>&lt;std::tuple&lt;<span class="keyword">decltype</span>(1. * A)&gt;, std::tuple&lt;<span class="keyword">decltype</span>(1. / mol)&gt;&gt; s1{</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>      1. * A / mol};</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, s1) == <span class="stringliteral">&quot;1 A/mol&quot;</span>);</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  <span class="comment">// More forms of multiplication with a scalar factor.</span></div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * 2.) == <span class="stringliteral">&quot;[[6 m], [4 m/s], [2 m/s²]]&quot;</span>);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, 2. * x5) == <span class="stringliteral">&quot;[[6 m], [4 m/s], [2 m/s²]]&quot;</span>);</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5 * 2.) == <span class="stringliteral">&quot;[6 m, 4 m/s, 2 m/s²]&quot;</span>);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, 2. * xt5) == <span class="stringliteral">&quot;[6 m, 4 m/s, 2 m/s²]&quot;</span>);</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (x5 * xt5) * 2.) == <span class="stringliteral">&quot;[[18 m², 12 m²/s, 6 m²/s²],&quot;</span></div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>                                               <span class="stringliteral">&quot; [12 m²/s, 8 m²/s², 4 m²/s³],&quot;</span></div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>                                               <span class="stringliteral">&quot; [6 m²/s², 4 m²/s³, 2 m²/s⁴]]&quot;</span>);</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, 2. * (x5 * xt5)) == <span class="stringliteral">&quot;[[18 m², 12 m²/s, 6 m²/s²],&quot;</span></div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>                                               <span class="stringliteral">&quot; [12 m²/s, 8 m²/s², 4 m²/s³],&quot;</span></div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>                                               <span class="stringliteral">&quot; [6 m²/s², 4 m²/s³, 2 m²/s⁴]]&quot;</span>);</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span> </div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  <span class="comment">// More forms of multiplication with a strongly typed factor.</span></div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * (2. * m)) == <span class="stringliteral">&quot;[[6 m²], [4 m²/s], [2 m²/s²]]&quot;</span>);</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (2. * m) * x5) == <span class="stringliteral">&quot;[[6 m²], [4 m²/s], [2 m²/s²]]&quot;</span>);</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5 * (2. * m)) == <span class="stringliteral">&quot;[6 m², 4 m²/s, 2 m²/s²]&quot;</span>);</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (2. * m) * xt5) == <span class="stringliteral">&quot;[6 m², 4 m²/s, 2 m²/s²]&quot;</span>);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="comment">// More forms of multiplication with typed matrices.</span></div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * s1) == <span class="stringliteral">&quot;[[3 A m/mol],&quot;</span></div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>                                       <span class="stringliteral">&quot; [2 A m mol⁻¹ s⁻¹],&quot;</span></div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>                                       <span class="stringliteral">&quot; [1 A m mol⁻¹ s⁻²]]&quot;</span>);</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, s1 * xt5) ==</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>         <span class="stringliteral">&quot;[3 A m/mol, 2 A m mol⁻¹ s⁻¹, 1 A m mol⁻¹ s⁻²]&quot;</span>);</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>  <span class="comment">// More forms of division with a scalar term.</span></div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 / 2.) == <span class="stringliteral">&quot;[[1.5 m], [1 m/s], [0.5 m/s²]]&quot;</span>);</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, 1. / x5) ==</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>         <span class="stringliteral">&quot;[0.3333333333333333 1/m, 0 s/m, 0 s²/m]&quot;</span>);</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5 / 2.) == <span class="stringliteral">&quot;[1.5 m, 1 m/s, 0.5 m/s²]&quot;</span>);</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  <span class="comment">// More forms of division with a strongly typed factor.</span></div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 / (2. * m)) == <span class="stringliteral">&quot;[[1.5], [1 1/s], [0.5 1/s²]]&quot;</span>);</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (1. * m) / x5) == <span class="stringliteral">&quot;[0.3333333333333333, 0 s, 0 s²]&quot;</span>);</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5 / (2. * m)) == <span class="stringliteral">&quot;[1.5, 1 1/s, 0.5 1/s²]&quot;</span>);</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  <span class="comment">// More forms of division with typed matrices.</span></div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, s1 / s1) == <span class="stringliteral">&quot;1&quot;</span>);</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 / x5) == <span class="stringliteral">&quot;[[1, 0 s, 0 s²],&quot;</span></div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>                                       <span class="stringliteral">&quot; [0.6666666666666666 1/s, 0, 0 s],&quot;</span></div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>                                       <span class="stringliteral">&quot; [0.3333333333333333 1/s², 0 1/s, 0]]&quot;</span>);</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  <span class="comment">// Homogeneously quantity typed vector.</span></div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  <span class="keyword">using </span>vector3d =</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>      <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">column_vector&lt;representation, representation, representation&gt;</a>;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>  <span class="keyword">using </span>velocity3d = <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">column_vector&lt;velocity, velocity, velocity&gt;</a>;</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  vector3d v{1., 2., 3.};</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  velocity3d v0{v * m / s};</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, v0) == <span class="stringliteral">&quot;[[1 m/s], [2 m/s], [3 m/s]]&quot;</span>);</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span> </div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  <span class="comment">// Beware of non-evaluated template expression: these types are not the same.</span></div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  <span class="keyword">auto</span> a0{vector3d{1., 2., 3.} * mp_units::isq::velocity[m / s]};</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  <span class="keyword">static_assert</span>(not std::is_same_v&lt;<span class="keyword">decltype</span>(a0), velocity3d&gt;);</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  <span class="comment">// Addition where both arguments should be of the same quantity kind and</span></div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  <span class="comment">// character.</span></div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, v0 + v0) == <span class="stringliteral">&quot;[[2 m/s], [4 m/s], [6 m/s]]&quot;</span>);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span> </div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  <span class="comment">// Subtraction where both arguments should be of the same quantity kind and</span></div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  <span class="comment">// character.</span></div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, v0 - v0) == <span class="stringliteral">&quot;[[0 m/s], [0 m/s], [0 m/s]]&quot;</span>);</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span> </div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="comment">// 1-D vehicle location Kalman estimation.</span></div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>  state x{0. * m, 0. * m / s, 0. * m / s2};</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>  std::println(<span class="stringliteral">&quot;X: {}&quot;</span>, x);</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  <span class="comment">// X: [[0 m],</span></div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <span class="comment">//     [0 m/s],</span></div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>  <span class="comment">//     [0 m/s²]]</span></div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span> </div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  <span class="keyword">using </span>estimate_uncertainty =</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>      <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">matrix&lt;std::tuple&lt;position, velocity, acceleration&gt;</a>,</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>             std::tuple&lt;position, velocity, acceleration&gt;&gt;;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>  estimate_uncertainty p{estimate_uncertainty::matrix::Zero()};</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>  p.<a class="code hl_function" href="classfcarouge_1_1typed__matrix.xhtml#aeaaffa18c7c9c8eb23412bc435b20eb4">at</a>&lt;0, 0&gt;() = 500. * m2;</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  p.at&lt;1, 1&gt;() = 500. * m2 / s2;</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>  p.at&lt;2, 2&gt;() = 500. * m2 / s4;</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>  std::println(<span class="stringliteral">&quot;P: {}&quot;</span>, p);</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>  <span class="comment">// P: [[500 m²,     0 m²/s,    0 m²/s²],</span></div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  <span class="comment">//     [  0 m²/s, 500 m²/s²,   0 m²/s³],</span></div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>  <span class="comment">//     [  0 m²/s²,  0 m²/s³, 500 m²/s⁴]]</span></div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span> </div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>  <span class="keyword">using </span>process_uncertainty = estimate_uncertainty;</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  process_uncertainty q;</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>  q.at&lt;0, 0&gt;() = 0.01 * m2;</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>  q.at&lt;0, 1&gt;() = 0.02 * m2 / s;</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>  q.at&lt;0, 2&gt;() = 0.02 * m2 / s2;</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>  q.at&lt;1, 0&gt;() = 0.02 * m2 / s;</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>  q.at&lt;1, 1&gt;() = 0.04 * m2 / s2;</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  q.at&lt;1, 2&gt;() = 0.04 * m2 / s3;</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>  q.at&lt;2, 0&gt;() = 0.02 * m2 / s2;</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>  q.at&lt;2, 1&gt;() = 0.04 * m2 / s3;</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>  q.at&lt;2, 2&gt;() = 0.04 * m2 / s4;</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>  std::println(<span class="stringliteral">&quot;Q: {}&quot;</span>, q);</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>  <span class="comment">// Q: [[0.01 m²,    0.02 m²/s,  0.02 m²/s²],</span></div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  <span class="comment">//     [0.02 m²/s,  0.04 m²/s², 0.04 m²/s³],</span></div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>  <span class="comment">//     [0.02 m²/s², 0.04 m²/s³, 0.04 m²/s⁴]]</span></div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span> </div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>  <span class="keyword">using </span>output_uncertainty = <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity&lt;m2&gt;</a>;</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>  output_uncertainty r{9. * m2};</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>  std::println(<span class="stringliteral">&quot;R: {}&quot;</span>, r);</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>  <span class="comment">// R: 9 m²</span></div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span> </div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>  <span class="keyword">using </span>output_model = <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">row_vector&lt;quantity&lt;one&gt;</a>, <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity&lt;s&gt;</a>, <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity&lt;s2&gt;</a>&gt;;</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>  output_model h{output_model::matrix::Identity()};</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>  std::println(<span class="stringliteral">&quot;H: {}&quot;</span>, h);</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>  <span class="comment">// H: [1, 0 s, 0 s²]</span></div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span> </div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>  <span class="keyword">using </span>state_transition =</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>      <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">matrix&lt;std::tuple&lt;position, velocity, acceleration&gt;</a>,</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>             std::tuple&lt;<a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a>&lt;one / m&gt;, <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a>&lt;s / m&gt;, <a class="code hl_typedef" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a>&lt;s2 / m&gt;&gt;&gt;;</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>  state_transition f{state_transition::matrix::Identity()};</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>  f.<a class="code hl_function" href="classfcarouge_1_1typed__matrix.xhtml#aeaaffa18c7c9c8eb23412bc435b20eb4">at</a>&lt;0, 1&gt;() = 1. * s;</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>  f.at&lt;0, 2&gt;() = 0.5 * s2;</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>  f.at&lt;1, 2&gt;() = 1. * s;</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  std::println(<span class="stringliteral">&quot;F: {}&quot;</span>, f);</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  <span class="comment">// F: [[1, 1 s, 0.5 s²],</span></div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>  <span class="comment">//     [0 1/s, 1, 1 s],</span></div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>  <span class="comment">//     [0 1/s², 0 1/s, 1]]</span></div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span> </div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>  <span class="comment">// Prediction stage of the filter estimated state.</span></div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>  x = f * x;</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>  p = f * p * <a class="code hl_function" href="namespacefcarouge.xhtml#a39c15f9009b3d9cfed2a5d90b56a5ac3">transposed</a>(f) + q;</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>  <span class="comment">// Update stage of the filter from output measurements.</span></div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>  <span class="keyword">using </span>output = position;</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  output z{-393.66 * m};</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span> </div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>  <span class="keyword">using </span>innovation_uncertainty = output_uncertainty;</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>  innovation_uncertainty si{h * p * <a class="code hl_function" href="namespacefcarouge.xhtml#a39c15f9009b3d9cfed2a5d90b56a5ac3">transposed</a>(h) + r};</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span> </div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>  <span class="keyword">using </span>unevaluated_gain =</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>      <span class="keyword">decltype</span>(std::declval&lt;state&gt;() / std::declval&lt;output&gt;());</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>  <span class="keyword">using </span>gain =</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>      <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">matrix&lt;unevaluated_gain::row_indexes, unevaluated_gain::column_indexes&gt;</a>;</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  gain k{p * <a class="code hl_function" href="namespacefcarouge.xhtml#a39c15f9009b3d9cfed2a5d90b56a5ac3">transposed</a>(h) / si};</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span> </div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>  <span class="keyword">using </span>innovation = output;</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span>  innovation y{z - h * x};</div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>  x = x + k * y;</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span> </div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>  std::println(<span class="stringliteral">&quot;X: {}&quot;</span>, x);</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>  <span class="comment">// X: [[-390.53 m],</span></div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>  <span class="comment">//     [-260.36 m/s],</span></div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>  <span class="comment">//     [ -86.79 m/s²]]</span></div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span> </div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>  <span class="keyword">using </span>unevaluated_kh =</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>      <span class="keyword">decltype</span>(std::declval&lt;gain&gt;() * std::declval&lt;output_model&gt;());</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>  <span class="keyword">using </span>kh =</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>      <a class="code hl_class" href="classfcarouge_1_1typed__matrix.xhtml">matrix&lt;unevaluated_kh::row_indexes, unevaluated_kh::column_indexes&gt;</a>;</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>  kh i{state_transition::matrix::Identity()};</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>  p = (i - k * h) * p * <a class="code hl_function" href="namespacefcarouge.xhtml#a39c15f9009b3d9cfed2a5d90b56a5ac3">transposed</a>(i - k * h) + k * r * <a class="code hl_function" href="namespacefcarouge.xhtml#a39c15f9009b3d9cfed2a5d90b56a5ac3">transposed</a>(k);</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>  std::println(<span class="stringliteral">&quot;P: {}&quot;</span>, p);</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>  <span class="comment">// P: [[8.92 m²,      5.95 m²/s,    1.98 m²/s²],</span></div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>  <span class="comment">//     [5.95 m²/s,  503.98 m²/s², 334.67 m²/s³],</span></div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>  <span class="comment">//     [1.98 m²/s², 334.67 m²/s³, 444.91 m²/s⁴]]</span></div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span> </div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>}()};</div>
</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>} <span class="comment">// namespace</span></div>
</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>} <span class="comment">// namespace sample</span></div>
</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>} <span class="comment">// namespace fcarouge</span></div>
<div class="ttc" id="aclassfcarouge_1_1typed__matrix_xhtml"><div class="ttname"><a href="classfcarouge_1_1typed__matrix.xhtml">fcarouge::typed_matrix</a></div><div class="ttdoc">Strongly typed matrix.</div><div class="ttdef"><b>Definition</b> <a href="typed__linear__algebra__forward_8hpp_source.xhtml#l00043">typed_linear_algebra_forward.hpp:43</a></div></div>
<div class="ttc" id="aclassfcarouge_1_1typed__matrix_xhtml_aeaaffa18c7c9c8eb23412bc435b20eb4"><div class="ttname"><a href="classfcarouge_1_1typed__matrix.xhtml#aeaaffa18c7c9c8eb23412bc435b20eb4">fcarouge::typed_matrix::at</a></div><div class="ttdeci">constexpr auto at() -&gt; element&lt; Row, Column &gt; &amp;requires(Row&lt; rows) and(Column&lt; columns)</div><div class="ttdoc">Access the specified element with compile-time bound checking.</div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03_xhtml_a21786fcdeff8521c91f594655772d63a"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a21786fcdeff8521c91f594655772d63a">fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::sample</a></div><div class="ttdeci">auto sample</div><div class="ttdoc">Strongly typed linear algebra samples.</div><div class="ttdef"><b>Definition</b> <a href="#l00120">mp_units_eigen.cpp:120</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03_xhtml_a22a3c1053bf655206ee12e8608f8f0ba"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a22a3c1053bf655206ee12e8608f8f0ba">fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::quantity_point</a></div><div class="ttdeci">mp_units::quantity_point&lt; QuantityReference, mp_units::default_point_origin(QuantityReference), representation &gt; quantity_point</div><div class="ttdef"><b>Definition</b> <a href="#l00095">mp_units_eigen.cpp:95</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03_xhtml_a3c3e455061e1c9775f216253f0fc5541"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a3c3e455061e1c9775f216253f0fc5541">fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::representation</a></div><div class="ttdeci">double representation</div><div class="ttdef"><b>Definition</b> <a href="#l00089">mp_units_eigen.cpp:89</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03_xhtml_a8b2e65b7992ae2a7bbf9fe0554c970ea"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml#a8b2e65b7992ae2a7bbf9fe0554c970ea">fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::quantity</a></div><div class="ttdeci">mp_units::quantity&lt; QuantityReference, representation &gt; quantity</div><div class="ttdef"><b>Definition</b> <a href="#l00092">mp_units_eigen.cpp:92</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml"><div class="ttname"><a href="namespacefcarouge.xhtml">fcarouge</a></div><div class="ttdoc">Francois Carouge's projects namespace.</div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a39c15f9009b3d9cfed2a5d90b56a5ac3"><div class="ttname"><a href="namespacefcarouge.xhtml#a39c15f9009b3d9cfed2a5d90b56a5ac3">fcarouge::transposed</a></div><div class="ttdeci">constexpr auto transposed(const same_as_typed_matrix auto &amp;value)</div></div>
<div class="ttc" id="astructfcarouge_1_1element__caster_3_01_to_00_01_from_01_4_xhtml_a2d0491292ccc4e7e2ccc449ecdd3c48a"><div class="ttname"><a href="structfcarouge_1_1element__caster_3_01_to_00_01_from_01_4.xhtml#a2d0491292ccc4e7e2ccc449ecdd3c48a">fcarouge::element_caster&lt; To, From &gt;::operator()</a></div><div class="ttdeci">constexpr To operator()(From) const</div><div class="ttdef"><b>Definition</b> <a href="#l00083">mp_units_eigen.cpp:83</a></div></div>
<div class="ttc" id="astructfcarouge_1_1element__caster_3_01_to_00_01_from_01_4_xhtml_a71f73c9fbddaa49c74331c740a292d8b"><div class="ttname"><a href="structfcarouge_1_1element__caster_3_01_to_00_01_from_01_4.xhtml#a71f73c9fbddaa49c74331c740a292d8b">fcarouge::element_caster&lt; To, From &gt;::operator()</a></div><div class="ttdeci">constexpr To operator()(From value) const</div><div class="ttdef"><b>Definition</b> <a href="#l00062">mp_units_eigen.cpp:62</a></div></div>
<div class="ttc" id="astructfcarouge_1_1element__caster_3_01_to_01_6_00_01_from_01_6_01_4_xhtml_a69491ceb57f6465f66859118575f4502"><div class="ttname"><a href="structfcarouge_1_1element__caster_3_01_to_01_6_00_01_from_01_6_01_4.xhtml#a69491ceb57f6465f66859118575f4502">fcarouge::element_caster&lt; To &amp;, From &amp; &gt;::operator()</a></div><div class="ttdeci">constexpr To &amp; operator()(From &amp;value) const</div><div class="ttdef"><b>Definition</b> <a href="#l00076">mp_units_eigen.cpp:76</a></div></div>
<div class="ttc" id="astructfcarouge_1_1element__caster_xhtml"><div class="ttname"><a href="structfcarouge_1_1element__caster.xhtml">fcarouge::element_caster</a></div><div class="ttdoc">Typed matrix element conversions customization point.</div><div class="ttdef"><b>Definition</b> <a href="typed__linear__algebra__forward_8hpp_source.xhtml#l00044">typed_linear_algebra_forward.hpp:44</a></div></div>
<div class="ttc" id="atyped__linear__algebra_8hpp_xhtml"><div class="ttname"><a href="typed__linear__algebra_8hpp.xhtml">typed_linear_algebra.hpp</a></div><div class="ttdoc">Typed linear algebra implementation.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_c29eeb5af533606caea8a09e66794740.xhtml">sample</a></li><li class="navelem"><a class="el" href="mp__units__eigen_8cpp.xhtml">mp_units_eigen.cpp</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
