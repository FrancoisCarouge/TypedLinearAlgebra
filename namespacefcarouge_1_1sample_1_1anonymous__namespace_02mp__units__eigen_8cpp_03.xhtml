<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.12.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Typed Linear Algebra: fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp} Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript" src="darkmode_toggle.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Typed Linear Algebra<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">Typed Linear Algebra</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.12.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle"><div class="title">fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp} Namespace Reference</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a3c3e455061e1c9775f216253f0fc5541" id="r_a3c3e455061e1c9775f216253f0fc5541"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3c3e455061e1c9775f216253f0fc5541">representation</a> = double</td></tr>
<tr class="separator:a3c3e455061e1c9775f216253f0fc5541"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b2e65b7992ae2a7bbf9fe0554c970ea" id="r_a8b2e65b7992ae2a7bbf9fe0554c970ea"><td class="memTemplParams" colspan="2">template&lt;auto QuantityReference&gt; </td></tr>
<tr class="memitem:a8b2e65b7992ae2a7bbf9fe0554c970ea"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a> = mp_units::quantity&lt;QuantityReference, <a class="el" href="#a3c3e455061e1c9775f216253f0fc5541">representation</a>&gt;</td></tr>
<tr class="separator:a8b2e65b7992ae2a7bbf9fe0554c970ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22a3c1053bf655206ee12e8608f8f0ba" id="r_a22a3c1053bf655206ee12e8608f8f0ba"><td class="memTemplParams" colspan="2">template&lt;mp_units::Reference auto QuantityReference&gt; </td></tr>
<tr class="memitem:a22a3c1053bf655206ee12e8608f8f0ba"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a22a3c1053bf655206ee12e8608f8f0ba">quantity_point</a></td></tr>
<tr class="separator:a22a3c1053bf655206ee12e8608f8f0ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ad842428e2a263b2bdee6a8f7a9bb9a" id="r_a3ad842428e2a263b2bdee6a8f7a9bb9a"><td class="memTemplParams" colspan="2">template&lt;typename RowIndexes , typename ColumnIndexes &gt; </td></tr>
<tr class="memitem:a3ad842428e2a263b2bdee6a8f7a9bb9a"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a3ad842428e2a263b2bdee6a8f7a9bb9a">matrix</a></td></tr>
<tr class="separator:a3ad842428e2a263b2bdee6a8f7a9bb9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a139d2e55c4175d874221ef84f1e39dcb" id="r_a139d2e55c4175d874221ef84f1e39dcb"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; </td></tr>
<tr class="memitem:a139d2e55c4175d874221ef84f1e39dcb"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a139d2e55c4175d874221ef84f1e39dcb">column_vector</a></td></tr>
<tr class="separator:a139d2e55c4175d874221ef84f1e39dcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49493e629eb806d800abe69834c8bcdf" id="r_a49493e629eb806d800abe69834c8bcdf"><td class="memTemplParams" colspan="2">template&lt;typename... Types&gt; </td></tr>
<tr class="memitem:a49493e629eb806d800abe69834c8bcdf"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a49493e629eb806d800abe69834c8bcdf">row_vector</a></td></tr>
<tr class="separator:a49493e629eb806d800abe69834c8bcdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a21786fcdeff8521c91f594655772d63a" id="r_a21786fcdeff8521c91f594655772d63a"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a21786fcdeff8521c91f594655772d63a">sample</a></td></tr>
<tr class="memdesc:a21786fcdeff8521c91f594655772d63a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strongly typed linear algebra samples.  <br /></td></tr>
<tr class="separator:a21786fcdeff8521c91f594655772d63a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a139d2e55c4175d874221ef84f1e39dcb" name="a139d2e55c4175d874221ef84f1e39dcb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a139d2e55c4175d874221ef84f1e39dcb">&#9670;&#160;</a></span>column_vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::column_vector</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    <a class="code hl_typedef" href="namespacefcarouge.xhtml#a96fea71ab24114a61950988fdac23f58">typed_column_vector</a>&lt;Eigen::Vector&lt;<a class="code hl_typedef" href="#a3c3e455061e1c9775f216253f0fc5541">representation</a>, <span class="keyword">sizeof</span>...(Types)&gt;,</div>
<div class="line">                        Types...&gt;</div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03_xhtml_a3c3e455061e1c9775f216253f0fc5541"><div class="ttname"><a href="#a3c3e455061e1c9775f216253f0fc5541">fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::representation</a></div><div class="ttdeci">double representation</div><div class="ttdef"><b>Definition</b> <a href="mp__units__eigen_8cpp_source.xhtml#l00089">mp_units_eigen.cpp:89</a></div></div>
<div class="ttc" id="anamespacefcarouge_xhtml_a96fea71ab24114a61950988fdac23f58"><div class="ttname"><a href="namespacefcarouge.xhtml#a96fea71ab24114a61950988fdac23f58">fcarouge::typed_column_vector</a></div><div class="ttdeci">typed_matrix&lt; Matrix, std::tuple&lt; RowIndexes... &gt;, tla::identity_index &gt; typed_column_vector</div><div class="ttdoc">Strongly typed column vector.</div><div class="ttdef"><b>Definition</b> <a href="typed__linear__algebra_8hpp_source.xhtml#l00368">typed_linear_algebra.hpp:368</a></div></div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="mp__units__eigen_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="mp__units__eigen_8cpp_source.xhtml">mp_units_eigen.cpp</a>.</p>

</div>
</div>
<a id="a3ad842428e2a263b2bdee6a8f7a9bb9a" name="a3ad842428e2a263b2bdee6a8f7a9bb9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ad842428e2a263b2bdee6a8f7a9bb9a">&#9670;&#160;</a></span>matrix</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename RowIndexes , typename ColumnIndexes &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::matrix</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    typed_matrix&lt;Eigen::Matrix&lt;representation, std::tuple_size_v&lt;RowIndexes&gt;,</div>
<div class="line">                               std::tuple_size_v&lt;ColumnIndexes&gt;&gt;,</div>
<div class="line">                 RowIndexes, ColumnIndexes&gt;</div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="mp__units__eigen_8cpp_source.xhtml#l00101">101</a> of file <a class="el" href="mp__units__eigen_8cpp_source.xhtml">mp_units_eigen.cpp</a>.</p>

</div>
</div>
<a id="a8b2e65b7992ae2a7bbf9fe0554c970ea" name="a8b2e65b7992ae2a7bbf9fe0554c970ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b2e65b7992ae2a7bbf9fe0554c970ea">&#9670;&#160;</a></span>quantity</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;auto QuantityReference&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::quantity = mp_units::quantity&lt;QuantityReference, <a class="el" href="#a3c3e455061e1c9775f216253f0fc5541">representation</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="mp__units__eigen_8cpp_source.xhtml#l00092">92</a> of file <a class="el" href="mp__units__eigen_8cpp_source.xhtml">mp_units_eigen.cpp</a>.</p>

</div>
</div>
<a id="a22a3c1053bf655206ee12e8608f8f0ba" name="a22a3c1053bf655206ee12e8608f8f0ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22a3c1053bf655206ee12e8608f8f0ba">&#9670;&#160;</a></span>quantity_point</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;mp_units::Reference auto QuantityReference&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::quantity_point</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    mp_units::quantity_point&lt;QuantityReference,</div>
<div class="line">                             mp_units::default_point_origin(QuantityReference),</div>
<div class="line">                             <a class="code hl_typedef" href="#a3c3e455061e1c9775f216253f0fc5541">representation</a>&gt;</div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="mp__units__eigen_8cpp_source.xhtml#l00095">95</a> of file <a class="el" href="mp__units__eigen_8cpp_source.xhtml">mp_units_eigen.cpp</a>.</p>

</div>
</div>
<a id="a3c3e455061e1c9775f216253f0fc5541" name="a3c3e455061e1c9775f216253f0fc5541"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c3e455061e1c9775f216253f0fc5541">&#9670;&#160;</a></span>representation</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::representation = double</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="mp__units__eigen_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="mp__units__eigen_8cpp_source.xhtml">mp_units_eigen.cpp</a>.</p>

</div>
</div>
<a id="a49493e629eb806d800abe69834c8bcdf" name="a49493e629eb806d800abe69834c8bcdf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49493e629eb806d800abe69834c8bcdf">&#9670;&#160;</a></span>row_vector</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... Types&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::row_vector</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line"> </div>
<div class="line">    <a class="code hl_typedef" href="namespacefcarouge.xhtml#a7558e7ccc03031fb7de678cf4977e1bf">typed_row_vector</a>&lt;Eigen::RowVector&lt;<a class="code hl_typedef" href="#a3c3e455061e1c9775f216253f0fc5541">representation</a>, <span class="keyword">sizeof</span>...(Types)&gt;,</div>
<div class="line">                     Types...&gt;</div>
<div class="ttc" id="anamespacefcarouge_xhtml_a7558e7ccc03031fb7de678cf4977e1bf"><div class="ttname"><a href="namespacefcarouge.xhtml#a7558e7ccc03031fb7de678cf4977e1bf">fcarouge::typed_row_vector</a></div><div class="ttdeci">typed_matrix&lt; Matrix, tla::identity_index, std::tuple&lt; ColumnIndexes... &gt; &gt; typed_row_vector</div><div class="ttdoc">Strongly typed row vector.</div><div class="ttdef"><b>Definition</b> <a href="typed__linear__algebra_8hpp_source.xhtml#l00363">typed_linear_algebra.hpp:363</a></div></div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="mp__units__eigen_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="mp__units__eigen_8cpp_source.xhtml">mp_units_eigen.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a21786fcdeff8521c91f594655772d63a" name="a21786fcdeff8521c91f594655772d63a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21786fcdeff8521c91f594655772d63a">&#9670;&#160;</a></span>sample</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::sample</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Strongly typed linear algebra samples. </p>
<p>A variety of activities of strongly typed linear algebra with <a class="el" href="namespace_eigen.xhtml">Eigen</a> and mp-units. </p>

<p class="definition">Definition at line <a class="el" href="mp__units__eigen_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="mp__units__eigen_8cpp_source.xhtml">mp_units_eigen.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  120</span>                            {[] {</div>
<div class="line"><span class="lineno">  121</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::m;</div>
<div class="line"><span class="lineno">  122</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::m2;</div>
<div class="line"><span class="lineno">  123</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::s;</div>
<div class="line"><span class="lineno">  124</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::s2;</div>
<div class="line"><span class="lineno">  125</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::s3;</div>
<div class="line"><span class="lineno">  126</span>  <span class="keyword">constexpr</span> <span class="keyword">auto</span> s4{pow&lt;4&gt;(s)};</div>
<div class="line"><span class="lineno">  127</span>  <span class="keyword">using </span>mp_units::one;</div>
<div class="line"><span class="lineno">  128</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::A;</div>
<div class="line"><span class="lineno">  129</span>  <span class="keyword">using </span>mp_units::si::unit_symbols::mol;</div>
<div class="line"><span class="lineno">  130</span>  <span class="keyword">using </span>position = quantity&lt;mp_units::isq::length[m]&gt;;</div>
<div class="line"><span class="lineno">  131</span>  <span class="keyword">using </span>velocity = quantity&lt;mp_units::isq::velocity[m / s]&gt;;</div>
<div class="line"><span class="lineno">  132</span>  <span class="keyword">using </span>acceleration = quantity&lt;mp_units::isq::acceleration[m / s2]&gt;;</div>
<div class="line"><span class="lineno">  133</span>  <span class="keyword">using </span>state = <a class="code hl_typedef" href="namespacefcarouge_1_1eigen.xhtml#a3aae575a4aa6b608a99d02f58b0fc86c">column_vector&lt;position, velocity, acceleration&gt;</a>;</div>
<div class="line"><span class="lineno">  134</span> </div>
<div class="line"><span class="lineno">  135</span>  <span class="comment">// Column-vector declaration.</span></div>
<div class="line"><span class="lineno">  136</span>  state x0{3. * m, 2. * m / s, 1. * m / s2};</div>
<div class="line"><span class="lineno">  137</span> </div>
<div class="line"><span class="lineno">  138</span>  <span class="comment">// Printable.</span></div>
<div class="line"><span class="lineno">  139</span>  std::println(<span class="stringliteral">&quot;x0 = {}&quot;</span>, x0);</div>
<div class="line"><span class="lineno">  140</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x0) == <span class="stringliteral">&quot;[[3 m], [2 m/s], [1 m/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  141</span> </div>
<div class="line"><span class="lineno">  142</span>  <span class="comment">// Element assignment and access.</span></div>
<div class="line"><span class="lineno">  143</span>  x0.at&lt;1&gt;() = 2.5 * m / s;</div>
<div class="line"><span class="lineno">  144</span>  <span class="keyword">auto</span> x0_1{x0.at&lt;1&gt;()};</div>
<div class="line"><span class="lineno">  145</span>  assert(x0_1 == 2.5 * m / s);</div>
<div class="line"><span class="lineno">  146</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x0_1) == <span class="stringliteral">&quot;2.5 m/s&quot;</span>);</div>
<div class="line"><span class="lineno">  147</span> </div>
<div class="line"><span class="lineno">  148</span>  <span class="comment">// Multiplication with a scalar factor.</span></div>
<div class="line"><span class="lineno">  149</span>  state x1{x0 * 3.};</div>
<div class="line"><span class="lineno">  150</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x1) == <span class="stringliteral">&quot;[[9 m], [7.5 m/s], [3 m/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  151</span> </div>
<div class="line"><span class="lineno">  152</span>  <span class="comment">// Division with a scalar divisor.</span></div>
<div class="line"><span class="lineno">  153</span>  state x2{x1 / 2.};</div>
<div class="line"><span class="lineno">  154</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x2) == <span class="stringliteral">&quot;[[4.5 m], [3.75 m/s], [1.5 m/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  155</span> </div>
<div class="line"><span class="lineno">  156</span>  <span class="comment">// Substraction of two vectors of the same types.</span></div>
<div class="line"><span class="lineno">  157</span>  state x3{x2 - x0};</div>
<div class="line"><span class="lineno">  158</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x3) == <span class="stringliteral">&quot;[[1.5 m], [1.25 m/s], [0.5 m/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  159</span> </div>
<div class="line"><span class="lineno">  160</span>  <span class="comment">// Additions of two vectors of the same types.</span></div>
<div class="line"><span class="lineno">  161</span>  state x4{x3 + x3};</div>
<div class="line"><span class="lineno">  162</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x4) == <span class="stringliteral">&quot;[[3 m], [2.5 m/s], [1 m/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  163</span> </div>
<div class="line"><span class="lineno">  164</span>  state x5{3. * m, 2. * m / s, 1. * m / s2};</div>
<div class="line"><span class="lineno">  165</span> </div>
<div class="line"><span class="lineno">  166</span>  <span class="comment">// Multiplication with a strongly typed factor.</span></div>
<div class="line"><span class="lineno">  167</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * (2. * m)) == <span class="stringliteral">&quot;[[6 m²], [4 m²/s], [2 m²/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  168</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (0.5 / m) * x5) == <span class="stringliteral">&quot;[[1.5], [1 1/s], [0.5 1/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  169</span> </div>
<div class="line"><span class="lineno">  170</span>  <span class="keyword">using </span>state_transpose = row_vector&lt;position, velocity, acceleration&gt;;</div>
<div class="line"><span class="lineno">  171</span> </div>
<div class="line"><span class="lineno">  172</span>  <span class="comment">// Row-vector declaration.</span></div>
<div class="line"><span class="lineno">  173</span>  state_transpose xt5{3. * m, 2. * m / s, 1. * m / s2};</div>
<div class="line"><span class="lineno">  174</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5) == <span class="stringliteral">&quot;[3 m, 2 m/s, 1 m/s²]&quot;</span>);</div>
<div class="line"><span class="lineno">  175</span> </div>
<div class="line"><span class="lineno">  176</span>  <span class="comment">// Compatible matrix multiplication.</span></div>
<div class="line"><span class="lineno">  177</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * xt5) == <span class="stringliteral">&quot;[[9 m², 6 m²/s, 3 m²/s²],&quot;</span>    <span class="comment">//</span></div>
<div class="line"><span class="lineno">  178</span>                                        <span class="stringliteral">&quot; [6 m²/s, 4 m²/s², 2 m²/s³],&quot;</span> <span class="comment">//</span></div>
<div class="line"><span class="lineno">  179</span>                                        <span class="stringliteral">&quot; [3 m²/s², 2 m²/s³, 1 m²/s⁴]]&quot;</span>);</div>
<div class="line"><span class="lineno">  180</span> </div>
<div class="line"><span class="lineno">  181</span>  <span class="comment">// Singleton matrix declaration, for example, but perhaps not a recommended</span></div>
<div class="line"><span class="lineno">  182</span>  <span class="comment">// replacement for what should normally just be a `quantity{1. * A / mol}`.</span></div>
<div class="line"><span class="lineno">  183</span>  <a class="code hl_typedef" href="#a3ad842428e2a263b2bdee6a8f7a9bb9a">matrix</a>&lt;std::tuple&lt;<span class="keyword">decltype</span>(1. * A)&gt;, std::tuple&lt;<span class="keyword">decltype</span>(1. / mol)&gt;&gt; s1{</div>
<div class="line"><span class="lineno">  184</span>      1. * A / mol};</div>
<div class="line"><span class="lineno">  185</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, s1) == <span class="stringliteral">&quot;1 A/mol&quot;</span>);</div>
<div class="line"><span class="lineno">  186</span> </div>
<div class="line"><span class="lineno">  187</span>  <span class="comment">// More forms of multiplication with a scalar factor.</span></div>
<div class="line"><span class="lineno">  188</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * 2.) == <span class="stringliteral">&quot;[[6 m], [4 m/s], [2 m/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  189</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, 2. * x5) == <span class="stringliteral">&quot;[[6 m], [4 m/s], [2 m/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  190</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5 * 2.) == <span class="stringliteral">&quot;[6 m, 4 m/s, 2 m/s²]&quot;</span>);</div>
<div class="line"><span class="lineno">  191</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, 2. * xt5) == <span class="stringliteral">&quot;[6 m, 4 m/s, 2 m/s²]&quot;</span>);</div>
<div class="line"><span class="lineno">  192</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (x5 * xt5) * 2.) == <span class="stringliteral">&quot;[[18 m², 12 m²/s, 6 m²/s²],&quot;</span></div>
<div class="line"><span class="lineno">  193</span>                                               <span class="stringliteral">&quot; [12 m²/s, 8 m²/s², 4 m²/s³],&quot;</span></div>
<div class="line"><span class="lineno">  194</span>                                               <span class="stringliteral">&quot; [6 m²/s², 4 m²/s³, 2 m²/s⁴]]&quot;</span>);</div>
<div class="line"><span class="lineno">  195</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, 2. * (x5 * xt5)) == <span class="stringliteral">&quot;[[18 m², 12 m²/s, 6 m²/s²],&quot;</span></div>
<div class="line"><span class="lineno">  196</span>                                               <span class="stringliteral">&quot; [12 m²/s, 8 m²/s², 4 m²/s³],&quot;</span></div>
<div class="line"><span class="lineno">  197</span>                                               <span class="stringliteral">&quot; [6 m²/s², 4 m²/s³, 2 m²/s⁴]]&quot;</span>);</div>
<div class="line"><span class="lineno">  198</span> </div>
<div class="line"><span class="lineno">  199</span>  <span class="comment">// More forms of multiplication with a strongly typed factor.</span></div>
<div class="line"><span class="lineno">  200</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * (2. * m)) == <span class="stringliteral">&quot;[[6 m²], [4 m²/s], [2 m²/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  201</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (2. * m) * x5) == <span class="stringliteral">&quot;[[6 m²], [4 m²/s], [2 m²/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  202</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5 * (2. * m)) == <span class="stringliteral">&quot;[6 m², 4 m²/s, 2 m²/s²]&quot;</span>);</div>
<div class="line"><span class="lineno">  203</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (2. * m) * xt5) == <span class="stringliteral">&quot;[6 m², 4 m²/s, 2 m²/s²]&quot;</span>);</div>
<div class="line"><span class="lineno">  204</span> </div>
<div class="line"><span class="lineno">  205</span>  <span class="comment">// More forms of multiplication with typed matrices.</span></div>
<div class="line"><span class="lineno">  206</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 * s1) == <span class="stringliteral">&quot;[[3 A m/mol],&quot;</span></div>
<div class="line"><span class="lineno">  207</span>                                       <span class="stringliteral">&quot; [2 A m mol⁻¹ s⁻¹],&quot;</span></div>
<div class="line"><span class="lineno">  208</span>                                       <span class="stringliteral">&quot; [1 A m mol⁻¹ s⁻²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  209</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, s1 * xt5) ==</div>
<div class="line"><span class="lineno">  210</span>         <span class="stringliteral">&quot;[3 A m/mol, 2 A m mol⁻¹ s⁻¹, 1 A m mol⁻¹ s⁻²]&quot;</span>);</div>
<div class="line"><span class="lineno">  211</span> </div>
<div class="line"><span class="lineno">  212</span>  <span class="comment">// More forms of division with a scalar term.</span></div>
<div class="line"><span class="lineno">  213</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 / 2.) == <span class="stringliteral">&quot;[[1.5 m], [1 m/s], [0.5 m/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  214</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, 1. / x5) ==</div>
<div class="line"><span class="lineno">  215</span>         <span class="stringliteral">&quot;[0.3333333333333333 1/m, 0 s/m, 0 s²/m]&quot;</span>);</div>
<div class="line"><span class="lineno">  216</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5 / 2.) == <span class="stringliteral">&quot;[1.5 m, 1 m/s, 0.5 m/s²]&quot;</span>);</div>
<div class="line"><span class="lineno">  217</span> </div>
<div class="line"><span class="lineno">  218</span>  <span class="comment">// More forms of division with a strongly typed factor.</span></div>
<div class="line"><span class="lineno">  219</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 / (2. * m)) == <span class="stringliteral">&quot;[[1.5], [1 1/s], [0.5 1/s²]]&quot;</span>);</div>
<div class="line"><span class="lineno">  220</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, (1. * m) / x5) == <span class="stringliteral">&quot;[0.3333333333333333, 0 s, 0 s²]&quot;</span>);</div>
<div class="line"><span class="lineno">  221</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, xt5 / (2. * m)) == <span class="stringliteral">&quot;[1.5, 1 1/s, 0.5 1/s²]&quot;</span>);</div>
<div class="line"><span class="lineno">  222</span> </div>
<div class="line"><span class="lineno">  223</span>  <span class="comment">// More forms of division with typed matrices.</span></div>
<div class="line"><span class="lineno">  224</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, s1 / s1) == <span class="stringliteral">&quot;1&quot;</span>);</div>
<div class="line"><span class="lineno">  225</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, x5 / x5) == <span class="stringliteral">&quot;[[1, 0 s, 0 s²],&quot;</span></div>
<div class="line"><span class="lineno">  226</span>                                       <span class="stringliteral">&quot; [0.6666666666666666 1/s, 0, 0 s],&quot;</span></div>
<div class="line"><span class="lineno">  227</span>                                       <span class="stringliteral">&quot; [0.3333333333333333 1/s², 0 1/s, 0]]&quot;</span>);</div>
<div class="line"><span class="lineno">  228</span> </div>
<div class="line"><span class="lineno">  230</span> </div>
<div class="line"><span class="lineno">  231</span>  <span class="comment">// Homogeneously quantity typed vector.</span></div>
<div class="line"><span class="lineno">  232</span>  <span class="keyword">using </span>vector3d =</div>
<div class="line"><span class="lineno">  233</span>      column_vector&lt;representation, representation, representation&gt;;</div>
<div class="line"><span class="lineno">  234</span>  <span class="keyword">using </span>velocity3d = column_vector&lt;velocity, velocity, velocity&gt;;</div>
<div class="line"><span class="lineno">  235</span> </div>
<div class="line"><span class="lineno">  236</span>  velocity3d v0{vector3d{1., 2., 3.} * mp_units::isq::velocity[m / s]};</div>
<div class="line"><span class="lineno">  237</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, v0) == <span class="stringliteral">&quot;[[1 m/s], [2 m/s], [3 m/s]]&quot;</span>);</div>
<div class="line"><span class="lineno">  238</span> </div>
<div class="line"><span class="lineno">  239</span>  <span class="comment">// Beware of non-evaluated template expression: these types are not the same.</span></div>
<div class="line"><span class="lineno">  240</span>  <span class="keyword">auto</span> a0{vector3d{1., 2., 3.} * mp_units::isq::velocity[m / s]};</div>
<div class="line"><span class="lineno">  241</span>  <span class="keyword">static_assert</span>(not std::is_same_v&lt;<span class="keyword">decltype</span>(a0), velocity3d&gt;);</div>
<div class="line"><span class="lineno">  242</span> </div>
<div class="line"><span class="lineno">  245</span> </div>
<div class="line"><span class="lineno">  246</span>  <span class="comment">// Addition where both arguments should be of the same quantity kind and</span></div>
<div class="line"><span class="lineno">  247</span>  <span class="comment">// character.</span></div>
<div class="line"><span class="lineno">  249</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, v0 + v0) == <span class="stringliteral">&quot;[[2 m/s], [4 m/s], [6 m/s]]&quot;</span>);</div>
<div class="line"><span class="lineno">  250</span> </div>
<div class="line"><span class="lineno">  251</span>  <span class="comment">// Subtraction where both arguments should be of the same quantity kind and</span></div>
<div class="line"><span class="lineno">  252</span>  <span class="comment">// character.</span></div>
<div class="line"><span class="lineno">  254</span>  assert(std::format(<span class="stringliteral">&quot;{}&quot;</span>, v0 - v0) == <span class="stringliteral">&quot;[[0 m/s], [0 m/s], [0 m/s]]&quot;</span>);</div>
<div class="line"><span class="lineno">  255</span> </div>
<div class="line"><span class="lineno">  276</span> </div>
<div class="line"><span class="lineno">  277</span>  <span class="comment">// 1-D vehicle location Kalman estimation.</span></div>
<div class="line"><span class="lineno">  278</span>  state x{0. * m, 0. * m / s, 0. * m / s2};</div>
<div class="line"><span class="lineno">  279</span>  std::println(<span class="stringliteral">&quot;X: {}&quot;</span>, x);</div>
<div class="line"><span class="lineno">  280</span>  <span class="comment">// X: [[0 m],</span></div>
<div class="line"><span class="lineno">  281</span>  <span class="comment">//     [0 m/s],</span></div>
<div class="line"><span class="lineno">  282</span>  <span class="comment">//     [0 m/s²]]</span></div>
<div class="line"><span class="lineno">  283</span> </div>
<div class="line"><span class="lineno">  284</span>  <span class="keyword">using </span>estimate_uncertainty =</div>
<div class="line"><span class="lineno">  285</span>      matrix&lt;std::tuple&lt;position, velocity, acceleration&gt;,</div>
<div class="line"><span class="lineno">  286</span>             std::tuple&lt;position, velocity, acceleration&gt;&gt;;</div>
<div class="line"><span class="lineno">  287</span>  estimate_uncertainty p{estimate_uncertainty::matrix::Zero()};</div>
<div class="line"><span class="lineno">  288</span>  p.at&lt;0, 0&gt;() = 500. * m2;</div>
<div class="line"><span class="lineno">  289</span>  p.at&lt;1, 1&gt;() = 500. * m2 / s2;</div>
<div class="line"><span class="lineno">  290</span>  p.at&lt;2, 2&gt;() = 500. * m2 / s4;</div>
<div class="line"><span class="lineno">  291</span>  std::println(<span class="stringliteral">&quot;P: {}&quot;</span>, p);</div>
<div class="line"><span class="lineno">  292</span>  <span class="comment">// P: [[500 m²,     0 m²/s,    0 m²/s²],</span></div>
<div class="line"><span class="lineno">  293</span>  <span class="comment">//     [  0 m²/s, 500 m²/s²,   0 m²/s³],</span></div>
<div class="line"><span class="lineno">  294</span>  <span class="comment">//     [  0 m²/s²,  0 m²/s³, 500 m²/s⁴]]</span></div>
<div class="line"><span class="lineno">  295</span> </div>
<div class="line"><span class="lineno">  296</span>  <span class="keyword">using </span>process_uncertainty = estimate_uncertainty;</div>
<div class="line"><span class="lineno">  297</span>  process_uncertainty q{process_uncertainty::matrix::Ones() * 0.2 * 0.2};</div>
<div class="line"><span class="lineno">  298</span>  q.at&lt;0, 0&gt;() *= 0.25;</div>
<div class="line"><span class="lineno">  299</span>  q.at&lt;0, 1&gt;() *= 0.5;</div>
<div class="line"><span class="lineno">  300</span>  q.at&lt;0, 2&gt;() *= 0.5;</div>
<div class="line"><span class="lineno">  301</span>  q.at&lt;1, 0&gt;() *= 0.5;</div>
<div class="line"><span class="lineno">  302</span>  q.at&lt;2, 0&gt;() *= 0.5;</div>
<div class="line"><span class="lineno">  303</span>  std::println(<span class="stringliteral">&quot;Q: {}&quot;</span>, q);</div>
<div class="line"><span class="lineno">  304</span>  <span class="comment">// Q: [[0.01 m²,    0.02 m²/s,  0.02 m²/s²],</span></div>
<div class="line"><span class="lineno">  305</span>  <span class="comment">//     [0.02 m²/s,  0.04 m²/s², 0.04 m²/s³],</span></div>
<div class="line"><span class="lineno">  306</span>  <span class="comment">//     [0.02 m²/s², 0.04 m²/s³, 0.04 m²/s⁴]]</span></div>
<div class="line"><span class="lineno">  307</span> </div>
<div class="line"><span class="lineno">  308</span>  <span class="keyword">using </span>output_uncertainty = quantity&lt;m2&gt;;</div>
<div class="line"><span class="lineno">  309</span>  output_uncertainty r{9. * m2};</div>
<div class="line"><span class="lineno">  310</span>  std::println(<span class="stringliteral">&quot;R: {}&quot;</span>, r);</div>
<div class="line"><span class="lineno">  311</span>  <span class="comment">// R: 9 m²</span></div>
<div class="line"><span class="lineno">  312</span> </div>
<div class="line"><span class="lineno">  313</span>  <span class="keyword">using </span>output_model = row_vector&lt;quantity&lt;one&gt;, quantity&lt;s&gt;, quantity&lt;s2&gt;&gt;;</div>
<div class="line"><span class="lineno">  314</span>  <span class="comment">// output_model h{1., 0., 0.}; // WHY NOT FAILING COMPIL?</span></div>
<div class="line"><span class="lineno">  315</span>  output_model h{output_model::matrix::Identity()};</div>
<div class="line"><span class="lineno">  316</span>  std::println(<span class="stringliteral">&quot;H: {}&quot;</span>, h);</div>
<div class="line"><span class="lineno">  317</span>  <span class="comment">// H: [1, 0 s, 0 s²]</span></div>
<div class="line"><span class="lineno">  318</span> </div>
<div class="line"><span class="lineno">  319</span>  <span class="keyword">using </span>state_transition =</div>
<div class="line"><span class="lineno">  320</span>      matrix&lt;std::tuple&lt;position, velocity, acceleration&gt;,</div>
<div class="line"><span class="lineno">  321</span>             std::tuple&lt;<a class="code hl_typedef" href="#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a>&lt;one / m&gt;, <a class="code hl_typedef" href="#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a>&lt;s / m&gt;, <a class="code hl_typedef" href="#a8b2e65b7992ae2a7bbf9fe0554c970ea">quantity</a>&lt;s2 / m&gt;&gt;&gt;;</div>
<div class="line"><span class="lineno">  322</span>  state_transition f{state_transition::matrix::Identity()};</div>
<div class="line"><span class="lineno">  323</span>  f.at&lt;0, 1&gt;() = 1. * s;</div>
<div class="line"><span class="lineno">  324</span>  f.at&lt;0, 2&gt;() = 0.5 * s2;</div>
<div class="line"><span class="lineno">  325</span>  f.at&lt;1, 2&gt;() = 1. * s;</div>
<div class="line"><span class="lineno">  326</span>  std::println(<span class="stringliteral">&quot;F: {}&quot;</span>, f);</div>
<div class="line"><span class="lineno">  327</span>  <span class="comment">// F: [[1, 1 s, 0.5 s²],</span></div>
<div class="line"><span class="lineno">  328</span>  <span class="comment">//     [0 1/s, 1, 1 s],</span></div>
<div class="line"><span class="lineno">  329</span>  <span class="comment">//     [0 1/s², 0 1/s, 1]]</span></div>
<div class="line"><span class="lineno">  330</span> </div>
<div class="line"><span class="lineno">  331</span>  <span class="comment">// Prediction stage of the filter estimated state.</span></div>
<div class="line"><span class="lineno">  332</span>  x = f * x;</div>
<div class="line"><span class="lineno">  333</span>  p = f * p * transposed(f) + q;</div>
<div class="line"><span class="lineno">  334</span> </div>
<div class="line"><span class="lineno">  335</span>  <span class="comment">// Update stage of the filter from output measurements.</span></div>
<div class="line"><span class="lineno">  336</span>  <span class="keyword">using </span>output = position;</div>
<div class="line"><span class="lineno">  337</span>  output z{-393.66 * m};</div>
<div class="line"><span class="lineno">  338</span> </div>
<div class="line"><span class="lineno">  339</span>  <span class="keyword">using </span>innovation_uncertainty = output_uncertainty;</div>
<div class="line"><span class="lineno">  340</span>  innovation_uncertainty si{h * p * transposed(h) + r};</div>
<div class="line"><span class="lineno">  341</span> </div>
<div class="line"><span class="lineno">  342</span>  <span class="keyword">using </span>unevaluated_gain =</div>
<div class="line"><span class="lineno">  343</span>      <span class="keyword">decltype</span>(std::declval&lt;state&gt;() / std::declval&lt;output&gt;());</div>
<div class="line"><span class="lineno">  344</span>  <span class="keyword">using </span>gain =</div>
<div class="line"><span class="lineno">  345</span>      matrix&lt;unevaluated_gain::row_indexes, unevaluated_gain::column_indexes&gt;;</div>
<div class="line"><span class="lineno">  346</span>  gain k{p * transposed(h) / si};</div>
<div class="line"><span class="lineno">  347</span> </div>
<div class="line"><span class="lineno">  348</span>  <span class="keyword">using </span>innovation = output;</div>
<div class="line"><span class="lineno">  349</span>  innovation y{z - h * x};</div>
<div class="line"><span class="lineno">  350</span>  x = x + k * y;</div>
<div class="line"><span class="lineno">  351</span> </div>
<div class="line"><span class="lineno">  352</span>  std::println(<span class="stringliteral">&quot;X: {}&quot;</span>, x);</div>
<div class="line"><span class="lineno">  353</span>  <span class="comment">// X: [[-390.53 m],</span></div>
<div class="line"><span class="lineno">  354</span>  <span class="comment">//     [-260.36 m/s],</span></div>
<div class="line"><span class="lineno">  355</span>  <span class="comment">//     [ -86.79 m/s²]]</span></div>
<div class="line"><span class="lineno">  356</span> </div>
<div class="line"><span class="lineno">  357</span>  <span class="keyword">using </span>unevaluated_kh =</div>
<div class="line"><span class="lineno">  358</span>      <span class="keyword">decltype</span>(std::declval&lt;gain&gt;() * std::declval&lt;output_model&gt;());</div>
<div class="line"><span class="lineno">  359</span>  <span class="keyword">using </span>kh =</div>
<div class="line"><span class="lineno">  360</span>      matrix&lt;unevaluated_kh::row_indexes, unevaluated_kh::column_indexes&gt;;</div>
<div class="line"><span class="lineno">  361</span>  kh i{state_transition::matrix::Identity()};</div>
<div class="line"><span class="lineno">  362</span>  p = (i - k * h) * p * transposed(i - k * h) + k * r * transposed(k);</div>
<div class="line"><span class="lineno">  363</span>  std::println(<span class="stringliteral">&quot;P: {}&quot;</span>, p);</div>
<div class="line"><span class="lineno">  364</span>  <span class="comment">// P: [[8.92 m²,      5.95 m²/s,    1.98 m²/s²],</span></div>
<div class="line"><span class="lineno">  365</span>  <span class="comment">//     [5.95 m²/s,  503.98 m²/s², 334.67 m²/s³],</span></div>
<div class="line"><span class="lineno">  366</span>  <span class="comment">//     [1.98 m²/s², 334.67 m²/s³, 444.91 m²/s⁴]]</span></div>
<div class="line"><span class="lineno">  367</span> </div>
<div class="line"><span class="lineno">  368</span>  <span class="keywordflow">return</span> 0;</div>
<div class="line"><span class="lineno">  369</span>}()};</div>
<div class="ttc" id="anamespacefcarouge_1_1eigen_xhtml_a3aae575a4aa6b608a99d02f58b0fc86c"><div class="ttname"><a href="namespacefcarouge_1_1eigen.xhtml#a3aae575a4aa6b608a99d02f58b0fc86c">fcarouge::eigen::column_vector</a></div><div class="ttdeci">Eigen::Vector&lt; Type, Row &gt; column_vector</div><div class="ttdoc">Compile-time sized Eigen3 column vector.</div><div class="ttdef"><b>Definition</b> <a href="eigen_8hpp_source.xhtml#l00078">eigen.hpp:78</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03_xhtml_a3ad842428e2a263b2bdee6a8f7a9bb9a"><div class="ttname"><a href="#a3ad842428e2a263b2bdee6a8f7a9bb9a">fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::matrix</a></div><div class="ttdeci">typed_matrix&lt; Eigen::Matrix&lt; representation, std::tuple_size_v&lt; RowIndexes &gt;, std::tuple_size_v&lt; ColumnIndexes &gt; &gt;, RowIndexes, ColumnIndexes &gt; matrix</div><div class="ttdef"><b>Definition</b> <a href="mp__units__eigen_8cpp_source.xhtml#l00101">mp_units_eigen.cpp:101</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03_xhtml_a8b2e65b7992ae2a7bbf9fe0554c970ea"><div class="ttname"><a href="#a8b2e65b7992ae2a7bbf9fe0554c970ea">fcarouge::sample::anonymous_namespace{mp_units_eigen.cpp}::quantity</a></div><div class="ttdeci">mp_units::quantity&lt; QuantityReference, representation &gt; quantity</div><div class="ttdef"><b>Definition</b> <a href="mp__units__eigen_8cpp_source.xhtml#l00092">mp_units_eigen.cpp:92</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacefcarouge.xhtml">fcarouge</a></li><li class="navelem"><a class="el" href="namespacefcarouge_1_1sample.xhtml">sample</a></li><li class="navelem"><a class="el" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02mp__units__eigen_8cpp_03.xhtml">anonymous_namespace{mp_units_eigen.cpp}</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.12.0 </li>
  </ul>
</div>
</body>
</html>
